
CS120B_LAB11_PART1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000430  000004c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000430  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  000004c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cbd  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093e  00000000  00000000  00001295  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d4  00000000  00000000  00001bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000022a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000513  00000000  00000000  0000240c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000037e  00000000  00000000  0000291f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002c9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
   2:	00 00       	nop
   4:	a5 c0       	rjmp	.+330    	; 0x150 <__bad_interrupt>
   6:	00 00       	nop
   8:	a3 c0       	rjmp	.+326    	; 0x150 <__bad_interrupt>
   a:	00 00       	nop
   c:	a1 c0       	rjmp	.+322    	; 0x150 <__bad_interrupt>
   e:	00 00       	nop
  10:	9f c0       	rjmp	.+318    	; 0x150 <__bad_interrupt>
  12:	00 00       	nop
  14:	9d c0       	rjmp	.+314    	; 0x150 <__bad_interrupt>
  16:	00 00       	nop
  18:	9b c0       	rjmp	.+310    	; 0x150 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	99 c0       	rjmp	.+306    	; 0x150 <__bad_interrupt>
  1e:	00 00       	nop
  20:	97 c0       	rjmp	.+302    	; 0x150 <__bad_interrupt>
  22:	00 00       	nop
  24:	95 c0       	rjmp	.+298    	; 0x150 <__bad_interrupt>
  26:	00 00       	nop
  28:	93 c0       	rjmp	.+294    	; 0x150 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	91 c0       	rjmp	.+290    	; 0x150 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8f c0       	rjmp	.+286    	; 0x150 <__bad_interrupt>
  32:	00 00       	nop
  34:	f6 c0       	rjmp	.+492    	; 0x222 <__vector_13>
  36:	00 00       	nop
  38:	8b c0       	rjmp	.+278    	; 0x150 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	89 c0       	rjmp	.+274    	; 0x150 <__bad_interrupt>
  3e:	00 00       	nop
  40:	87 c0       	rjmp	.+270    	; 0x150 <__bad_interrupt>
  42:	00 00       	nop
  44:	85 c0       	rjmp	.+266    	; 0x150 <__bad_interrupt>
  46:	00 00       	nop
  48:	83 c0       	rjmp	.+262    	; 0x150 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	81 c0       	rjmp	.+258    	; 0x150 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7f c0       	rjmp	.+254    	; 0x150 <__bad_interrupt>
  52:	00 00       	nop
  54:	7d c0       	rjmp	.+250    	; 0x150 <__bad_interrupt>
  56:	00 00       	nop
  58:	7b c0       	rjmp	.+246    	; 0x150 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	79 c0       	rjmp	.+242    	; 0x150 <__bad_interrupt>
  5e:	00 00       	nop
  60:	77 c0       	rjmp	.+238    	; 0x150 <__bad_interrupt>
  62:	00 00       	nop
  64:	75 c0       	rjmp	.+234    	; 0x150 <__bad_interrupt>
  66:	00 00       	nop
  68:	73 c0       	rjmp	.+230    	; 0x150 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	71 c0       	rjmp	.+226    	; 0x150 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6f c0       	rjmp	.+222    	; 0x150 <__bad_interrupt>
  72:	00 00       	nop
  74:	6d c0       	rjmp	.+218    	; 0x150 <__bad_interrupt>
  76:	00 00       	nop
  78:	6b c0       	rjmp	.+214    	; 0x150 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	69 c0       	rjmp	.+210    	; 0x150 <__bad_interrupt>
  7e:	00 00       	nop
  80:	67 c0       	rjmp	.+206    	; 0x150 <__bad_interrupt>
  82:	00 00       	nop
  84:	65 c0       	rjmp	.+202    	; 0x150 <__bad_interrupt>
  86:	00 00       	nop
  88:	63 c0       	rjmp	.+198    	; 0x150 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	df 01       	movw	r26, r30
  8e:	05 02       	muls	r16, r21
  90:	05 02       	muls	r16, r21
  92:	05 02       	muls	r16, r21
  94:	05 02       	muls	r16, r21
  96:	05 02       	muls	r16, r21
  98:	05 02       	muls	r16, r21
  9a:	05 02       	muls	r16, r21
  9c:	05 02       	muls	r16, r21
  9e:	05 02       	muls	r16, r21
  a0:	05 02       	muls	r16, r21
  a2:	05 02       	muls	r16, r21
  a4:	05 02       	muls	r16, r21
  a6:	05 02       	muls	r16, r21
  a8:	05 02       	muls	r16, r21
  aa:	05 02       	muls	r16, r21
  ac:	05 02       	muls	r16, r21
  ae:	05 02       	muls	r16, r21
  b0:	05 02       	muls	r16, r21
  b2:	05 02       	muls	r16, r21
  b4:	05 02       	muls	r16, r21
  b6:	05 02       	muls	r16, r21
  b8:	05 02       	muls	r16, r21
  ba:	05 02       	muls	r16, r21
  bc:	05 02       	muls	r16, r21
  be:	05 02       	muls	r16, r21
  c0:	05 02       	muls	r16, r21
  c2:	05 02       	muls	r16, r21
  c4:	05 02       	muls	r16, r21
  c6:	05 02       	muls	r16, r21
  c8:	05 02       	muls	r16, r21
  ca:	05 02       	muls	r16, r21
  cc:	05 02       	muls	r16, r21
  ce:	05 02       	muls	r16, r21
  d0:	05 02       	muls	r16, r21
  d2:	03 02       	muls	r16, r19
  d4:	05 02       	muls	r16, r21
  d6:	05 02       	muls	r16, r21
  d8:	05 02       	muls	r16, r21
  da:	05 02       	muls	r16, r21
  dc:	05 02       	muls	r16, r21
  de:	05 02       	muls	r16, r21
  e0:	ff 01       	movw	r30, r30
  e2:	05 02       	muls	r16, r21
  e4:	05 02       	muls	r16, r21
  e6:	05 02       	muls	r16, r21
  e8:	05 02       	muls	r16, r21
  ea:	05 02       	muls	r16, r21
  ec:	01 02       	muls	r16, r17
  ee:	e2 01       	movw	r28, r4
  f0:	e5 01       	movw	r28, r10
  f2:	e8 01       	movw	r28, r16
  f4:	eb 01       	movw	r28, r22
  f6:	ed 01       	movw	r28, r26
  f8:	ef 01       	movw	r28, r30
  fa:	f1 01       	movw	r30, r2
  fc:	f3 01       	movw	r30, r6
  fe:	f5 01       	movw	r30, r10
 100:	05 02       	muls	r16, r21
 102:	05 02       	muls	r16, r21
 104:	05 02       	muls	r16, r21
 106:	05 02       	muls	r16, r21
 108:	05 02       	muls	r16, r21
 10a:	05 02       	muls	r16, r21
 10c:	05 02       	muls	r16, r21
 10e:	f7 01       	movw	r30, r14
 110:	f9 01       	movw	r30, r18
 112:	fb 01       	movw	r30, r22
 114:	fd 01       	movw	r30, r26

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d0 e4       	ldi	r29, 0x40	; 64
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
 122:	11 e0       	ldi	r17, 0x01	; 1
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b1 e0       	ldi	r27, 0x01	; 1
 128:	e0 e3       	ldi	r30, 0x30	; 48
 12a:	f4 e0       	ldi	r31, 0x04	; 4
 12c:	00 e0       	ldi	r16, 0x00	; 0
 12e:	0b bf       	out	0x3b, r16	; 59
 130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
 132:	07 90       	elpm	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	a4 30       	cpi	r26, 0x04	; 4
 138:	b1 07       	cpc	r27, r17
 13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	a4 e0       	ldi	r26, 0x04	; 4
 140:	b1 e0       	ldi	r27, 0x01	; 1
 142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
 144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
 146:	a9 30       	cpi	r26, 0x09	; 9
 148:	b2 07       	cpc	r27, r18
 14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
 14c:	f8 d0       	rcall	.+496    	; 0x33e <main>
 14e:	6e c1       	rjmp	.+732    	; 0x42c <_exit>

00000150 <__bad_interrupt>:
 150:	57 cf       	rjmp	.-338    	; 0x0 <__vectors>

00000152 <delay_ms>:

}
int TickFct_Keypad(int state) {
	keypadKey = GetKeypadKey();
	return state;
};
 152:	18 16       	cp	r1, r24
 154:	19 06       	cpc	r1, r25
 156:	5c f0       	brlt	.+22     	; 0x16e <delay_ms+0x1c>
 158:	08 95       	ret
 15a:	00 00       	nop
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	31 09       	sbc	r19, r1
 160:	e1 f7       	brne	.-8      	; 0x15a <delay_ms+0x8>
 162:	4f 5f       	subi	r20, 0xFF	; 255
 164:	5f 4f       	sbci	r21, 0xFF	; 255
 166:	84 17       	cp	r24, r20
 168:	95 07       	cpc	r25, r21
 16a:	19 f4       	brne	.+6      	; 0x172 <delay_ms+0x20>
 16c:	08 95       	ret
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	27 e0       	ldi	r18, 0x07	; 7
 174:	33 e0       	ldi	r19, 0x03	; 3
 176:	f1 cf       	rjmp	.-30     	; 0x15a <delay_ms+0x8>

00000178 <LCD_WriteCommand>:
 178:	5e 98       	cbi	0x0b, 6	; 11
 17a:	88 b9       	out	0x08, r24	; 8
 17c:	5f 9a       	sbi	0x0b, 7	; 11
 17e:	00 00       	nop
 180:	5f 98       	cbi	0x0b, 7	; 11
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	e5 cf       	rjmp	.-54     	; 0x152 <delay_ms>
 188:	08 95       	ret

0000018a <LCD_Cursor>:
 18a:	81 31       	cpi	r24, 0x11	; 17
 18c:	18 f4       	brcc	.+6      	; 0x194 <LCD_Cursor+0xa>
 18e:	81 58       	subi	r24, 0x81	; 129
 190:	f3 cf       	rjmp	.-26     	; 0x178 <LCD_WriteCommand>
 192:	08 95       	ret
 194:	81 55       	subi	r24, 0x51	; 81
 196:	f0 cf       	rjmp	.-32     	; 0x178 <LCD_WriteCommand>
 198:	08 95       	ret

0000019a <LCD_init>:
 19a:	84 e6       	ldi	r24, 0x64	; 100
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	d9 df       	rcall	.-78     	; 0x152 <delay_ms>
 1a0:	88 e3       	ldi	r24, 0x38	; 56
 1a2:	ea df       	rcall	.-44     	; 0x178 <LCD_WriteCommand>
 1a4:	86 e0       	ldi	r24, 0x06	; 6
 1a6:	e8 df       	rcall	.-48     	; 0x178 <LCD_WriteCommand>
 1a8:	8f e0       	ldi	r24, 0x0F	; 15
 1aa:	e6 df       	rcall	.-52     	; 0x178 <LCD_WriteCommand>
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	e4 df       	rcall	.-56     	; 0x178 <LCD_WriteCommand>
 1b0:	8a e0       	ldi	r24, 0x0A	; 10
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	ce cf       	rjmp	.-100    	; 0x152 <delay_ms>
 1b6:	08 95       	ret

000001b8 <TimerSet>:
 1b8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 1bc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 1c0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 1c4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 1c8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 1cc:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 1d0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 1d4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
 1d8:	08 95       	ret

000001da <TimerOn>:
 1da:	8b e0       	ldi	r24, 0x0B	; 11
 1dc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1e0:	8d e7       	ldi	r24, 0x7D	; 125
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1e8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1f2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1f6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 202:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 206:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 20a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 20e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 212:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 216:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 21a:	8f b7       	in	r24, 0x3f	; 63
 21c:	80 68       	ori	r24, 0x80	; 128
 21e:	8f bf       	out	0x3f, r24	; 63
 220:	08 95       	ret

00000222 <__vector_13>:
 222:	1f 92       	push	r1
 224:	0f 92       	push	r0
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	0f 92       	push	r0
 22a:	11 24       	eor	r1, r1
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
 230:	af 93       	push	r26
 232:	bf 93       	push	r27
 234:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 238:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 23c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 240:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	a1 09       	sbc	r26, r1
 248:	b1 09       	sbc	r27, r1
 24a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 24e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 252:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 256:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 25a:	89 2b       	or	r24, r25
 25c:	8a 2b       	or	r24, r26
 25e:	8b 2b       	or	r24, r27
 260:	99 f4       	brne	.+38     	; 0x288 <__vector_13+0x66>
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
 268:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 26c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 270:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 274:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 278:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 27c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 280:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 284:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 288:	bf 91       	pop	r27
 28a:	af 91       	pop	r26
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <GetKeypadKey>:
 29a:	8f e0       	ldi	r24, 0x0F	; 15
 29c:	82 b9       	out	0x02, r24	; 2
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	74 df       	rcall	.-280    	; 0x18a <LCD_Cursor>
 2a2:	8f ee       	ldi	r24, 0xEF	; 239
 2a4:	82 b9       	out	0x02, r24	; 2
 2a6:	00 00       	nop
 2a8:	00 9b       	sbis	0x00, 0	; 0
 2aa:	29 c0       	rjmp	.+82     	; 0x2fe <GetKeypadKey+0x64>
 2ac:	01 9b       	sbis	0x00, 1	; 0
 2ae:	29 c0       	rjmp	.+82     	; 0x302 <GetKeypadKey+0x68>
 2b0:	02 9b       	sbis	0x00, 2	; 0
 2b2:	29 c0       	rjmp	.+82     	; 0x306 <GetKeypadKey+0x6c>
 2b4:	03 9b       	sbis	0x00, 3	; 0
 2b6:	29 c0       	rjmp	.+82     	; 0x30a <GetKeypadKey+0x70>
 2b8:	8f eb       	ldi	r24, 0xBF	; 191
 2ba:	82 b9       	out	0x02, r24	; 2
 2bc:	00 00       	nop
 2be:	00 9b       	sbis	0x00, 0	; 0
 2c0:	26 c0       	rjmp	.+76     	; 0x30e <GetKeypadKey+0x74>
 2c2:	01 9b       	sbis	0x00, 1	; 0
 2c4:	26 c0       	rjmp	.+76     	; 0x312 <GetKeypadKey+0x78>
 2c6:	02 9b       	sbis	0x00, 2	; 0
 2c8:	26 c0       	rjmp	.+76     	; 0x316 <GetKeypadKey+0x7c>
 2ca:	03 9b       	sbis	0x00, 3	; 0
 2cc:	26 c0       	rjmp	.+76     	; 0x31a <GetKeypadKey+0x80>
 2ce:	8f ed       	ldi	r24, 0xDF	; 223
 2d0:	82 b9       	out	0x02, r24	; 2
 2d2:	00 00       	nop
 2d4:	00 9b       	sbis	0x00, 0	; 0
 2d6:	23 c0       	rjmp	.+70     	; 0x31e <GetKeypadKey+0x84>
 2d8:	01 9b       	sbis	0x00, 1	; 0
 2da:	23 c0       	rjmp	.+70     	; 0x322 <GetKeypadKey+0x88>
 2dc:	02 9b       	sbis	0x00, 2	; 0
 2de:	23 c0       	rjmp	.+70     	; 0x326 <GetKeypadKey+0x8c>
 2e0:	03 9b       	sbis	0x00, 3	; 0
 2e2:	23 c0       	rjmp	.+70     	; 0x32a <GetKeypadKey+0x90>
 2e4:	8f e7       	ldi	r24, 0x7F	; 127
 2e6:	82 b9       	out	0x02, r24	; 2
 2e8:	00 00       	nop
 2ea:	00 9b       	sbis	0x00, 0	; 0
 2ec:	20 c0       	rjmp	.+64     	; 0x32e <GetKeypadKey+0x94>
 2ee:	01 9b       	sbis	0x00, 1	; 0
 2f0:	20 c0       	rjmp	.+64     	; 0x332 <GetKeypadKey+0x98>
 2f2:	02 9b       	sbis	0x00, 2	; 0
 2f4:	20 c0       	rjmp	.+64     	; 0x336 <GetKeypadKey+0x9c>
 2f6:	03 9b       	sbis	0x00, 3	; 0
 2f8:	20 c0       	rjmp	.+64     	; 0x33a <GetKeypadKey+0xa0>
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	08 95       	ret
 2fe:	81 e3       	ldi	r24, 0x31	; 49
 300:	08 95       	ret
 302:	84 e3       	ldi	r24, 0x34	; 52
 304:	08 95       	ret
 306:	87 e3       	ldi	r24, 0x37	; 55
 308:	08 95       	ret
 30a:	8a e2       	ldi	r24, 0x2A	; 42
 30c:	08 95       	ret
 30e:	83 e3       	ldi	r24, 0x33	; 51
 310:	08 95       	ret
 312:	86 e3       	ldi	r24, 0x36	; 54
 314:	08 95       	ret
 316:	89 e3       	ldi	r24, 0x39	; 57
 318:	08 95       	ret
 31a:	83 e2       	ldi	r24, 0x23	; 35
 31c:	08 95       	ret
 31e:	82 e3       	ldi	r24, 0x32	; 50
 320:	08 95       	ret
 322:	85 e3       	ldi	r24, 0x35	; 53
 324:	08 95       	ret
 326:	88 e3       	ldi	r24, 0x38	; 56
 328:	08 95       	ret
 32a:	80 e3       	ldi	r24, 0x30	; 48
 32c:	08 95       	ret
 32e:	81 e4       	ldi	r24, 0x41	; 65
 330:	08 95       	ret
 332:	82 e4       	ldi	r24, 0x42	; 66
 334:	08 95       	ret
 336:	83 e4       	ldi	r24, 0x43	; 67
 338:	08 95       	ret
 33a:	84 e4       	ldi	r24, 0x44	; 68
 33c:	08 95       	ret

0000033e <main>:
	task1.state = -1;//Task initial state.
	task1.period = 500;//Task Period.
	task1.elapsedTime = 0;//Task current elapsed time.
	task1.TickFct = &TickFct_Keypad;//Function pointer for the tick.
	*/
	DDRA = 0xF0; PORTA = 0x0F; // Configure port A's 8 pins as inputs
 33e:	80 ef       	ldi	r24, 0xF0	; 240
 340:	81 b9       	out	0x01, r24	; 1
 342:	8f e0       	ldi	r24, 0x0F	; 15
 344:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	87 b9       	out	0x07, r24	; 7
 34a:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
 34c:	8a b9       	out	0x0a, r24	; 10
 34e:	1b b8       	out	0x0b, r1	; 11
	TimerSet(100);
 350:	64 e6       	ldi	r22, 0x64	; 100
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	2f df       	rcall	.-418    	; 0x1b8 <TimerSet>
	TimerOn();
 35a:	3f df       	rcall	.-386    	; 0x1da <TimerOn>
	LCD_init();
 35c:	1e df       	rcall	.-452    	; 0x19a <LCD_init>
 35e:	0f 2e       	mov	r0, r31

			case 'D': PORTB = 0x0D; break;
			case '*': PORTB = 0x0E; break;
			case '0': PORTB = 0x00; break;
			case '#': PORTB = 0x0F; break;
			default: PORTB = 0x1B; break; // Should never occur. Middle LED off.
 360:	fb e1       	ldi	r31, 0x1B	; 27
 362:	7f 2e       	mov	r7, r31
 364:	f0 2d       	mov	r31, r0
 366:	0f 2e       	mov	r0, r31
			// . . . ***** FINISH *****

			case 'D': PORTB = 0x0D; break;
			case '*': PORTB = 0x0E; break;
			case '0': PORTB = 0x00; break;
			case '#': PORTB = 0x0F; break;
 368:	ff e0       	ldi	r31, 0x0F	; 15
 36a:	8f 2e       	mov	r8, r31
 36c:	f0 2d       	mov	r31, r0
 36e:	0f 2e       	mov	r0, r31
			case 'B': PORTB = 11; break;
			case 'C': PORTB = 12; break;
			// . . . ***** FINISH *****

			case 'D': PORTB = 0x0D; break;
			case '*': PORTB = 0x0E; break;
 370:	fe e0       	ldi	r31, 0x0E	; 14
 372:	9f 2e       	mov	r9, r31
 374:	f0 2d       	mov	r31, r0
 376:	0f 2e       	mov	r0, r31
			case 'A': PORTB = 10; break;
			case 'B': PORTB = 11; break;
			case 'C': PORTB = 12; break;
			// . . . ***** FINISH *****

			case 'D': PORTB = 0x0D; break;
 378:	fd e0       	ldi	r31, 0x0D	; 13
 37a:	af 2e       	mov	r10, r31
 37c:	f0 2d       	mov	r31, r0
 37e:	0f 2e       	mov	r0, r31
			case '7': PORTB = 7; break;
			case '8': PORTB = 8; break;
			case '9': PORTB = 9; break;
			case 'A': PORTB = 10; break;
			case 'B': PORTB = 11; break;
			case 'C': PORTB = 12; break;
 380:	fc e0       	ldi	r31, 0x0C	; 12
 382:	bf 2e       	mov	r11, r31
 384:	f0 2d       	mov	r31, r0
 386:	0f 2e       	mov	r0, r31
			case '6': PORTB = 6; break;
			case '7': PORTB = 7; break;
			case '8': PORTB = 8; break;
			case '9': PORTB = 9; break;
			case 'A': PORTB = 10; break;
			case 'B': PORTB = 11; break;
 388:	fb e0       	ldi	r31, 0x0B	; 11
 38a:	cf 2e       	mov	r12, r31
 38c:	f0 2d       	mov	r31, r0
 38e:	0f 2e       	mov	r0, r31
			case '5': PORTB = 5; break;
			case '6': PORTB = 6; break;
			case '7': PORTB = 7; break;
			case '8': PORTB = 8; break;
			case '9': PORTB = 9; break;
			case 'A': PORTB = 10; break;
 390:	fa e0       	ldi	r31, 0x0A	; 10
 392:	df 2e       	mov	r13, r31
 394:	f0 2d       	mov	r31, r0
 396:	0f 2e       	mov	r0, r31
			case '4': PORTB = 4; break;
			case '5': PORTB = 5; break;
			case '6': PORTB = 6; break;
			case '7': PORTB = 7; break;
			case '8': PORTB = 8; break;
			case '9': PORTB = 9; break;
 398:	f9 e0       	ldi	r31, 0x09	; 9
 39a:	ef 2e       	mov	r14, r31
 39c:	f0 2d       	mov	r31, r0
 39e:	68 94       	set
			case '3': PORTB = 3; break;
			case '4': PORTB = 4; break;
			case '5': PORTB = 5; break;
			case '6': PORTB = 6; break;
			case '7': PORTB = 7; break;
			case '8': PORTB = 8; break;
 3a0:	ff 24       	eor	r15, r15
 3a2:	f3 f8       	bld	r15, 3
 3a4:	07 e0       	ldi	r16, 0x07	; 7
			case '2': PORTB = 0x02; break;
			case '3': PORTB = 3; break;
			case '4': PORTB = 4; break;
			case '5': PORTB = 5; break;
			case '6': PORTB = 6; break;
			case '7': PORTB = 7; break;
 3a6:	16 e0       	ldi	r17, 0x06	; 6
			case '\0': PORTB = 0x1F; break; // All 5 LEDs on
			case '1': PORTB = 0x01; break; // hex equivalent
			case '2': PORTB = 0x02; break;
			case '3': PORTB = 3; break;
			case '4': PORTB = 4; break;
			case '5': PORTB = 5; break;
 3a8:	d5 e0       	ldi	r29, 0x05	; 5
		switch (x) {
			case '\0': PORTB = 0x1F; break; // All 5 LEDs on
			case '1': PORTB = 0x01; break; // hex equivalent
			case '2': PORTB = 0x02; break;
			case '3': PORTB = 3; break;
			case '4': PORTB = 4; break;
 3aa:	c4 e0       	ldi	r28, 0x04	; 4
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		*/
		unsigned char x = GetKeypadKey();
 3ac:	76 df       	rcall	.-276    	; 0x29a <GetKeypadKey>
 3ae:	90 e0       	ldi	r25, 0x00	; 0
		switch (x) {
 3b0:	85 34       	cpi	r24, 0x45	; 69
 3b2:	91 05       	cpc	r25, r1
 3b4:	50 f5       	brcc	.+84     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3b6:	fc 01       	movw	r30, r24
 3b8:	ea 5b       	subi	r30, 0xBA	; 186
 3ba:	ff 4f       	sbci	r31, 0xFF	; 255
 3bc:	2e c0       	rjmp	.+92     	; 0x41a <__tablejump2__>
 3be:	8f e1       	ldi	r24, 0x1F	; 31
			case '\0': PORTB = 0x1F; break; // All 5 LEDs on
 3c0:	85 b9       	out	0x05, r24	; 5
 3c2:	24 c0       	rjmp	.+72     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3c4:	81 e0       	ldi	r24, 0x01	; 1
			case '1': PORTB = 0x01; break; // hex equivalent
 3c6:	85 b9       	out	0x05, r24	; 5
 3c8:	21 c0       	rjmp	.+66     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3ca:	82 e0       	ldi	r24, 0x02	; 2
			case '2': PORTB = 0x02; break;
 3cc:	85 b9       	out	0x05, r24	; 5
 3ce:	1e c0       	rjmp	.+60     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3d0:	83 e0       	ldi	r24, 0x03	; 3
			case '3': PORTB = 3; break;
 3d2:	85 b9       	out	0x05, r24	; 5
 3d4:	1b c0       	rjmp	.+54     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3d6:	c5 b9       	out	0x05, r28	; 5
			case '4': PORTB = 4; break;
 3d8:	19 c0       	rjmp	.+50     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3da:	d5 b9       	out	0x05, r29	; 5
			case '5': PORTB = 5; break;
 3dc:	17 c0       	rjmp	.+46     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3de:	15 b9       	out	0x05, r17	; 5
			case '6': PORTB = 6; break;
 3e0:	15 c0       	rjmp	.+42     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3e2:	05 b9       	out	0x05, r16	; 5
			case '7': PORTB = 7; break;
 3e4:	13 c0       	rjmp	.+38     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3e6:	f5 b8       	out	0x05, r15	; 5
			case '8': PORTB = 8; break;
 3e8:	11 c0       	rjmp	.+34     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3ea:	e5 b8       	out	0x05, r14	; 5
			case '9': PORTB = 9; break;
 3ec:	0f c0       	rjmp	.+30     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3ee:	d5 b8       	out	0x05, r13	; 5
			case 'A': PORTB = 10; break;
 3f0:	0d c0       	rjmp	.+26     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f2:	c5 b8       	out	0x05, r12	; 5
			case 'B': PORTB = 11; break;
 3f4:	0b c0       	rjmp	.+22     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f6:	b5 b8       	out	0x05, r11	; 5
			case 'C': PORTB = 12; break;
 3f8:	09 c0       	rjmp	.+18     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3fa:	a5 b8       	out	0x05, r10	; 5
			// . . . ***** FINISH *****

			case 'D': PORTB = 0x0D; break;
 3fc:	07 c0       	rjmp	.+14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3fe:	95 b8       	out	0x05, r9	; 5
			case '*': PORTB = 0x0E; break;
 400:	05 c0       	rjmp	.+10     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 402:	15 b8       	out	0x05, r1	; 5
			case '0': PORTB = 0x00; break;
 404:	03 c0       	rjmp	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 406:	85 b8       	out	0x05, r8	; 5
			case '#': PORTB = 0x0F; break;
 408:	01 c0       	rjmp	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 40a:	75 b8       	out	0x05, r7	; 5
			default: PORTB = 0x1B; break; // Should never occur. Middle LED off.
 40c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerFlag>
		}
		while(!TimerFlag){}
 410:	88 23       	and	r24, r24
 412:	e1 f3       	breq	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 414:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <TimerFlag>
			TimerFlag = 0;
 418:	c9 cf       	rjmp	.-110    	; 0x3ac <main+0x6e>

0000041a <__tablejump2__>:
		//Sleep();
	}
 41a:	ee 0f       	add	r30, r30
 41c:	ff 1f       	adc	r31, r31
 41e:	00 24       	eor	r0, r0
 420:	00 1c       	adc	r0, r0
 422:	0b be       	out	0x3b, r0	; 59
 424:	07 90       	elpm	r0, Z+
 426:	f6 91       	elpm	r31, Z
 428:	e0 2d       	mov	r30, r0
 42a:	09 94       	ijmp

0000042c <_exit>:
 42c:	f8 94       	cli

0000042e <__stop_program>:
 42e:	ff cf       	rjmp	.-2      	; 0x42e <__stop_program>
