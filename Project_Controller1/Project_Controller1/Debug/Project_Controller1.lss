
Project_Controller1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a8  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000805  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039a  00000000  00000000  0000142d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000017c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044c  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a6  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001dde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	7d c0       	rjmp	.+250    	; 0x196 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#define F_CPU 1000000
#include <util/delay.h>

int main(void)
{
	DDRB = 0xFF; PORTB = 0x00;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	84 b9       	out	0x04, r24	; 4
  a2:	15 b8       	out	0x05, r1	; 5
	//putting portB and portD as output pins
	DDRD = 0xFF; PORTD = 0x00;
  a4:	8a b9       	out	0x0a, r24	; 10
  a6:	1b b8       	out	0x0b, r1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	e3 ed       	ldi	r30, 0xD3	; 211
  aa:	f0 e3       	ldi	r31, 0x30	; 48
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x14>
  b2:	00 00       	nop
	_delay_ms(50);//giving delay of 50ms
	DDRA = 0x00; PORTA = 0xFF;//Joystick input.
  b4:	11 b8       	out	0x01, r1	; 1
  b6:	82 b9       	out	0x02, r24	; 2
	
	ADMUX |=(1<<REFS0);//setting the reference of ADC
  b8:	ec e7       	ldi	r30, 0x7C	; 124
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	80 64       	ori	r24, 0x40	; 64
  c0:	80 83       	st	Z, r24
	
	ADCSRA |=(1<<ADEN) |(1<ADPS2)|(1<ADPS1) |(1<<ADPS0);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 68       	ori	r24, 0x81	; 129
  ca:	80 83       	st	Z, r24
	//enabling the ADC,, setting prescalar 128
	int vert = 0;
	int horiz = 0;
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	50 e0       	ldi	r21, 0x00	; 0
	
	ADMUX |=(1<<REFS0);//setting the reference of ADC
	
	ADCSRA |=(1<<ADEN) |(1<ADPS2)|(1<ADPS1) |(1<<ADPS0);
	//enabling the ADC,, setting prescalar 128
	int vert = 0;
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
	int horiz = 0;
	while(1)
	{
		ADCSRA |=(1<<ADSC);//start ADC conversion
		while ( !(ADCSRA & (1<<ADIF)));//wait till ADC conversion
		ADC=0;//reset ADC register
  d4:	a8 e7       	ldi	r26, 0x78	; 120
  d6:	b0 e0       	ldi	r27, 0x00	; 0
		///////////////////////////////////////////////////////////////////////////////////
	
		
		 switch (ADMUX)//changing between channels by switch statement
  d8:	cc e7       	ldi	r28, 0x7C	; 124
  da:	d0 e0       	ldi	r29, 0x00	; 0
			 {
				 ADCSRA |=(1<<ADSC);
				 while ( !(ADCSRA & (1<<ADIF)));
				 horiz = ADC;
				 ADC=0;
				 ADMUX=0x41;
  dc:	71 e4       	ldi	r23, 0x41	; 65
			 {
				 ADCSRA |=(1<<ADSC);
				 while ( !(ADCSRA & (1<<ADIF)));
				 vert = ADC;
				 ADC=0;
				 ADMUX=0x40;
  de:	60 e4       	ldi	r22, 0x40	; 64
		
		
		
		if (horiz > 520 + 500)
		{
			PORTB = 0xFF;
  e0:	1f ef       	ldi	r17, 0xFF	; 255
	//enabling the ADC,, setting prescalar 128
	int vert = 0;
	int horiz = 0;
	while(1)
	{
		ADCSRA |=(1<<ADSC);//start ADC conversion
  e2:	80 81       	ld	r24, Z
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	80 83       	st	Z, r24
		while ( !(ADCSRA & (1<<ADIF)));//wait till ADC conversion
  e8:	80 81       	ld	r24, Z
  ea:	84 ff       	sbrs	r24, 4
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <main+0x4a>
		ADC=0;//reset ADC register
  ee:	11 96       	adiw	r26, 0x01	; 1
  f0:	1c 92       	st	X, r1
  f2:	1e 92       	st	-X, r1
		///////////////////////////////////////////////////////////////////////////////////
	
		
		 switch (ADMUX)//changing between channels by switch statement
  f4:	88 81       	ld	r24, Y
  f6:	80 34       	cpi	r24, 0x40	; 64
  f8:	19 f0       	breq	.+6      	; 0x100 <main+0x62>
  fa:	81 34       	cpi	r24, 0x41	; 65
  fc:	79 f0       	breq	.+30     	; 0x11c <main+0x7e>
  fe:	1b c0       	rjmp	.+54     	; 0x136 <main+0x98>
		 {
			 case 0x40://When ADMUX==0x40
			 {
				 ADCSRA |=(1<<ADSC);
 100:	80 81       	ld	r24, Z
 102:	80 64       	ori	r24, 0x40	; 64
 104:	80 83       	st	Z, r24
				 while ( !(ADCSRA & (1<<ADIF)));
 106:	80 81       	ld	r24, Z
 108:	84 ff       	sbrs	r24, 4
 10a:	fd cf       	rjmp	.-6      	; 0x106 <main+0x68>
				 horiz = ADC;
 10c:	4d 91       	ld	r20, X+
 10e:	5c 91       	ld	r21, X
 110:	11 97       	sbiw	r26, 0x01	; 1
				 ADC=0;
 112:	11 96       	adiw	r26, 0x01	; 1
 114:	1c 92       	st	X, r1
 116:	1e 92       	st	-X, r1
				 ADMUX=0x41;
 118:	78 83       	st	Y, r23
				 break;
 11a:	0d c0       	rjmp	.+26     	; 0x136 <main+0x98>
			 }

			 case 0x41:
			 {
				 ADCSRA |=(1<<ADSC);
 11c:	80 81       	ld	r24, Z
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	80 83       	st	Z, r24
				 while ( !(ADCSRA & (1<<ADIF)));
 122:	80 81       	ld	r24, Z
 124:	84 ff       	sbrs	r24, 4
 126:	fd cf       	rjmp	.-6      	; 0x122 <main+0x84>
				 vert = ADC;
 128:	2d 91       	ld	r18, X+
 12a:	3c 91       	ld	r19, X
 12c:	11 97       	sbiw	r26, 0x01	; 1
				 ADC=0;
 12e:	11 96       	adiw	r26, 0x01	; 1
 130:	1c 92       	st	X, r1
 132:	1e 92       	st	-X, r1
				 ADMUX=0x40;
 134:	68 83       	st	Y, r22
		 }
	
		
		
		
		if (horiz > 520 + 500)
 136:	4d 3f       	cpi	r20, 0xFD	; 253
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	58 07       	cpc	r21, r24
 13c:	44 f0       	brlt	.+16     	; 0x14e <main+0xb0>
		{
			PORTB = 0xFF;
 13e:	15 b9       	out	0x05, r17	; 5
 140:	81 ee       	ldi	r24, 0xE1	; 225
 142:	94 e0       	ldi	r25, 0x04	; 4
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0xa6>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0xac>
 14a:	00 00       	nop
			_delay_ms(5);
			PORTB = 0x00;
 14c:	15 b8       	out	0x05, r1	; 5
		}
		if (horiz < 100)
 14e:	44 36       	cpi	r20, 0x64	; 100
 150:	51 05       	cpc	r21, r1
 152:	44 f4       	brge	.+16     	; 0x164 <main+0xc6>
		{
			PORTB = 0xFF;
 154:	15 b9       	out	0x05, r17	; 5
 156:	81 ee       	ldi	r24, 0xE1	; 225
 158:	94 e0       	ldi	r25, 0x04	; 4
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0xbc>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0xc2>
 160:	00 00       	nop
			_delay_ms(5);
			PORTB = 0x00;
 162:	15 b8       	out	0x05, r1	; 5
		}
		if (vert > 520 + 500)
 164:	2d 3f       	cpi	r18, 0xFD	; 253
 166:	93 e0       	ldi	r25, 0x03	; 3
 168:	39 07       	cpc	r19, r25
 16a:	44 f0       	brlt	.+16     	; 0x17c <main+0xde>
		{
			PORTB = 0xFF;
 16c:	15 b9       	out	0x05, r17	; 5
 16e:	81 ee       	ldi	r24, 0xE1	; 225
 170:	94 e0       	ldi	r25, 0x04	; 4
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <main+0xd4>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0xda>
 178:	00 00       	nop
			_delay_ms(5);
			PORTB = 0x00;
 17a:	15 b8       	out	0x05, r1	; 5
		}
		if (vert < 100)
 17c:	24 36       	cpi	r18, 0x64	; 100
 17e:	31 05       	cpc	r19, r1
 180:	0c f0       	brlt	.+2      	; 0x184 <main+0xe6>
 182:	af cf       	rjmp	.-162    	; 0xe2 <main+0x44>
		{
			PORTB = 0xFF;
 184:	15 b9       	out	0x05, r17	; 5
 186:	81 ee       	ldi	r24, 0xE1	; 225
 188:	94 e0       	ldi	r25, 0x04	; 4
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <main+0xec>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0xf2>
 190:	00 00       	nop
			_delay_ms(5);
			PORTB = 0x00;
 192:	15 b8       	out	0x05, r1	; 5
 194:	a6 cf       	rjmp	.-180    	; 0xe2 <main+0x44>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
