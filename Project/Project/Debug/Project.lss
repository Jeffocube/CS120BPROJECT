
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000a02  00000a96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  00800140  00800140  00000ad6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ad6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000b48  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001483  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a14  00000000  00000000  000020e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d21  00000000  00000000  00002af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00003818  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b9  00000000  00000000  000039d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c0  00000000  00000000  00004089  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004849  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	82 c1       	rjmp	.+772    	; 0x33a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e0       	ldi	r30, 0x02	; 2
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 34       	cpi	r26, 0x40	; 64
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e4       	ldi	r26, 0x40	; 64
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 38       	cpi	r26, 0x88	; 136
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	84 d3       	rcall	.+1800   	; 0x7cc <main>
  c4:	9c c4       	rjmp	.+2360   	; 0x9fe <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <KeyBoardTick>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
  c8:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <t>
  cc:	e0 31       	cpi	r30, 0x10	; 16
  ce:	08 f0       	brcs	.+2      	; 0xd2 <KeyBoardTick+0xa>
  d0:	93 c0       	rjmp	.+294    	; 0x1f8 <KeyBoardTick+0x130>
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	91 05       	cpc	r25, r1
  d6:	09 f4       	brne	.+2      	; 0xda <KeyBoardTick+0x12>
  d8:	67 c0       	rjmp	.+206    	; 0x1a8 <KeyBoardTick+0xe0>
  da:	34 f4       	brge	.+12     	; 0xe8 <KeyBoardTick+0x20>
  dc:	00 97       	sbiw	r24, 0x00	; 0
  de:	79 f0       	breq	.+30     	; 0xfe <KeyBoardTick+0x36>
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	09 f4       	brne	.+2      	; 0xe6 <KeyBoardTick+0x1e>
  e4:	57 c0       	rjmp	.+174    	; 0x194 <KeyBoardTick+0xcc>
  e6:	7e c0       	rjmp	.+252    	; 0x1e4 <KeyBoardTick+0x11c>
  e8:	84 30       	cpi	r24, 0x04	; 4
  ea:	91 05       	cpc	r25, r1
  ec:	09 f4       	brne	.+2      	; 0xf0 <KeyBoardTick+0x28>
  ee:	6c c0       	rjmp	.+216    	; 0x1c8 <KeyBoardTick+0x100>
  f0:	0c f4       	brge	.+2      	; 0xf4 <KeyBoardTick+0x2c>
  f2:	61 c0       	rjmp	.+194    	; 0x1b6 <KeyBoardTick+0xee>
  f4:	85 30       	cpi	r24, 0x05	; 5
  f6:	91 05       	cpc	r25, r1
  f8:	09 f4       	brne	.+2      	; 0xfc <KeyBoardTick+0x34>
  fa:	6d c0       	rjmp	.+218    	; 0x1d6 <KeyBoardTick+0x10e>
  fc:	73 c0       	rjmp	.+230    	; 0x1e4 <KeyBoardTick+0x11c>
  fe:	20 b1       	in	r18, 0x00	; 0
 100:	20 7f       	andi	r18, 0xF0	; 240
 102:	20 37       	cpi	r18, 0x70	; 112
 104:	49 f4       	brne	.+18     	; 0x118 <KeyBoardTick+0x50>
 106:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <keyChar>
 10a:	88 0f       	add	r24, r24
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <keyChar>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	68 c0       	rjmp	.+208    	; 0x1e8 <KeyBoardTick+0x120>
 118:	20 b1       	in	r18, 0x00	; 0
 11a:	20 7f       	andi	r18, 0xF0	; 240
 11c:	20 3b       	cpi	r18, 0xB0	; 176
 11e:	41 f4       	brne	.+16     	; 0x130 <KeyBoardTick+0x68>
 120:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <keyChar>
 124:	88 0f       	add	r24, r24
 126:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <keyChar>
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	5c c0       	rjmp	.+184    	; 0x1e8 <KeyBoardTick+0x120>
 130:	20 b1       	in	r18, 0x00	; 0
 132:	20 7f       	andi	r18, 0xF0	; 240
 134:	20 3d       	cpi	r18, 0xD0	; 208
 136:	91 f4       	brne	.+36     	; 0x15c <KeyBoardTick+0x94>
 138:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <keyChar>
 13c:	81 11       	cpse	r24, r1
 13e:	06 c0       	rjmp	.+12     	; 0x14c <KeyBoardTick+0x84>
 140:	ae 2f       	mov	r26, r30
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	ae 5d       	subi	r26, 0xDE	; 222
 146:	be 4f       	sbci	r27, 0xFE	; 254
 148:	80 e2       	ldi	r24, 0x20	; 32
 14a:	8c 93       	st	X, r24
 14c:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <keyChar>
 150:	ef 5f       	subi	r30, 0xFF	; 255
 152:	e0 93 6d 01 	sts	0x016D, r30	; 0x80016d <t>
 156:	83 e0       	ldi	r24, 0x03	; 3
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	08 95       	ret
 15c:	20 b1       	in	r18, 0x00	; 0
 15e:	20 7f       	andi	r18, 0xF0	; 240
 160:	20 3e       	cpi	r18, 0xE0	; 224
 162:	51 f4       	brne	.+20     	; 0x178 <KeyBoardTick+0xb0>
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <READYTOSEND>
 16a:	91 11       	cpse	r25, r1
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <READYTOSEND>
 172:	84 e0       	ldi	r24, 0x04	; 4
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	38 c0       	rjmp	.+112    	; 0x1e8 <KeyBoardTick+0x120>
 178:	20 b1       	in	r18, 0x00	; 0
 17a:	28 7f       	andi	r18, 0xF8	; 248
 17c:	20 3f       	cpi	r18, 0xF0	; 240
 17e:	a1 f5       	brne	.+104    	; 0x1e8 <KeyBoardTick+0x120>
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <READYTORECEIVE>
 186:	91 11       	cpse	r25, r1
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <READYTORECEIVE>
 18e:	85 e0       	ldi	r24, 0x05	; 5
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	2a c0       	rjmp	.+84     	; 0x1e8 <KeyBoardTick+0x120>
 194:	80 b1       	in	r24, 0x00	; 0
 196:	80 7f       	andi	r24, 0xF0	; 240
 198:	31 e0       	ldi	r19, 0x01	; 1
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	80 37       	cpi	r24, 0x70	; 112
 19e:	09 f0       	breq	.+2      	; 0x1a2 <KeyBoardTick+0xda>
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	83 2f       	mov	r24, r19
 1a4:	92 2f       	mov	r25, r18
 1a6:	20 c0       	rjmp	.+64     	; 0x1e8 <KeyBoardTick+0x120>
 1a8:	20 b1       	in	r18, 0x00	; 0
 1aa:	20 7f       	andi	r18, 0xF0	; 240
 1ac:	20 3b       	cpi	r18, 0xB0	; 176
 1ae:	e1 f0       	breq	.+56     	; 0x1e8 <KeyBoardTick+0x120>
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	19 c0       	rjmp	.+50     	; 0x1e8 <KeyBoardTick+0x120>
 1b6:	20 b1       	in	r18, 0x00	; 0
 1b8:	20 7f       	andi	r18, 0xF0	; 240
 1ba:	20 3d       	cpi	r18, 0xD0	; 208
 1bc:	a9 f0       	breq	.+42     	; 0x1e8 <KeyBoardTick+0x120>
 1be:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <keyChar>
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	08 95       	ret
 1c8:	20 b1       	in	r18, 0x00	; 0
 1ca:	20 7f       	andi	r18, 0xF0	; 240
 1cc:	20 3e       	cpi	r18, 0xE0	; 224
 1ce:	61 f0       	breq	.+24     	; 0x1e8 <KeyBoardTick+0x120>
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	09 c0       	rjmp	.+18     	; 0x1e8 <KeyBoardTick+0x120>
 1d6:	20 b1       	in	r18, 0x00	; 0
 1d8:	28 7f       	andi	r18, 0xF8	; 248
 1da:	20 3f       	cpi	r18, 0xF0	; 240
 1dc:	29 f0       	breq	.+10     	; 0x1e8 <KeyBoardTick+0x120>
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <KeyBoardTick+0x120>
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <keyChar>
 1ec:	22 23       	and	r18, r18
 1ee:	21 f0       	breq	.+8      	; 0x1f8 <KeyBoardTick+0x130>
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	ee 5d       	subi	r30, 0xDE	; 222
 1f4:	fe 4f       	sbci	r31, 0xFE	; 254
 1f6:	20 83       	st	Z, r18
 1f8:	08 95       	ret

000001fa <JoyStickTick>:
 1fa:	bc 01       	movw	r22, r24
 1fc:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 200:	90 34       	cpi	r25, 0x40	; 64
 202:	19 f0       	breq	.+6      	; 0x20a <JoyStickTick+0x10>
 204:	91 34       	cpi	r25, 0x41	; 65
 206:	b9 f0       	breq	.+46     	; 0x236 <JoyStickTick+0x3c>
 208:	2b c0       	rjmp	.+86     	; 0x260 <JoyStickTick+0x66>
 20a:	ea e7       	ldi	r30, 0x7A	; 122
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	80 64       	ori	r24, 0x40	; 64
 212:	80 83       	st	Z, r24
 214:	90 81       	ld	r25, Z
 216:	94 ff       	sbrs	r25, 4
 218:	fd cf       	rjmp	.-6      	; 0x214 <JoyStickTick+0x1a>
 21a:	e8 e7       	ldi	r30, 0x78	; 120
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	91 81       	ldd	r25, Z+1	; 0x01
 222:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <horiz+0x1>
 226:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <horiz>
 22a:	11 82       	std	Z+1, r1	; 0x01
 22c:	10 82       	st	Z, r1
 22e:	81 e4       	ldi	r24, 0x41	; 65
 230:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 234:	15 c0       	rjmp	.+42     	; 0x260 <JoyStickTick+0x66>
 236:	ea e7       	ldi	r30, 0x7A	; 122
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	80 64       	ori	r24, 0x40	; 64
 23e:	80 83       	st	Z, r24
 240:	90 81       	ld	r25, Z
 242:	94 ff       	sbrs	r25, 4
 244:	fd cf       	rjmp	.-6      	; 0x240 <JoyStickTick+0x46>
 246:	e8 e7       	ldi	r30, 0x78	; 120
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	91 81       	ldd	r25, Z+1	; 0x01
 24e:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <vert+0x1>
 252:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <vert>
 256:	11 82       	std	Z+1, r1	; 0x01
 258:	10 82       	st	Z, r1
 25a:	80 e4       	ldi	r24, 0x40	; 64
 25c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 260:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <horiz>
 264:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <horiz+0x1>
 268:	25 33       	cpi	r18, 0x35	; 53
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	38 07       	cpc	r19, r24
 26e:	1c f0       	brlt	.+6      	; 0x276 <JoyStickTick+0x7c>
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <joyRight>
 276:	2c 32       	cpi	r18, 0x2C	; 44
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	38 07       	cpc	r19, r24
 27c:	1c f4       	brge	.+6      	; 0x284 <JoyStickTick+0x8a>
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <joyLeft>
 284:	40 91 73 01 	lds	r20, 0x0173	; 0x800173 <vert>
 288:	50 91 74 01 	lds	r21, 0x0174	; 0x800174 <vert+0x1>
 28c:	45 33       	cpi	r20, 0x35	; 53
 28e:	83 e0       	ldi	r24, 0x03	; 3
 290:	58 07       	cpc	r21, r24
 292:	1c f0       	brlt	.+6      	; 0x29a <JoyStickTick+0xa0>
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <joyUp>
 29a:	4c 32       	cpi	r20, 0x2C	; 44
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	58 07       	cpc	r21, r24
 2a0:	1c f4       	brge	.+6      	; 0x2a8 <JoyStickTick+0xae>
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <joyDown>
 2a8:	44 5a       	subi	r20, 0xA4	; 164
 2aa:	51 40       	sbci	r21, 0x01	; 1
 2ac:	49 3c       	cpi	r20, 0xC9	; 201
 2ae:	51 05       	cpc	r21, r1
 2b0:	20 f4       	brcc	.+8      	; 0x2ba <JoyStickTick+0xc0>
 2b2:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <joyUp>
 2b6:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <joyDown>
 2ba:	24 5a       	subi	r18, 0xA4	; 164
 2bc:	31 40       	sbci	r19, 0x01	; 1
 2be:	29 3c       	cpi	r18, 0xC9	; 201
 2c0:	31 05       	cpc	r19, r1
 2c2:	20 f4       	brcc	.+8      	; 0x2cc <JoyStickTick+0xd2>
 2c4:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <joyLeft>
 2c8:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <joyRight>
 2cc:	cb 01       	movw	r24, r22
 2ce:	08 95       	ret

000002d0 <TimerSet>:
 2d0:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <_avr_timer_M>
 2d4:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <_avr_timer_M+0x1>
 2d8:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <_avr_timer_M+0x2>
 2dc:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <_avr_timer_M+0x3>
 2e0:	60 93 6e 01 	sts	0x016E, r22	; 0x80016e <_avr_timer_cntcurr>
 2e4:	70 93 6f 01 	sts	0x016F, r23	; 0x80016f <_avr_timer_cntcurr+0x1>
 2e8:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <_avr_timer_cntcurr+0x2>
 2ec:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <_avr_timer_cntcurr+0x3>
 2f0:	08 95       	ret

000002f2 <TimerOn>:
 2f2:	8b e0       	ldi	r24, 0x0B	; 11
 2f4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 2f8:	8d e7       	ldi	r24, 0x7D	; 125
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 300:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 30a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 30e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 312:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_avr_timer_M>
 316:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <_avr_timer_M+0x1>
 31a:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <_avr_timer_M+0x2>
 31e:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <_avr_timer_M+0x3>
 322:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <_avr_timer_cntcurr>
 326:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <_avr_timer_cntcurr+0x1>
 32a:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <_avr_timer_cntcurr+0x2>
 32e:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <_avr_timer_cntcurr+0x3>
 332:	8f b7       	in	r24, 0x3f	; 63
 334:	80 68       	ori	r24, 0x80	; 128
 336:	8f bf       	out	0x3f, r24	; 63
 338:	08 95       	ret

0000033a <__vector_13>:
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	8f 93       	push	r24
 346:	9f 93       	push	r25
 348:	af 93       	push	r26
 34a:	bf 93       	push	r27
 34c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <_avr_timer_cntcurr>
 350:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <_avr_timer_cntcurr+0x1>
 354:	a0 91 70 01 	lds	r26, 0x0170	; 0x800170 <_avr_timer_cntcurr+0x2>
 358:	b0 91 71 01 	lds	r27, 0x0171	; 0x800171 <_avr_timer_cntcurr+0x3>
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	a1 09       	sbc	r26, r1
 360:	b1 09       	sbc	r27, r1
 362:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <_avr_timer_cntcurr>
 366:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <_avr_timer_cntcurr+0x1>
 36a:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <_avr_timer_cntcurr+0x2>
 36e:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <_avr_timer_cntcurr+0x3>
 372:	89 2b       	or	r24, r25
 374:	8a 2b       	or	r24, r26
 376:	8b 2b       	or	r24, r27
 378:	99 f4       	brne	.+38     	; 0x3a0 <__vector_13+0x66>
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <TimerFlag>
 380:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <_avr_timer_M>
 384:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <_avr_timer_M+0x1>
 388:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <_avr_timer_M+0x2>
 38c:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <_avr_timer_M+0x3>
 390:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <_avr_timer_cntcurr>
 394:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <_avr_timer_cntcurr+0x1>
 398:	a0 93 70 01 	sts	0x0170, r26	; 0x800170 <_avr_timer_cntcurr+0x2>
 39c:	b0 93 71 01 	sts	0x0171, r27	; 0x800171 <_avr_timer_cntcurr+0x3>
 3a0:	bf 91       	pop	r27
 3a2:	af 91       	pop	r26
 3a4:	9f 91       	pop	r25
 3a6:	8f 91       	pop	r24
 3a8:	0f 90       	pop	r0
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	0f 90       	pop	r0
 3ae:	1f 90       	pop	r1
 3b0:	18 95       	reti

000003b2 <delay_ms>:
 3b2:	18 16       	cp	r1, r24
 3b4:	19 06       	cpc	r1, r25
 3b6:	5c f0       	brlt	.+22     	; 0x3ce <delay_ms+0x1c>
 3b8:	08 95       	ret
 3ba:	00 00       	nop
 3bc:	21 50       	subi	r18, 0x01	; 1
 3be:	31 09       	sbc	r19, r1
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <delay_ms+0x8>
 3c2:	4f 5f       	subi	r20, 0xFF	; 255
 3c4:	5f 4f       	sbci	r21, 0xFF	; 255
 3c6:	84 17       	cp	r24, r20
 3c8:	95 07       	cpc	r25, r21
 3ca:	19 f4       	brne	.+6      	; 0x3d2 <delay_ms+0x20>
 3cc:	08 95       	ret
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	27 e0       	ldi	r18, 0x07	; 7
 3d4:	33 e0       	ldi	r19, 0x03	; 3
 3d6:	f1 cf       	rjmp	.-30     	; 0x3ba <delay_ms+0x8>

000003d8 <LCD_WriteCommand>:
 3d8:	2e 98       	cbi	0x05, 6	; 5
 3da:	88 b9       	out	0x08, r24	; 8
 3dc:	2f 9a       	sbi	0x05, 7	; 5
 3de:	00 00       	nop
 3e0:	2f 98       	cbi	0x05, 7	; 5
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	e5 cf       	rjmp	.-54     	; 0x3b2 <delay_ms>
 3e8:	08 95       	ret

000003ea <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 3ea:	81 31       	cpi	r24, 0x11	; 17
 3ec:	18 f4       	brcc	.+6      	; 0x3f4 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 3ee:	81 58       	subi	r24, 0x81	; 129
 3f0:	f3 cf       	rjmp	.-26     	; 0x3d8 <LCD_WriteCommand>
 3f2:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 3f4:	81 55       	subi	r24, 0x51	; 81
 3f6:	f0 cf       	rjmp	.-32     	; 0x3d8 <LCD_WriteCommand>
 3f8:	08 95       	ret

000003fa <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 3fa:	84 e6       	ldi	r24, 0x64	; 100
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	d9 df       	rcall	.-78     	; 0x3b2 <delay_ms>
	LCD_WriteCommand(0x38);
 400:	88 e3       	ldi	r24, 0x38	; 56
 402:	ea df       	rcall	.-44     	; 0x3d8 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 404:	86 e0       	ldi	r24, 0x06	; 6
 406:	e8 df       	rcall	.-48     	; 0x3d8 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 408:	8f e0       	ldi	r24, 0x0F	; 15
 40a:	e6 df       	rcall	.-52     	; 0x3d8 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	e4 df       	rcall	.-56     	; 0x3d8 <LCD_WriteCommand>
	delay_ms(10);						 
 410:	8a e0       	ldi	r24, 0x0A	; 10
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	ce cf       	rjmp	.-100    	; 0x3b2 <delay_ms>
 416:	08 95       	ret

00000418 <LCD_WriteData>:
 418:	2e 9a       	sbi	0x05, 6	; 5
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 41a:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 41c:	2f 9a       	sbi	0x05, 7	; 5
   asm("nop");
 41e:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 420:	2f 98       	cbi	0x05, 7	; 5
   delay_ms(1);
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	c5 cf       	rjmp	.-118    	; 0x3b2 <delay_ms>
 428:	08 95       	ret

0000042a <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, char* string) {
 42a:	1f 93       	push	r17
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
   //LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 430:	fb 01       	movw	r30, r22
 432:	90 81       	ld	r25, Z
 434:	99 23       	and	r25, r25
 436:	51 f0       	breq	.+20     	; 0x44c <LCD_DisplayString+0x22>
 438:	eb 01       	movw	r28, r22
      LCD_Cursor(c++);
 43a:	11 e0       	ldi	r17, 0x01	; 1
 43c:	18 0f       	add	r17, r24
 43e:	d5 df       	rcall	.-86     	; 0x3ea <LCD_Cursor>
      LCD_WriteData(*string++);
 440:	89 91       	ld	r24, Y+
 442:	ea df       	rcall	.-44     	; 0x418 <LCD_WriteData>

void LCD_DisplayString( unsigned char column, char* string) {
   //LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 444:	81 2f       	mov	r24, r17
}

void LCD_DisplayString( unsigned char column, char* string) {
   //LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 446:	98 81       	ld	r25, Y
 448:	91 11       	cpse	r25, r1
 44a:	f7 cf       	rjmp	.-18     	; 0x43a <LCD_DisplayString+0x10>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	08 95       	ret

00000454 <LCDTICK>:
	return USARTSTATE;
}

//Updates the strings to be displayed===================================================
enum LCDSTATE{DISPLAY, SENDING, RECE, OKAY1, OKAY2};
int LCDTICK(int LCDSTATE){
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	ec 01       	movw	r28, r24
	static unsigned char WAIT = 0;
	switch(LCDSTATE){
 45a:	82 30       	cpi	r24, 0x02	; 2
 45c:	91 05       	cpc	r25, r1
 45e:	09 f4       	brne	.+2      	; 0x462 <LCDTICK+0xe>
 460:	a5 c0       	rjmp	.+330    	; 0x5ac <LCDTICK+0x158>
 462:	34 f4       	brge	.+12     	; 0x470 <LCDTICK+0x1c>
 464:	00 97       	sbiw	r24, 0x00	; 0
 466:	61 f0       	breq	.+24     	; 0x480 <LCDTICK+0x2c>
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	09 f4       	brne	.+2      	; 0x46e <LCDTICK+0x1a>
 46c:	93 c0       	rjmp	.+294    	; 0x594 <LCDTICK+0x140>
 46e:	c7 c0       	rjmp	.+398    	; 0x5fe <LCDTICK+0x1aa>
 470:	83 30       	cpi	r24, 0x03	; 3
 472:	91 05       	cpc	r25, r1
 474:	09 f4       	brne	.+2      	; 0x478 <LCDTICK+0x24>
 476:	a6 c0       	rjmp	.+332    	; 0x5c4 <LCDTICK+0x170>
 478:	04 97       	sbiw	r24, 0x04	; 4
 47a:	09 f4       	brne	.+2      	; 0x47e <LCDTICK+0x2a>
 47c:	b2 c0       	rjmp	.+356    	; 0x5e2 <LCDTICK+0x18e>
 47e:	bf c0       	rjmp	.+382    	; 0x5fe <LCDTICK+0x1aa>
		case DISPLAY :
			LCD_DisplayString(1, MSG);
 480:	62 e2       	ldi	r22, 0x22	; 34
 482:	71 e0       	ldi	r23, 0x01	; 1
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	d1 df       	rcall	.-94     	; 0x42a <LCD_DisplayString>
			LCD_DisplayString(17, MSG2);
 488:	61 e1       	ldi	r22, 0x11	; 17
 48a:	71 e0       	ldi	r23, 0x01	; 1
 48c:	81 e1       	ldi	r24, 0x11	; 17
 48e:	cd df       	rcall	.-102    	; 0x42a <LCD_DisplayString>
			if(joyUp == 0x01 && up == 0){
 490:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <joyUp>
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	89 f4       	brne	.+34     	; 0x4ba <LCDTICK+0x66>
 498:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <up>
 49c:	81 11       	cpse	r24, r1
 49e:	0d c0       	rjmp	.+26     	; 0x4ba <LCDTICK+0x66>
				keyChar = 0;
 4a0:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <keyChar>
				t = 0;
 4a4:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <t>
				up = 1;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <up>
			}
			if(joyDown == 0x01 && up == 1){
 4ae:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <joyDown>
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	09 f0       	breq	.+2      	; 0x4b8 <LCDTICK+0x64>
 4b6:	c5 c0       	rjmp	.+394    	; 0x642 <LCDTICK+0x1ee>
 4b8:	08 c0       	rjmp	.+16     	; 0x4ca <LCDTICK+0x76>
 4ba:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <joyDown>
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	59 f4       	brne	.+22     	; 0x4d8 <LCDTICK+0x84>
 4c2:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <up>
 4c6:	81 30       	cpi	r24, 0x01	; 1
 4c8:	39 f4       	brne	.+14     	; 0x4d8 <LCDTICK+0x84>
				keyChar = 0;
 4ca:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <keyChar>
				t = 16;
 4ce:	80 e1       	ldi	r24, 0x10	; 16
 4d0:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <t>
				up = 0;
 4d4:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <up>
			}
	
			if(joyRight == 0x01 && t < 15 && up == 1){
 4d8:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <joyRight>
 4dc:	81 30       	cpi	r24, 0x01	; 1
 4de:	09 f0       	breq	.+2      	; 0x4e2 <LCDTICK+0x8e>
 4e0:	b6 c0       	rjmp	.+364    	; 0x64e <LCDTICK+0x1fa>
 4e2:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <t>
 4e6:	8f 30       	cpi	r24, 0x0F	; 15
 4e8:	08 f0       	brcs	.+2      	; 0x4ec <LCDTICK+0x98>
 4ea:	b7 c0       	rjmp	.+366    	; 0x65a <LCDTICK+0x206>
 4ec:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <up>
 4f0:	91 30       	cpi	r25, 0x01	; 1
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <LCDTICK+0xa2>
 4f4:	b2 c0       	rjmp	.+356    	; 0x65a <LCDTICK+0x206>
				keyChar = 0;
 4f6:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <keyChar>
				t++;
 4fa:	8f 5f       	subi	r24, 0xFF	; 255
 4fc:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <t>
				joyRight = 0;
 500:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <joyRight>
 504:	a4 c0       	rjmp	.+328    	; 0x64e <LCDTICK+0x1fa>
			}
			if(joyLeft == 0x01 && t > 0 && up == 1){
 506:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <joyLeft>
 50a:	81 30       	cpi	r24, 0x01	; 1
 50c:	09 f0       	breq	.+2      	; 0x510 <LCDTICK+0xbc>
 50e:	85 c0       	rjmp	.+266    	; 0x61a <LCDTICK+0x1c6>
 510:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <t>
 514:	88 23       	and	r24, r24
 516:	09 f4       	brne	.+2      	; 0x51a <LCDTICK+0xc6>
 518:	8c c0       	rjmp	.+280    	; 0x632 <LCDTICK+0x1de>
 51a:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <up>
 51e:	91 30       	cpi	r25, 0x01	; 1
 520:	09 f0       	breq	.+2      	; 0x524 <LCDTICK+0xd0>
 522:	76 c0       	rjmp	.+236    	; 0x610 <LCDTICK+0x1bc>
				keyChar = 0;
 524:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <keyChar>
				t--;
 528:	81 50       	subi	r24, 0x01	; 1
 52a:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <t>
				joyLeft = 0;
 52e:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <joyLeft>
 532:	73 c0       	rjmp	.+230    	; 0x61a <LCDTICK+0x1c6>
			}
			if(joyRight == 0x01 && t < 32 && up == 0){
 534:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <t>
 538:	80 32       	cpi	r24, 0x20	; 32
 53a:	48 f4       	brcc	.+18     	; 0x54e <LCDTICK+0xfa>
 53c:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <up>
 540:	91 11       	cpse	r25, r1
 542:	05 c0       	rjmp	.+10     	; 0x54e <LCDTICK+0xfa>
				t++;
 544:	8f 5f       	subi	r24, 0xFF	; 255
 546:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <t>
				joyRight = 0;
 54a:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <joyRight>
			}
			if(joyLeft == 0x01 && t > 16 && up == 0){
 54e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <joyLeft>
 552:	81 30       	cpi	r24, 0x01	; 1
 554:	69 f4       	brne	.+26     	; 0x570 <LCDTICK+0x11c>
 556:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <t>
 55a:	81 31       	cpi	r24, 0x11	; 17
 55c:	48 f0       	brcs	.+18     	; 0x570 <LCDTICK+0x11c>
 55e:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <up>
 562:	91 11       	cpse	r25, r1
 564:	05 c0       	rjmp	.+10     	; 0x570 <LCDTICK+0x11c>
				t--;
 566:	81 50       	subi	r24, 0x01	; 1
 568:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <t>
				joyLeft = 0;
 56c:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <joyLeft>
			}
			LCD_Cursor(MSGSIZE + t + 1);
 570:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <MSGSIZE>
 574:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <t>
 578:	89 0f       	add	r24, r25
 57a:	8f 5f       	subi	r24, 0xFF	; 255
 57c:	36 df       	rcall	.-404    	; 0x3ea <LCD_Cursor>
			if(READYTOSEND == 1){
 57e:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <READYTOSEND>
 582:	81 30       	cpi	r24, 0x01	; 1
 584:	09 f4       	brne	.+2      	; 0x588 <LCDTICK+0x134>
 586:	3e c0       	rjmp	.+124    	; 0x604 <LCDTICK+0x1b0>
				LCDSTATE = SENDING;
				break;
			}
			if(READYTORECEIVE == 1){
 588:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <READYTORECEIVE>
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	09 f0       	breq	.+2      	; 0x592 <LCDTICK+0x13e>
 590:	70 c0       	rjmp	.+224    	; 0x672 <LCDTICK+0x21e>
 592:	3b c0       	rjmp	.+118    	; 0x60a <LCDTICK+0x1b6>
				break;
			}
			LCDSTATE = DISPLAY;
		break;
		case SENDING :
			LCD_DisplayString(1, WAITMESSAGE);
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	71 e0       	ldi	r23, 0x01	; 1
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	47 df       	rcall	.-370    	; 0x42a <LCD_DisplayString>
			if(READYTOSEND == 1)
 59c:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <READYTOSEND>
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <LCDTICK+0x152>
 5a4:	66 c0       	rjmp	.+204    	; 0x672 <LCDTICK+0x21e>
				LCDSTATE = SENDING;
			else{
				LCDSTATE = OKAY1;
 5a6:	c3 e0       	ldi	r28, 0x03	; 3
 5a8:	d0 e0       	ldi	r29, 0x00	; 0
			}
		break;
		case RECE :
			LCD_DisplayString(17, WAITMESSAGE);
 5aa:	63 c0       	rjmp	.+198    	; 0x672 <LCDTICK+0x21e>
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	71 e0       	ldi	r23, 0x01	; 1
 5b0:	81 e1       	ldi	r24, 0x11	; 17
 5b2:	3b df       	rcall	.-394    	; 0x42a <LCD_DisplayString>
			if(READYTORECEIVE == 1)
 5b4:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <READYTORECEIVE>
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	09 f4       	brne	.+2      	; 0x5be <LCDTICK+0x16a>
				LCDSTATE = RECE;
			else{
				LCDSTATE = OKAY1;
 5bc:	5a c0       	rjmp	.+180    	; 0x672 <LCDTICK+0x21e>
 5be:	c3 e0       	ldi	r28, 0x03	; 3
			}
		break;
		case OKAY1 :
			LCD_Cursor(5);
 5c0:	d0 e0       	ldi	r29, 0x00	; 0
 5c2:	57 c0       	rjmp	.+174    	; 0x672 <LCDTICK+0x21e>
 5c4:	85 e0       	ldi	r24, 0x05	; 5
			LCD_WriteData(1);
 5c6:	11 df       	rcall	.-478    	; 0x3ea <LCD_Cursor>
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	26 df       	rcall	.-436    	; 0x418 <LCD_WriteData>
			WAIT++;
 5cc:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <WAIT.1994>
 5d0:	8f 5f       	subi	r24, 0xFF	; 255
 5d2:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <WAIT.1994>
			if(WAIT < 2){
 5d6:	82 30       	cpi	r24, 0x02	; 2
 5d8:	08 f4       	brcc	.+2      	; 0x5dc <LCDTICK+0x188>
				LCDSTATE = OKAY1;
			}else{
				LCDSTATE = DISPLAY;
 5da:	4b c0       	rjmp	.+150    	; 0x672 <LCDTICK+0x21e>
 5dc:	c0 e0       	ldi	r28, 0x00	; 0
 5de:	d0 e0       	ldi	r29, 0x00	; 0
			}
		break;
		case OKAY2 :
			LCD_Cursor(5);
 5e0:	48 c0       	rjmp	.+144    	; 0x672 <LCDTICK+0x21e>
 5e2:	85 e0       	ldi	r24, 0x05	; 5
 5e4:	02 df       	rcall	.-508    	; 0x3ea <LCD_Cursor>
			LCD_WriteData(1);
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	17 df       	rcall	.-466    	; 0x418 <LCD_WriteData>
 5ea:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <WAIT.1994>
			WAIT++;
 5ee:	8f 5f       	subi	r24, 0xFF	; 255
 5f0:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <WAIT.1994>
 5f4:	82 30       	cpi	r24, 0x02	; 2
			if(WAIT < 2){
 5f6:	e8 f1       	brcs	.+122    	; 0x672 <LCDTICK+0x21e>
 5f8:	c0 e0       	ldi	r28, 0x00	; 0
				LCDSTATE = OKAY2;
			}else{
				LCDSTATE = DISPLAY;
 5fa:	d0 e0       	ldi	r29, 0x00	; 0
 5fc:	3a c0       	rjmp	.+116    	; 0x672 <LCDTICK+0x21e>
 5fe:	c0 e0       	ldi	r28, 0x00	; 0
			}
		break;
		default :
			LCDSTATE = DISPLAY;
 600:	d0 e0       	ldi	r29, 0x00	; 0
 602:	37 c0       	rjmp	.+110    	; 0x672 <LCDTICK+0x21e>
 604:	c1 e0       	ldi	r28, 0x01	; 1
				t--;
				joyLeft = 0;
			}
			LCD_Cursor(MSGSIZE + t + 1);
			if(READYTOSEND == 1){
				LCDSTATE = SENDING;
 606:	d0 e0       	ldi	r29, 0x00	; 0
 608:	34 c0       	rjmp	.+104    	; 0x672 <LCDTICK+0x21e>
 60a:	c2 e0       	ldi	r28, 0x02	; 2
				break;
			}
			if(READYTORECEIVE == 1){
				LCDSTATE = RECE;
 60c:	d0 e0       	ldi	r29, 0x00	; 0
 60e:	31 c0       	rjmp	.+98     	; 0x672 <LCDTICK+0x21e>
		break;
		default :
			LCDSTATE = DISPLAY;
		break;
	}
	return LCDSTATE;
 610:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <joyRight>
			if(joyLeft == 0x01 && t > 0 && up == 1){
				keyChar = 0;
				t--;
				joyLeft = 0;
			}
			if(joyRight == 0x01 && t < 32 && up == 0){
 614:	81 30       	cpi	r24, 0x01	; 1
 616:	39 f1       	breq	.+78     	; 0x666 <LCDTICK+0x212>
 618:	9e cf       	rjmp	.-196    	; 0x556 <LCDTICK+0x102>
 61a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <joyRight>
 61e:	81 30       	cpi	r24, 0x01	; 1
 620:	09 f0       	breq	.+2      	; 0x624 <LCDTICK+0x1d0>
 622:	a6 cf       	rjmp	.-180    	; 0x570 <LCDTICK+0x11c>
 624:	87 cf       	rjmp	.-242    	; 0x534 <LCDTICK+0xe0>
 626:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <up>
 62a:	88 23       	and	r24, r24
 62c:	09 f4       	brne	.+2      	; 0x630 <LCDTICK+0x1dc>
 62e:	8a cf       	rjmp	.-236    	; 0x544 <LCDTICK+0xf0>
 630:	92 cf       	rjmp	.-220    	; 0x556 <LCDTICK+0x102>
 632:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <joyRight>
 636:	81 30       	cpi	r24, 0x01	; 1
 638:	b1 f3       	breq	.-20     	; 0x626 <LCDTICK+0x1d2>
 63a:	8d cf       	rjmp	.-230    	; 0x556 <LCDTICK+0x102>
 63c:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <t>
				keyChar = 0;
				t = 16;
				up = 0;
			}
	
			if(joyRight == 0x01 && t < 15 && up == 1){
 640:	55 cf       	rjmp	.-342    	; 0x4ec <LCDTICK+0x98>
 642:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <joyRight>
 646:	81 30       	cpi	r24, 0x01	; 1
 648:	09 f0       	breq	.+2      	; 0x64c <LCDTICK+0x1f8>
 64a:	5d cf       	rjmp	.-326    	; 0x506 <LCDTICK+0xb2>
 64c:	f7 cf       	rjmp	.-18     	; 0x63c <LCDTICK+0x1e8>
 64e:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <joyLeft>
				keyChar = 0;
				t++;
				joyRight = 0;
			}
			if(joyLeft == 0x01 && t > 0 && up == 1){
 652:	81 30       	cpi	r24, 0x01	; 1
 654:	09 f0       	breq	.+2      	; 0x658 <LCDTICK+0x204>
 656:	8c cf       	rjmp	.-232    	; 0x570 <LCDTICK+0x11c>
 658:	5b cf       	rjmp	.-330    	; 0x510 <LCDTICK+0xbc>
 65a:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <joyLeft>
 65e:	81 30       	cpi	r24, 0x01	; 1
 660:	09 f4       	brne	.+2      	; 0x664 <LCDTICK+0x210>
 662:	56 cf       	rjmp	.-340    	; 0x510 <LCDTICK+0xbc>
 664:	67 cf       	rjmp	.-306    	; 0x534 <LCDTICK+0xe0>
 666:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <t>
				keyChar = 0;
				t--;
				joyLeft = 0;
			}
			if(joyRight == 0x01 && t < 32 && up == 0){
 66a:	80 32       	cpi	r24, 0x20	; 32
 66c:	08 f0       	brcs	.+2      	; 0x670 <LCDTICK+0x21c>
 66e:	73 cf       	rjmp	.-282    	; 0x556 <LCDTICK+0x102>
 670:	65 cf       	rjmp	.-310    	; 0x53c <LCDTICK+0xe8>
 672:	ce 01       	movw	r24, r28
		default :
			LCDSTATE = DISPLAY;
		break;
	}
	return LCDSTATE;
}
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	08 95       	ret

0000067a <receive_string>:
 67a:	cf 93       	push	r28
#define BAUD_RATE 9600
#define BAUD_PRESCALE (((F_CPU / (BAUD_RATE * 16UL))) - 1)
unsigned char READYTOSEND;
unsigned char READYTORECEIVE;
//Sends and receives strings via USART==================================================
void receive_string(char* stringswapped){
 67c:	df 93       	push	r29
 67e:	e1 e1       	ldi	r30, 0x11	; 17
 680:	f1 e0       	ldi	r31, 0x01	; 1
 682:	41 e2       	ldi	r20, 0x21	; 33
 684:	51 e0       	ldi	r21, 0x01	; 1
	
	for(unsigned j = 0; j < 16; j++){
		MSG2[j] = ' ';
 686:	20 e2       	ldi	r18, 0x20	; 32
 688:	21 93       	st	Z+, r18
unsigned char READYTOSEND;
unsigned char READYTORECEIVE;
//Sends and receives strings via USART==================================================
void receive_string(char* stringswapped){
	
	for(unsigned j = 0; j < 16; j++){
 68a:	e4 17       	cp	r30, r20
 68c:	f5 07       	cpc	r31, r21
 68e:	e1 f7       	brne	.-8      	; 0x688 <receive_string+0xe>
		MSG2[j] = ' ';
	}
	MSG2[16] = 0;
 690:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <MSG2+0x10>
 694:	dc 01       	movw	r26, r24
 696:	9c 01       	movw	r18, r24
 698:	20 5f       	subi	r18, 0xF0	; 240
 69a:	3f 4f       	sbci	r19, 0xFF	; 255
	for(unsigned j = 0; j < 16; j++){
		while ( !(UCSR0A & (1 << RXC0)) );
 69c:	e0 ec       	ldi	r30, 0xC0	; 192
 69e:	f0 e0       	ldi	r31, 0x00	; 0
		stringswapped[j] = UDR0;
 6a0:	c6 ec       	ldi	r28, 0xC6	; 198
 6a2:	d0 e0       	ldi	r29, 0x00	; 0
	for(unsigned j = 0; j < 16; j++){
		MSG2[j] = ' ';
	}
	MSG2[16] = 0;
	for(unsigned j = 0; j < 16; j++){
		while ( !(UCSR0A & (1 << RXC0)) );
 6a4:	90 81       	ld	r25, Z
 6a6:	99 23       	and	r25, r25
 6a8:	ec f7       	brge	.-6      	; 0x6a4 <receive_string+0x2a>
		stringswapped[j] = UDR0;
 6aa:	98 81       	ld	r25, Y
 6ac:	9d 93       	st	X+, r25
	
	for(unsigned j = 0; j < 16; j++){
		MSG2[j] = ' ';
	}
	MSG2[16] = 0;
	for(unsigned j = 0; j < 16; j++){
 6ae:	a2 17       	cp	r26, r18
 6b0:	b3 07       	cpc	r27, r19
 6b2:	c1 f7       	brne	.-16     	; 0x6a4 <receive_string+0x2a>
			stringswapped[j] = ' ';
		if(j == 15)
			stringswapped[j] = 0;
			*/
	}
}
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
 6b8:	08 95       	ret

000006ba <transmit_string>:
void transmit_string(char* stringswapped){
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	dc 01       	movw	r26, r24
 6c0:	9c 01       	movw	r18, r24
 6c2:	20 5f       	subi	r18, 0xF0	; 240
 6c4:	3f 4f       	sbci	r19, 0xFF	; 255
	for(unsigned j = 0; j < 16; j++){
		while( !(UCSR0A & (1 << UDRE0)) );
 6c6:	e0 ec       	ldi	r30, 0xC0	; 192
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
			UDR0 = stringswapped[j];
 6ca:	c6 ec       	ldi	r28, 0xC6	; 198
 6cc:	d0 e0       	ldi	r29, 0x00	; 0
			*/
	}
}
void transmit_string(char* stringswapped){
	for(unsigned j = 0; j < 16; j++){
		while( !(UCSR0A & (1 << UDRE0)) );
 6ce:	90 81       	ld	r25, Z
 6d0:	95 ff       	sbrs	r25, 5
 6d2:	fd cf       	rjmp	.-6      	; 0x6ce <transmit_string+0x14>
			UDR0 = stringswapped[j];
 6d4:	8d 91       	ld	r24, X+
 6d6:	88 83       	st	Y, r24
			stringswapped[j] = 0;
			*/
	}
}
void transmit_string(char* stringswapped){
	for(unsigned j = 0; j < 16; j++){
 6d8:	a2 17       	cp	r26, r18
 6da:	b3 07       	cpc	r27, r19
 6dc:	c1 f7       	brne	.-16     	; 0x6ce <transmit_string+0x14>
 6de:	e2 e2       	ldi	r30, 0x22	; 34
 6e0:	f1 e0       	ldi	r31, 0x01	; 1
 6e2:	22 e3       	ldi	r18, 0x32	; 50
 6e4:	31 e0       	ldi	r19, 0x01	; 1
		while( !(UCSR0A & (1 << UDRE0)) );
			UDR0 = stringswapped[j];
	}
	for(unsigned j = 0; j < 16; j++){
		MSG[j] = ' ';
 6e6:	80 e2       	ldi	r24, 0x20	; 32
 6e8:	81 93       	st	Z+, r24
void transmit_string(char* stringswapped){
	for(unsigned j = 0; j < 16; j++){
		while( !(UCSR0A & (1 << UDRE0)) );
			UDR0 = stringswapped[j];
	}
	for(unsigned j = 0; j < 16; j++){
 6ea:	e2 17       	cp	r30, r18
 6ec:	f3 07       	cpc	r31, r19
 6ee:	e1 f7       	brne	.-8      	; 0x6e8 <transmit_string+0x2e>
		MSG[j] = ' ';
	}
	MSG[16] = 0;
 6f0:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <MSG+0x10>
}
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	08 95       	ret

000006fa <USARTTICK>:

enum USARTSTATE{WAITSHAKE, WAITTRANSMIT, WAITRECEIVE, TRANSMIT, RECEIVE};
int USARTTICK(int USARTSTATE){
	switch(USARTSTATE){
 6fa:	82 30       	cpi	r24, 0x02	; 2
 6fc:	91 05       	cpc	r25, r1
 6fe:	49 f1       	breq	.+82     	; 0x752 <USARTTICK+0x58>
 700:	34 f4       	brge	.+12     	; 0x70e <USARTTICK+0x14>
 702:	00 97       	sbiw	r24, 0x00	; 0
 704:	51 f0       	breq	.+20     	; 0x71a <USARTTICK+0x20>
 706:	81 30       	cpi	r24, 0x01	; 1
 708:	91 05       	cpc	r25, r1
 70a:	b1 f0       	breq	.+44     	; 0x738 <USARTTICK+0x3e>
 70c:	49 c0       	rjmp	.+146    	; 0x7a0 <USARTTICK+0xa6>
 70e:	83 30       	cpi	r24, 0x03	; 3
 710:	91 05       	cpc	r25, r1
 712:	69 f1       	breq	.+90     	; 0x76e <USARTTICK+0x74>
 714:	04 97       	sbiw	r24, 0x04	; 4
 716:	a1 f1       	breq	.+104    	; 0x780 <USARTTICK+0x86>
 718:	43 c0       	rjmp	.+134    	; 0x7a0 <USARTTICK+0xa6>
		case WAITSHAKE :
			if(READYTOSEND == 1){
 71a:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <READYTOSEND>
 71e:	21 30       	cpi	r18, 0x01	; 1
 720:	19 f4       	brne	.+6      	; 0x728 <USARTTICK+0x2e>
				PORTD = PORTD | 0x20;
 722:	5d 9a       	sbi	0x0b, 5	; 11
				USARTSTATE = WAITTRANSMIT;
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	90 e0       	ldi	r25, 0x00	; 0
			}
			if(READYTORECEIVE == 1){
 728:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <READYTORECEIVE>
 72c:	21 30       	cpi	r18, 0x01	; 1
 72e:	d1 f5       	brne	.+116    	; 0x7a4 <USARTTICK+0xaa>
				PORTD = PORTD | 0x08;
 730:	5b 9a       	sbi	0x0b, 3	; 11
				USARTSTATE = WAITRECEIVE;
 732:	82 e0       	ldi	r24, 0x02	; 2
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	08 95       	ret
			}
		break;
		case WAITTRANSMIT :
			if(READYTOSEND == 0){
 738:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <READYTOSEND>
 73c:	21 11       	cpse	r18, r1
 73e:	04 c0       	rjmp	.+8      	; 0x748 <USARTTICK+0x4e>
				PORTD = PORTD & 0xDF;
 740:	5d 98       	cbi	0x0b, 5	; 11
				USARTSTATE = WAITSHAKE;
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	90 e0       	ldi	r25, 0x00	; 0
				break;
 746:	08 95       	ret
			}
			if((PORTD & 0x04) == 0x04){
 748:	5a 9b       	sbis	0x0b, 2	; 11
 74a:	2c c0       	rjmp	.+88     	; 0x7a4 <USARTTICK+0xaa>
				USARTSTATE = TRANSMIT;
 74c:	83 e0       	ldi	r24, 0x03	; 3
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	08 95       	ret
			}
		break;
		case WAITRECEIVE :
			if(READYTORECEIVE == 0){
 752:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <READYTORECEIVE>
 756:	21 11       	cpse	r18, r1
 758:	04 c0       	rjmp	.+8      	; 0x762 <USARTTICK+0x68>
				PORTD = PORTD & 0xF7;
 75a:	5b 98       	cbi	0x0b, 3	; 11
				USARTSTATE = WAITSHAKE;
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	90 e0       	ldi	r25, 0x00	; 0
				break;
 760:	08 95       	ret
			}
			if((PIND & 0x10) == 0x10){
 762:	4c 9b       	sbis	0x09, 4	; 9
 764:	1f c0       	rjmp	.+62     	; 0x7a4 <USARTTICK+0xaa>
				PORTD = PORTD | 0x08;
 766:	5b 9a       	sbi	0x0b, 3	; 11
				USARTSTATE = RECEIVE;
 768:	84 e0       	ldi	r24, 0x04	; 4
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	08 95       	ret
			}
		break;
		case TRANSMIT :
			transmit_string(MSG);
 76e:	82 e2       	ldi	r24, 0x22	; 34
 770:	91 e0       	ldi	r25, 0x01	; 1
 772:	a3 df       	rcall	.-186    	; 0x6ba <transmit_string>
			PORTD = PORTD & 0xDF;
 774:	5d 98       	cbi	0x0b, 5	; 11
			READYTOSEND = 0;
 776:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <READYTOSEND>
			USARTSTATE = WAITSHAKE;
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	90 e0       	ldi	r25, 0x00	; 0
		break;
 77e:	08 95       	ret
		case RECEIVE :
			receive_string(MSG2);
 780:	81 e1       	ldi	r24, 0x11	; 17
 782:	91 e0       	ldi	r25, 0x01	; 1
 784:	7a df       	rcall	.-268    	; 0x67a <receive_string>
			PORTD = PORTD & 0xF7;
 786:	5b 98       	cbi	0x0b, 3	; 11
			eeprom_update_block(MSG2, (void *)1, 17);
 788:	41 e1       	ldi	r20, 0x11	; 17
 78a:	50 e0       	ldi	r21, 0x00	; 0
 78c:	61 e0       	ldi	r22, 0x01	; 1
 78e:	70 e0       	ldi	r23, 0x00	; 0
 790:	81 e1       	ldi	r24, 0x11	; 17
 792:	91 e0       	ldi	r25, 0x01	; 1
 794:	13 d1       	rcall	.+550    	; 0x9bc <eeprom_update_block>
			READYTORECEIVE = 0;
 796:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <READYTORECEIVE>
			USARTSTATE = WAITSHAKE;
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	90 e0       	ldi	r25, 0x00	; 0
		break;
 79e:	08 95       	ret
		default :
			USARTSTATE = WAITSHAKE;
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	
	return USARTSTATE;
}
 7a4:	08 95       	ret

000007a6 <LCD_build>:
}



void LCD_build(){
	LCD_WriteCommand(0x48);       //Load the location where we want to store
 7a6:	88 e4       	ldi	r24, 0x48	; 72
 7a8:	17 de       	rcall	.-978    	; 0x3d8 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	35 de       	rcall	.-918    	; 0x418 <LCD_WriteData>
	LCD_WriteData(0x10);      //Load row 1 data
 7ae:	80 e1       	ldi	r24, 0x10	; 16
 7b0:	33 de       	rcall	.-922    	; 0x418 <LCD_WriteData>
	LCD_WriteData(0x30);      //Load row 2 data
 7b2:	80 e3       	ldi	r24, 0x30	; 48
 7b4:	31 de       	rcall	.-926    	; 0x418 <LCD_WriteData>
	LCD_WriteData(0x70);      //Load row 4 data
 7b6:	80 e7       	ldi	r24, 0x70	; 112
 7b8:	2f de       	rcall	.-930    	; 0x418 <LCD_WriteData>
	LCD_WriteData(0xFF);      //Load row 5 data
 7ba:	8f ef       	ldi	r24, 0xFF	; 255
 7bc:	2d de       	rcall	.-934    	; 0x418 <LCD_WriteData>
	LCD_WriteData(0xFF);      //Load row 6 data
 7be:	8f ef       	ldi	r24, 0xFF	; 255
 7c0:	2b de       	rcall	.-938    	; 0x418 <LCD_WriteData>
 7c2:	8f ef       	ldi	r24, 0xFF	; 255
	LCD_WriteData(0xFF);      //Load row 7 data
 7c4:	29 de       	rcall	.-942    	; 0x418 <LCD_WriteData>
 7c6:	8f ef       	ldi	r24, 0xFF	; 255
 7c8:	27 ce       	rjmp	.-946    	; 0x418 <LCD_WriteData>
	LCD_WriteData(0xFF);      //Load row 8 data
 7ca:	08 95       	ret

000007cc <main>:
 7cc:	cf 93       	push	r28
 7ce:	df 93       	push	r29
 7d0:	cd b7       	in	r28, 0x3d	; 61




int main(void)
{
 7d2:	de b7       	in	r29, 0x3e	; 62
 7d4:	28 97       	sbiw	r28, 0x08	; 8
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	f8 94       	cli
 7da:	de bf       	out	0x3e, r29	; 62
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	cd bf       	out	0x3d, r28	; 61
	sent = 0;
 7e0:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <sent>
	received = 0;
 7e4:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <received>
	
	READYTORECEIVE = 0;
 7e8:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <READYTORECEIVE>
	READYTOSEND = 0;
 7ec:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <READYTOSEND>
	
	UCSR0B |= (1 << RXEN0)  | (1 << TXEN0);
 7f0:	e1 ec       	ldi	r30, 0xC1	; 193
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	80 81       	ld	r24, Z
 7f6:	88 61       	ori	r24, 0x18	; 24
 7f8:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 7fa:	e2 ec       	ldi	r30, 0xC2	; 194
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	80 81       	ld	r24, Z
 800:	86 60       	ori	r24, 0x06	; 6
 802:	80 83       	st	Z, r24
	UBRR0L = BAUD_PRESCALE;
 804:	83 e3       	ldi	r24, 0x33	; 51
 806:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR0H = (BAUD_PRESCALE >> 8);
 80a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	
	//eeprom_update_block("Hello world", (void *)1, 12);
	eeprom_read_block(MSG2, 0x01, 12);
 80e:	4c e0       	ldi	r20, 0x0C	; 12
 810:	50 e0       	ldi	r21, 0x00	; 0
 812:	61 e0       	ldi	r22, 0x01	; 1
 814:	70 e0       	ldi	r23, 0x00	; 0
 816:	81 e1       	ldi	r24, 0x11	; 17
 818:	91 e0       	ldi	r25, 0x01	; 1
 81a:	c0 d0       	rcall	.+384    	; 0x99c <eeprom_read_block>
	
	up = 1;
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <up>
	t = 0;
 822:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <t>
	keyChar = 0x00;
 826:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <keyChar>
	MSGSPOT = 0;
 82a:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <MSGSPOT+0x1>
 82e:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <MSGSPOT>
	MSGSIZE = 0;
 832:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <MSGSIZE>
	
	DDRD = 0xAA; PORTD = 0x55;
 836:	8a ea       	ldi	r24, 0xAA	; 170
 838:	8a b9       	out	0x0a, r24	; 10
 83a:	85 e5       	ldi	r24, 0x55	; 85
 83c:	8b b9       	out	0x0b, r24	; 11
	DDRC = 0xFF; PORTC = 0x00;
 83e:	8f ef       	ldi	r24, 0xFF	; 255
 840:	87 b9       	out	0x07, r24	; 7
 842:	18 b8       	out	0x08, r1	; 8
	DDRB = 0xFF; PORTB = 0x00;
 844:	84 b9       	out	0x04, r24	; 4
 846:	15 b8       	out	0x05, r1	; 5
	DDRA = 0x00; PORTA = 0xFF;//Joystick input.
 848:	11 b8       	out	0x01, r1	; 1
 84a:	82 b9       	out	0x02, r24	; 2
	
	ADMUX |= (1 << REFS0);//setting the reference of ADC
 84c:	ec e7       	ldi	r30, 0x7C	; 124
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	90 81       	ld	r25, Z
 852:	90 64       	ori	r25, 0x40	; 64
 854:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADPS0) | (1<ADPS1)| (1<ADPS2) | (1<<ADEN) ;
 856:	ea e7       	ldi	r30, 0x7A	; 122
 858:	f0 e0       	ldi	r31, 0x00	; 0
 85a:	90 81       	ld	r25, Z
 85c:	91 68       	ori	r25, 0x81	; 129
 85e:	90 83       	st	Z, r25
	static task task1, task2, task3, task4;
	task *tasks[] = { &task1, &task2, &task3, &task4};
 860:	98 e0       	ldi	r25, 0x08	; 8
 862:	e7 e3       	ldi	r30, 0x37	; 55
 864:	f1 e0       	ldi	r31, 0x01	; 1
 866:	de 01       	movw	r26, r28
 868:	11 96       	adiw	r26, 0x01	; 1
 86a:	01 90       	ld	r0, Z+
 86c:	0d 92       	st	X+, r0
 86e:	9a 95       	dec	r25
 870:	e1 f7       	brne	.-8      	; 0x86a <main+0x9e>
	//task1 init
	task1.state = -1;
 872:	e1 e6       	ldi	r30, 0x61	; 97
 874:	f1 e0       	ldi	r31, 0x01	; 1
 876:	80 83       	st	Z, r24
	task1.period = 40;
 878:	48 e2       	ldi	r20, 0x28	; 40
 87a:	50 e0       	ldi	r21, 0x00	; 0
 87c:	60 e0       	ldi	r22, 0x00	; 0
 87e:	70 e0       	ldi	r23, 0x00	; 0
 880:	41 83       	std	Z+1, r20	; 0x01
 882:	52 83       	std	Z+2, r21	; 0x02
 884:	63 83       	std	Z+3, r22	; 0x03
 886:	74 83       	std	Z+4, r23	; 0x04
	task1.elapsedTime = 40;
 888:	45 83       	std	Z+5, r20	; 0x05
 88a:	56 83       	std	Z+6, r21	; 0x06
 88c:	67 83       	std	Z+7, r22	; 0x07
 88e:	70 87       	std	Z+8, r23	; 0x08
	task1.TickFct = &KeyBoardTick;
 890:	24 e6       	ldi	r18, 0x64	; 100
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	32 87       	std	Z+10, r19	; 0x0a
 896:	21 87       	std	Z+9, r18	; 0x09
	
	task2.state = -1;
 898:	e6 e5       	ldi	r30, 0x56	; 86
 89a:	f1 e0       	ldi	r31, 0x01	; 1
 89c:	80 83       	st	Z, r24
	task2.period = 20;
 89e:	44 e1       	ldi	r20, 0x14	; 20
 8a0:	50 e0       	ldi	r21, 0x00	; 0
 8a2:	60 e0       	ldi	r22, 0x00	; 0
 8a4:	70 e0       	ldi	r23, 0x00	; 0
 8a6:	41 83       	std	Z+1, r20	; 0x01
 8a8:	52 83       	std	Z+2, r21	; 0x02
 8aa:	63 83       	std	Z+3, r22	; 0x03
 8ac:	74 83       	std	Z+4, r23	; 0x04
	task2.elapsedTime = 20;
 8ae:	45 83       	std	Z+5, r20	; 0x05
 8b0:	56 83       	std	Z+6, r21	; 0x06
 8b2:	67 83       	std	Z+7, r22	; 0x07
 8b4:	70 87       	std	Z+8, r23	; 0x08
	task2.TickFct = &JoyStickTick;
 8b6:	2d ef       	ldi	r18, 0xFD	; 253
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	32 87       	std	Z+10, r19	; 0x0a
 8bc:	21 87       	std	Z+9, r18	; 0x09
	
	task3.state = -1;
 8be:	eb e4       	ldi	r30, 0x4B	; 75
 8c0:	f1 e0       	ldi	r31, 0x01	; 1
 8c2:	80 83       	st	Z, r24
	task3.period = 200;
 8c4:	08 ec       	ldi	r16, 0xC8	; 200
 8c6:	10 e0       	ldi	r17, 0x00	; 0
 8c8:	20 e0       	ldi	r18, 0x00	; 0
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	01 83       	std	Z+1, r16	; 0x01
 8ce:	12 83       	std	Z+2, r17	; 0x02
 8d0:	23 83       	std	Z+3, r18	; 0x03
 8d2:	34 83       	std	Z+4, r19	; 0x04
	task3.elapsedTime = 200;
 8d4:	05 83       	std	Z+5, r16	; 0x05
 8d6:	16 83       	std	Z+6, r17	; 0x06
 8d8:	27 83       	std	Z+7, r18	; 0x07
 8da:	30 87       	std	Z+8, r19	; 0x08
	task3.TickFct = &LCDTICK;
 8dc:	2a e2       	ldi	r18, 0x2A	; 42
 8de:	32 e0       	ldi	r19, 0x02	; 2
 8e0:	32 87       	std	Z+10, r19	; 0x0a
 8e2:	21 87       	std	Z+9, r18	; 0x09
	
	task4.state = -1;
 8e4:	e0 e4       	ldi	r30, 0x40	; 64
 8e6:	f1 e0       	ldi	r31, 0x01	; 1
 8e8:	80 83       	st	Z, r24
	task4.period = 20;
 8ea:	41 83       	std	Z+1, r20	; 0x01
 8ec:	52 83       	std	Z+2, r21	; 0x02
 8ee:	63 83       	std	Z+3, r22	; 0x03
 8f0:	74 83       	std	Z+4, r23	; 0x04
	task4.elapsedTime = 20;
 8f2:	45 83       	std	Z+5, r20	; 0x05
 8f4:	56 83       	std	Z+6, r21	; 0x06
 8f6:	67 83       	std	Z+7, r22	; 0x07
 8f8:	70 87       	std	Z+8, r23	; 0x08
	task4.TickFct = &USARTTICK;
 8fa:	8d e7       	ldi	r24, 0x7D	; 125
 8fc:	93 e0       	ldi	r25, 0x03	; 3
 8fe:	92 87       	std	Z+10, r25	; 0x0a
 900:	81 87       	std	Z+9, r24	; 0x09
	
	TimerSet(20);
 902:	64 e1       	ldi	r22, 0x14	; 20
 904:	70 e0       	ldi	r23, 0x00	; 0
 906:	80 e0       	ldi	r24, 0x00	; 0
 908:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 90a:	e2 dc       	rcall	.-1596   	; 0x2d0 <TimerSet>
	LCD_init();
 90c:	f2 dc       	rcall	.-1564   	; 0x2f2 <TimerOn>
	LCD_build();
 90e:	75 dd       	rcall	.-1302   	; 0x3fa <LCD_init>
 910:	4a df       	rcall	.-364    	; 0x7a6 <LCD_build>
	LCD_Cursor(0);
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	6a dd       	rcall	.-1324   	; 0x3ea <LCD_Cursor>
 916:	7e 01       	movw	r14, r28
 918:	89 e0       	ldi	r24, 0x09	; 9
 91a:	e8 0e       	add	r14, r24
 91c:	f1 1c       	adc	r15, r1
 91e:	de 01       	movw	r26, r28
 920:	11 96       	adiw	r26, 0x01	; 1
 922:	6d 01       	movw	r12, r26
 924:	f6 01       	movw	r30, r12
	while(1)
	{
		
		for ( unsigned i = 0; i < 4; i++ ) {
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 926:	01 91       	ld	r16, Z+
 928:	11 91       	ld	r17, Z+
 92a:	6f 01       	movw	r12, r30
 92c:	d8 01       	movw	r26, r16
 92e:	15 96       	adiw	r26, 0x05	; 5
 930:	4d 91       	ld	r20, X+
 932:	5d 91       	ld	r21, X+
 934:	6d 91       	ld	r22, X+
 936:	7c 91       	ld	r23, X
 938:	18 97       	sbiw	r26, 0x08	; 8
 93a:	11 96       	adiw	r26, 0x01	; 1
 93c:	8d 91       	ld	r24, X+
 93e:	9d 91       	ld	r25, X+
 940:	0d 90       	ld	r0, X+
 942:	bc 91       	ld	r27, X
 944:	a0 2d       	mov	r26, r0
 946:	48 17       	cp	r20, r24
 948:	59 07       	cpc	r21, r25
 94a:	6a 07       	cpc	r22, r26
 94c:	7b 07       	cpc	r23, r27
 94e:	81 f4       	brne	.+32     	; 0x970 <main+0x1a4>
 950:	f8 01       	movw	r30, r16
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 952:	80 81       	ld	r24, Z
 954:	01 84       	ldd	r0, Z+9	; 0x09
 956:	f2 85       	ldd	r31, Z+10	; 0x0a
 958:	e0 2d       	mov	r30, r0
 95a:	08 2e       	mov	r0, r24
 95c:	00 0c       	add	r0, r0
 95e:	99 0b       	sbc	r25, r25
 960:	09 95       	icall
 962:	d8 01       	movw	r26, r16
 964:	8c 93       	st	X, r24
 966:	f8 01       	movw	r30, r16
				tasks[i]->elapsedTime = 0;
 968:	15 82       	std	Z+5, r1	; 0x05
 96a:	16 82       	std	Z+6, r1	; 0x06
 96c:	17 82       	std	Z+7, r1	; 0x07
 96e:	10 86       	std	Z+8, r1	; 0x08
 970:	f8 01       	movw	r30, r16
			}
			tasks[i]->elapsedTime += 20;
 972:	85 81       	ldd	r24, Z+5	; 0x05
 974:	96 81       	ldd	r25, Z+6	; 0x06
 976:	a7 81       	ldd	r26, Z+7	; 0x07
 978:	b0 85       	ldd	r27, Z+8	; 0x08
 97a:	44 96       	adiw	r24, 0x14	; 20
 97c:	a1 1d       	adc	r26, r1
 97e:	b1 1d       	adc	r27, r1
 980:	85 83       	std	Z+5, r24	; 0x05
 982:	96 83       	std	Z+6, r25	; 0x06
 984:	a7 83       	std	Z+7, r26	; 0x07
 986:	b0 87       	std	Z+8, r27	; 0x08
 988:	ce 14       	cp	r12, r14
	LCD_build();
	LCD_Cursor(0);
	while(1)
	{
		
		for ( unsigned i = 0; i < 4; i++ ) {
 98a:	df 04       	cpc	r13, r15
 98c:	59 f6       	brne	.-106    	; 0x924 <main+0x158>
 98e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <TimerFlag>
			}
			tasks[i]->elapsedTime += 20;
		}
	
		//Remember to add timer to code
		while(!TimerFlag);
 992:	88 23       	and	r24, r24
 994:	e1 f3       	breq	.-8      	; 0x98e <main+0x1c2>
 996:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <TimerFlag>
		TimerFlag = 0;
 99a:	c1 cf       	rjmp	.-126    	; 0x91e <main+0x152>

0000099c <eeprom_read_block>:
 99c:	dc 01       	movw	r26, r24
 99e:	cb 01       	movw	r24, r22

000009a0 <eeprom_read_blraw>:
 9a0:	fc 01       	movw	r30, r24
 9a2:	f9 99       	sbic	0x1f, 1	; 31
 9a4:	fe cf       	rjmp	.-4      	; 0x9a2 <eeprom_read_blraw+0x2>
 9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <eeprom_read_blraw+0x14>
 9a8:	f2 bd       	out	0x22, r31	; 34
 9aa:	e1 bd       	out	0x21, r30	; 33
 9ac:	f8 9a       	sbi	0x1f, 0	; 31
 9ae:	31 96       	adiw	r30, 0x01	; 1
 9b0:	00 b4       	in	r0, 0x20	; 32
 9b2:	0d 92       	st	X+, r0
 9b4:	41 50       	subi	r20, 0x01	; 1
 9b6:	50 40       	sbci	r21, 0x00	; 0
 9b8:	b8 f7       	brcc	.-18     	; 0x9a8 <eeprom_read_blraw+0x8>
 9ba:	08 95       	ret

000009bc <eeprom_update_block>:
 9bc:	dc 01       	movw	r26, r24
 9be:	a4 0f       	add	r26, r20
 9c0:	b5 1f       	adc	r27, r21
 9c2:	41 50       	subi	r20, 0x01	; 1
 9c4:	50 40       	sbci	r21, 0x00	; 0
 9c6:	40 f0       	brcs	.+16     	; 0x9d8 <eeprom_update_block+0x1c>
 9c8:	cb 01       	movw	r24, r22
 9ca:	84 0f       	add	r24, r20
 9cc:	95 1f       	adc	r25, r21
 9ce:	2e 91       	ld	r18, -X
 9d0:	05 d0       	rcall	.+10     	; 0x9dc <eeprom_update_r18>
 9d2:	41 50       	subi	r20, 0x01	; 1
 9d4:	50 40       	sbci	r21, 0x00	; 0
 9d6:	d8 f7       	brcc	.-10     	; 0x9ce <eeprom_update_block+0x12>
 9d8:	08 95       	ret

000009da <eeprom_update_byte>:
 9da:	26 2f       	mov	r18, r22

000009dc <eeprom_update_r18>:
 9dc:	f9 99       	sbic	0x1f, 1	; 31
 9de:	fe cf       	rjmp	.-4      	; 0x9dc <eeprom_update_r18>
 9e0:	92 bd       	out	0x22, r25	; 34
 9e2:	81 bd       	out	0x21, r24	; 33
 9e4:	f8 9a       	sbi	0x1f, 0	; 31
 9e6:	01 97       	sbiw	r24, 0x01	; 1
 9e8:	00 b4       	in	r0, 0x20	; 32
 9ea:	02 16       	cp	r0, r18
 9ec:	39 f0       	breq	.+14     	; 0x9fc <eeprom_update_r18+0x20>
 9ee:	1f ba       	out	0x1f, r1	; 31
 9f0:	20 bd       	out	0x20, r18	; 32
 9f2:	0f b6       	in	r0, 0x3f	; 63
 9f4:	f8 94       	cli
 9f6:	fa 9a       	sbi	0x1f, 2	; 31
 9f8:	f9 9a       	sbi	0x1f, 1	; 31
 9fa:	0f be       	out	0x3f, r0	; 63
 9fc:	08 95       	ret

000009fe <_exit>:
 9fe:	f8 94       	cli

00000a00 <__stop_program>:
 a00:	ff cf       	rjmp	.-2      	; 0xa00 <__stop_program>
