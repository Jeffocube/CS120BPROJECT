
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000006a6  0000073a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007a  00800128  00800128  00000762  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000794  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ee0  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095c  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000794  00000000  00000000  000020a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000283c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005df  00000000  00000000  0000299c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043e  00000000  00000000  00002f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000033b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	4f c1       	rjmp	.+670    	; 0x2d4 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ea       	ldi	r30, 0xA6	; 166
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 32       	cpi	r26, 0x28	; 40
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e2       	ldi	r26, 0x28	; 40
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 3a       	cpi	r26, 0xA2	; 162
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3e d2       	rcall	.+1148   	; 0x540 <main>
  c4:	ee c2       	rjmp	.+1500   	; 0x6a2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <KeyBoardTick>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
  c8:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <t>
  cc:	20 31       	cpi	r18, 0x10	; 16
  ce:	08 f0       	brcs	.+2      	; 0xd2 <KeyBoardTick+0xa>
  d0:	60 c0       	rjmp	.+192    	; 0x192 <KeyBoardTick+0xca>
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	91 05       	cpc	r25, r1
  d6:	c9 f1       	breq	.+114    	; 0x14a <KeyBoardTick+0x82>
  d8:	1c f4       	brge	.+6      	; 0xe0 <KeyBoardTick+0x18>
  da:	00 97       	sbiw	r24, 0x00	; 0
  dc:	49 f0       	breq	.+18     	; 0xf0 <KeyBoardTick+0x28>
  de:	4f c0       	rjmp	.+158    	; 0x17e <KeyBoardTick+0xb6>
  e0:	82 30       	cpi	r24, 0x02	; 2
  e2:	91 05       	cpc	r25, r1
  e4:	e1 f1       	breq	.+120    	; 0x15e <KeyBoardTick+0x96>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	91 05       	cpc	r25, r1
  ea:	09 f4       	brne	.+2      	; 0xee <KeyBoardTick+0x26>
  ec:	3f c0       	rjmp	.+126    	; 0x16c <KeyBoardTick+0xa4>
  ee:	47 c0       	rjmp	.+142    	; 0x17e <KeyBoardTick+0xb6>
  f0:	30 b1       	in	r19, 0x00	; 0
  f2:	30 7f       	andi	r19, 0xF0	; 240
  f4:	30 37       	cpi	r19, 0x70	; 112
  f6:	49 f4       	brne	.+18     	; 0x10a <KeyBoardTick+0x42>
  f8:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <keyChar>
  fc:	88 0f       	add	r24, r24
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <keyChar>
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	3c c0       	rjmp	.+120    	; 0x182 <KeyBoardTick+0xba>
 10a:	30 b1       	in	r19, 0x00	; 0
 10c:	30 7f       	andi	r19, 0xF0	; 240
 10e:	30 3b       	cpi	r19, 0xB0	; 176
 110:	41 f4       	brne	.+16     	; 0x122 <KeyBoardTick+0x5a>
 112:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <keyChar>
 116:	88 0f       	add	r24, r24
 118:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <keyChar>
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	30 c0       	rjmp	.+96     	; 0x182 <KeyBoardTick+0xba>
 122:	30 b1       	in	r19, 0x00	; 0
 124:	30 7f       	andi	r19, 0xF0	; 240
 126:	30 3d       	cpi	r19, 0xD0	; 208
 128:	61 f5       	brne	.+88     	; 0x182 <KeyBoardTick+0xba>
 12a:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <keyChar>
 12e:	81 11       	cpse	r24, r1
 130:	06 c0       	rjmp	.+12     	; 0x13e <KeyBoardTick+0x76>
 132:	e2 2f       	mov	r30, r18
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	e4 5f       	subi	r30, 0xF4	; 244
 138:	fe 4f       	sbci	r31, 0xFE	; 254
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	80 83       	st	Z, r24
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	20 93 49 01 	sts	0x0149, r18	; 0x800149 <t>
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	1c c0       	rjmp	.+56     	; 0x182 <KeyBoardTick+0xba>
 14a:	80 b1       	in	r24, 0x00	; 0
 14c:	80 7f       	andi	r24, 0xF0	; 240
 14e:	31 e0       	ldi	r19, 0x01	; 1
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	80 37       	cpi	r24, 0x70	; 112
 154:	09 f0       	breq	.+2      	; 0x158 <KeyBoardTick+0x90>
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	83 2f       	mov	r24, r19
 15a:	92 2f       	mov	r25, r18
 15c:	12 c0       	rjmp	.+36     	; 0x182 <KeyBoardTick+0xba>
 15e:	20 b1       	in	r18, 0x00	; 0
 160:	20 7f       	andi	r18, 0xF0	; 240
 162:	20 3b       	cpi	r18, 0xB0	; 176
 164:	71 f0       	breq	.+28     	; 0x182 <KeyBoardTick+0xba>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0b c0       	rjmp	.+22     	; 0x182 <KeyBoardTick+0xba>
 16c:	20 b1       	in	r18, 0x00	; 0
 16e:	20 7f       	andi	r18, 0xF0	; 240
 170:	20 3d       	cpi	r18, 0xD0	; 208
 172:	39 f0       	breq	.+14     	; 0x182 <KeyBoardTick+0xba>
 174:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <keyChar>
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <KeyBoardTick+0xba>
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <t>
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	e4 5f       	subi	r30, 0xF4	; 244
 18a:	fe 4f       	sbci	r31, 0xFE	; 254
 18c:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <keyChar>
 190:	20 83       	st	Z, r18
 192:	08 95       	ret

00000194 <JoyStickTick>:
 194:	bc 01       	movw	r22, r24
 196:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 19a:	90 34       	cpi	r25, 0x40	; 64
 19c:	19 f0       	breq	.+6      	; 0x1a4 <JoyStickTick+0x10>
 19e:	91 34       	cpi	r25, 0x41	; 65
 1a0:	b9 f0       	breq	.+46     	; 0x1d0 <JoyStickTick+0x3c>
 1a2:	2b c0       	rjmp	.+86     	; 0x1fa <JoyStickTick+0x66>
 1a4:	ea e7       	ldi	r30, 0x7A	; 122
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	80 64       	ori	r24, 0x40	; 64
 1ac:	80 83       	st	Z, r24
 1ae:	90 81       	ld	r25, Z
 1b0:	94 ff       	sbrs	r25, 4
 1b2:	fd cf       	rjmp	.-6      	; 0x1ae <JoyStickTick+0x1a>
 1b4:	e8 e7       	ldi	r30, 0x78	; 120
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	91 81       	ldd	r25, Z+1	; 0x01
 1bc:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <horiz+0x1>
 1c0:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <horiz>
 1c4:	11 82       	std	Z+1, r1	; 0x01
 1c6:	10 82       	st	Z, r1
 1c8:	81 e4       	ldi	r24, 0x41	; 65
 1ca:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 1ce:	15 c0       	rjmp	.+42     	; 0x1fa <JoyStickTick+0x66>
 1d0:	ea e7       	ldi	r30, 0x7A	; 122
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	80 83       	st	Z, r24
 1da:	90 81       	ld	r25, Z
 1dc:	94 ff       	sbrs	r25, 4
 1de:	fd cf       	rjmp	.-6      	; 0x1da <JoyStickTick+0x46>
 1e0:	e8 e7       	ldi	r30, 0x78	; 120
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	91 81       	ldd	r25, Z+1	; 0x01
 1e8:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <vert+0x1>
 1ec:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <vert>
 1f0:	11 82       	std	Z+1, r1	; 0x01
 1f2:	10 82       	st	Z, r1
 1f4:	80 e4       	ldi	r24, 0x40	; 64
 1f6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 1fa:	20 91 99 01 	lds	r18, 0x0199	; 0x800199 <horiz>
 1fe:	30 91 9a 01 	lds	r19, 0x019A	; 0x80019a <horiz+0x1>
 202:	25 33       	cpi	r18, 0x35	; 53
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	38 07       	cpc	r19, r24
 208:	1c f0       	brlt	.+6      	; 0x210 <JoyStickTick+0x7c>
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <joyRight>
 210:	2c 32       	cpi	r18, 0x2C	; 44
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	38 07       	cpc	r19, r24
 216:	1c f4       	brge	.+6      	; 0x21e <JoyStickTick+0x8a>
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <joyLeft>
 21e:	40 91 70 01 	lds	r20, 0x0170	; 0x800170 <vert>
 222:	50 91 71 01 	lds	r21, 0x0171	; 0x800171 <vert+0x1>
 226:	45 33       	cpi	r20, 0x35	; 53
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	58 07       	cpc	r21, r24
 22c:	1c f0       	brlt	.+6      	; 0x234 <JoyStickTick+0xa0>
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <joyUp>
 234:	4c 32       	cpi	r20, 0x2C	; 44
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	58 07       	cpc	r21, r24
 23a:	1c f4       	brge	.+6      	; 0x242 <JoyStickTick+0xae>
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <joyDown>
 242:	44 5a       	subi	r20, 0xA4	; 164
 244:	51 40       	sbci	r21, 0x01	; 1
 246:	49 3c       	cpi	r20, 0xC9	; 201
 248:	51 05       	cpc	r21, r1
 24a:	20 f4       	brcc	.+8      	; 0x254 <JoyStickTick+0xc0>
 24c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <joyUp>
 250:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <joyDown>
 254:	24 5a       	subi	r18, 0xA4	; 164
 256:	31 40       	sbci	r19, 0x01	; 1
 258:	29 3c       	cpi	r18, 0xC9	; 201
 25a:	31 05       	cpc	r19, r1
 25c:	20 f4       	brcc	.+8      	; 0x266 <JoyStickTick+0xd2>
 25e:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <joyLeft>
 262:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <joyRight>
 266:	cb 01       	movw	r24, r22
 268:	08 95       	ret

0000026a <TimerSet>:
 26a:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <_avr_timer_M>
 26e:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <_avr_timer_M+0x1>
 272:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <_avr_timer_M+0x2>
 276:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <_avr_timer_M+0x3>
 27a:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <_avr_timer_cntcurr>
 27e:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <_avr_timer_cntcurr+0x1>
 282:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <_avr_timer_cntcurr+0x2>
 286:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <_avr_timer_cntcurr+0x3>
 28a:	08 95       	ret

0000028c <TimerOn>:
 28c:	8b e0       	ldi	r24, 0x0B	; 11
 28e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 292:	8d e7       	ldi	r24, 0x7D	; 125
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 29a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 2a4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2a8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2ac:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_avr_timer_M>
 2b0:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <_avr_timer_M+0x1>
 2b4:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <_avr_timer_M+0x2>
 2b8:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <_avr_timer_M+0x3>
 2bc:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <_avr_timer_cntcurr>
 2c0:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <_avr_timer_cntcurr+0x1>
 2c4:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <_avr_timer_cntcurr+0x2>
 2c8:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <_avr_timer_cntcurr+0x3>
 2cc:	8f b7       	in	r24, 0x3f	; 63
 2ce:	80 68       	ori	r24, 0x80	; 128
 2d0:	8f bf       	out	0x3f, r24	; 63
 2d2:	08 95       	ret

000002d4 <__vector_13>:
 2d4:	1f 92       	push	r1
 2d6:	0f 92       	push	r0
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	0f 92       	push	r0
 2dc:	11 24       	eor	r1, r1
 2de:	8f 93       	push	r24
 2e0:	9f 93       	push	r25
 2e2:	af 93       	push	r26
 2e4:	bf 93       	push	r27
 2e6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <_avr_timer_cntcurr>
 2ea:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <_avr_timer_cntcurr+0x1>
 2ee:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <_avr_timer_cntcurr+0x2>
 2f2:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <_avr_timer_cntcurr+0x3>
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	a1 09       	sbc	r26, r1
 2fa:	b1 09       	sbc	r27, r1
 2fc:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <_avr_timer_cntcurr>
 300:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <_avr_timer_cntcurr+0x1>
 304:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <_avr_timer_cntcurr+0x2>
 308:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <_avr_timer_cntcurr+0x3>
 30c:	89 2b       	or	r24, r25
 30e:	8a 2b       	or	r24, r26
 310:	8b 2b       	or	r24, r27
 312:	99 f4       	brne	.+38     	; 0x33a <__vector_13+0x66>
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <TimerFlag>
 31a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_avr_timer_M>
 31e:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <_avr_timer_M+0x1>
 322:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <_avr_timer_M+0x2>
 326:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <_avr_timer_M+0x3>
 32a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <_avr_timer_cntcurr>
 32e:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <_avr_timer_cntcurr+0x1>
 332:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <_avr_timer_cntcurr+0x2>
 336:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <_avr_timer_cntcurr+0x3>
 33a:	bf 91       	pop	r27
 33c:	af 91       	pop	r26
 33e:	9f 91       	pop	r25
 340:	8f 91       	pop	r24
 342:	0f 90       	pop	r0
 344:	0f be       	out	0x3f, r0	; 63
 346:	0f 90       	pop	r0
 348:	1f 90       	pop	r1
 34a:	18 95       	reti

0000034c <delay_ms>:
 34c:	18 16       	cp	r1, r24
 34e:	19 06       	cpc	r1, r25
 350:	5c f0       	brlt	.+22     	; 0x368 <delay_ms+0x1c>
 352:	08 95       	ret
 354:	00 00       	nop
 356:	21 50       	subi	r18, 0x01	; 1
 358:	31 09       	sbc	r19, r1
 35a:	e1 f7       	brne	.-8      	; 0x354 <delay_ms+0x8>
 35c:	4f 5f       	subi	r20, 0xFF	; 255
 35e:	5f 4f       	sbci	r21, 0xFF	; 255
 360:	84 17       	cp	r24, r20
 362:	95 07       	cpc	r25, r21
 364:	19 f4       	brne	.+6      	; 0x36c <delay_ms+0x20>
 366:	08 95       	ret
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	50 e0       	ldi	r21, 0x00	; 0
 36c:	27 e0       	ldi	r18, 0x07	; 7
 36e:	33 e0       	ldi	r19, 0x03	; 3
 370:	f1 cf       	rjmp	.-30     	; 0x354 <delay_ms+0x8>

00000372 <LCD_WriteCommand>:
 372:	2e 98       	cbi	0x05, 6	; 5
 374:	88 b9       	out	0x08, r24	; 8
 376:	2f 9a       	sbi	0x05, 7	; 5
 378:	00 00       	nop
 37a:	2f 98       	cbi	0x05, 7	; 5
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	e5 cf       	rjmp	.-54     	; 0x34c <delay_ms>
 382:	08 95       	ret

00000384 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 384:	81 31       	cpi	r24, 0x11	; 17
 386:	18 f4       	brcc	.+6      	; 0x38e <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 388:	81 58       	subi	r24, 0x81	; 129
 38a:	f3 cf       	rjmp	.-26     	; 0x372 <LCD_WriteCommand>
 38c:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 38e:	81 55       	subi	r24, 0x51	; 81
 390:	f0 cf       	rjmp	.-32     	; 0x372 <LCD_WriteCommand>
 392:	08 95       	ret

00000394 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 394:	84 e6       	ldi	r24, 0x64	; 100
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	d9 df       	rcall	.-78     	; 0x34c <delay_ms>
	LCD_WriteCommand(0x38);
 39a:	88 e3       	ldi	r24, 0x38	; 56
 39c:	ea df       	rcall	.-44     	; 0x372 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 39e:	86 e0       	ldi	r24, 0x06	; 6
 3a0:	e8 df       	rcall	.-48     	; 0x372 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 3a2:	8f e0       	ldi	r24, 0x0F	; 15
 3a4:	e6 df       	rcall	.-52     	; 0x372 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	e4 df       	rcall	.-56     	; 0x372 <LCD_WriteCommand>
	delay_ms(10);						 
 3aa:	8a e0       	ldi	r24, 0x0A	; 10
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	ce cf       	rjmp	.-100    	; 0x34c <delay_ms>
 3b0:	08 95       	ret

000003b2 <LCD_WriteData>:
 3b2:	2e 9a       	sbi	0x05, 6	; 5
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 3b4:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 3b6:	2f 9a       	sbi	0x05, 7	; 5
   asm("nop");
 3b8:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 3ba:	2f 98       	cbi	0x05, 7	; 5
   delay_ms(1);
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	c5 cf       	rjmp	.-118    	; 0x34c <delay_ms>
 3c2:	08 95       	ret

000003c4 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, char* string) {
 3c4:	1f 93       	push	r17
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
   //LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 3ca:	fb 01       	movw	r30, r22
 3cc:	90 81       	ld	r25, Z
 3ce:	99 23       	and	r25, r25
 3d0:	51 f0       	breq	.+20     	; 0x3e6 <LCD_DisplayString+0x22>
 3d2:	eb 01       	movw	r28, r22
      LCD_Cursor(c++);
 3d4:	11 e0       	ldi	r17, 0x01	; 1
 3d6:	18 0f       	add	r17, r24
 3d8:	d5 df       	rcall	.-86     	; 0x384 <LCD_Cursor>
      LCD_WriteData(*string++);
 3da:	89 91       	ld	r24, Y+
 3dc:	ea df       	rcall	.-44     	; 0x3b2 <LCD_WriteData>

void LCD_DisplayString( unsigned char column, char* string) {
   //LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 3de:	81 2f       	mov	r24, r17
}

void LCD_DisplayString( unsigned char column, char* string) {
   //LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 3e0:	98 81       	ld	r25, Y
 3e2:	91 11       	cpse	r25, r1
 3e4:	f7 cf       	rjmp	.-18     	; 0x3d4 <LCD_DisplayString+0x10>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	1f 91       	pop	r17
 3ec:	08 95       	ret

000003ee <LCDTICK>:
	unsigned long int elapsedTime; //Time elapsed since last task tick
	int (*TickFct)(int); //Task tick function
} task;

enum LCDSTATE{DISPLAY};
int LCDTICK(int LCDSTATE){
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	ec 01       	movw	r28, r24
	LCD_DisplayString(1, MSG);
 3f4:	6c e0       	ldi	r22, 0x0C	; 12
 3f6:	71 e0       	ldi	r23, 0x01	; 1
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	e4 df       	rcall	.-56     	; 0x3c4 <LCD_DisplayString>
	LCD_DisplayString(17, MSG2);
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	71 e0       	ldi	r23, 0x01	; 1
 400:	81 e1       	ldi	r24, 0x11	; 17
 402:	e0 df       	rcall	.-64     	; 0x3c4 <LCD_DisplayString>
	
	if(joyUp == 0x01 && up == 0){
 404:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <joyUp>
 408:	81 30       	cpi	r24, 0x01	; 1
 40a:	79 f4       	brne	.+30     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 40c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <up>
 410:	81 11       	cpse	r24, r1
 412:	0b c0       	rjmp	.+22     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		t = 0;
 414:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <t>
		up = 1;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <up>
	}
	if(joyDown == 0x01 && up == 1){
 41e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <joyDown>
 422:	81 30       	cpi	r24, 0x01	; 1
 424:	09 f0       	breq	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 426:	6b c0       	rjmp	.+214    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 428:	08 c0       	rjmp	.+16     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 42a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <joyDown>
 42e:	81 30       	cpi	r24, 0x01	; 1
 430:	49 f4       	brne	.+18     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 432:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <up>
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	29 f4       	brne	.+10     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
		t = 16;
 43a:	80 e1       	ldi	r24, 0x10	; 16
 43c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <t>
		up = 0;
 440:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <up>
	}
	
	if(joyRight == 0x01 && t < 15 && up == 1){
 444:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <joyRight>
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	09 f0       	breq	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44c:	5e c0       	rjmp	.+188    	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 44e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <t>
 452:	8f 30       	cpi	r24, 0x0F	; 15
 454:	08 f0       	brcs	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 456:	5e c0       	rjmp	.+188    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 458:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <up>
 45c:	91 30       	cpi	r25, 0x01	; 1
 45e:	09 f0       	breq	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 460:	59 c0       	rjmp	.+178    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
		t++;
 462:	8f 5f       	subi	r24, 0xFF	; 255
 464:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <t>
		joyRight = 0;
 468:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <joyRight>
 46c:	4e c0       	rjmp	.+156    	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
	}
	if(joyLeft == 0x01 && t > 0 && up == 1){
 46e:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <joyLeft>
 472:	81 30       	cpi	r24, 0x01	; 1
 474:	91 f5       	brne	.+100    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 476:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <t>
 47a:	88 23       	and	r24, r24
 47c:	c1 f1       	breq	.+112    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 47e:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <up>
 482:	91 30       	cpi	r25, 0x01	; 1
 484:	29 f5       	brne	.+74     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
		t--;
 486:	81 50       	subi	r24, 0x01	; 1
 488:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <t>
		joyLeft = 0;
 48c:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <joyLeft>
 490:	24 c0       	rjmp	.+72     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
	}
	if(joyRight == 0x01 && t < 32 && up == 0){
 492:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <t>
 496:	80 32       	cpi	r24, 0x20	; 32
 498:	48 f4       	brcc	.+18     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 49a:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <up>
 49e:	91 11       	cpse	r25, r1
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
		t++;
 4a2:	8f 5f       	subi	r24, 0xFF	; 255
 4a4:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <t>
		joyRight = 0;
 4a8:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <joyRight>
	}
	if(joyLeft == 0x01 && t > 16 && up == 0){
 4ac:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <joyLeft>
 4b0:	81 30       	cpi	r24, 0x01	; 1
 4b2:	d9 f5       	brne	.+118    	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 4b4:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <t>
 4b8:	81 31       	cpi	r24, 0x11	; 17
 4ba:	b8 f1       	brcs	.+110    	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 4bc:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <up>
 4c0:	91 11       	cpse	r25, r1
 4c2:	33 c0       	rjmp	.+102    	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
		t--;
 4c4:	81 50       	subi	r24, 0x01	; 1
 4c6:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <t>
		joyLeft = 0;
 4ca:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <joyLeft>
 4ce:	2d c0       	rjmp	.+90     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
	}
	if(joyLeft == 0x01 && t > 0 && up == 1){
		t--;
		joyLeft = 0;
	}
	if(joyRight == 0x01 && t < 32 && up == 0){
 4d0:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <joyRight>
 4d4:	81 30       	cpi	r24, 0x01	; 1
 4d6:	71 f7       	brne	.-36     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4d8:	23 c0       	rjmp	.+70     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 4da:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <joyRight>
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	21 f5       	brne	.+72     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 4e2:	d7 cf       	rjmp	.-82     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 4e4:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <up>
 4e8:	88 23       	and	r24, r24
 4ea:	d9 f2       	breq	.-74     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4ec:	e3 cf       	rjmp	.-58     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4ee:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <joyRight>
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	b9 f3       	breq	.-18     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4f6:	de cf       	rjmp	.-68     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
	if(joyDown == 0x01 && up == 1){
		t = 16;
		up = 0;
	}
	
	if(joyRight == 0x01 && t < 15 && up == 1){
 4f8:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <t>
 4fc:	ad cf       	rjmp	.-166    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 4fe:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <joyRight>
 502:	81 30       	cpi	r24, 0x01	; 1
 504:	09 f0       	breq	.+2      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 506:	b3 cf       	rjmp	.-154    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 508:	f7 cf       	rjmp	.-18     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
		t++;
		joyRight = 0;
	}
	if(joyLeft == 0x01 && t > 0 && up == 1){
 50a:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <joyLeft>
 50e:	81 30       	cpi	r24, 0x01	; 1
 510:	61 f4       	brne	.+24     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 512:	b1 cf       	rjmp	.-158    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 514:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <joyLeft>
 518:	81 30       	cpi	r24, 0x01	; 1
 51a:	09 f0       	breq	.+2      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 51c:	ba cf       	rjmp	.-140    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 51e:	ab cf       	rjmp	.-170    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
		t--;
		joyLeft = 0;
	}
	if(joyRight == 0x01 && t < 32 && up == 0){
 520:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <t>
 524:	80 32       	cpi	r24, 0x20	; 32
 526:	30 f6       	brcc	.-116    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 528:	b8 cf       	rjmp	.-144    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
	}
	if(joyLeft == 0x01 && t > 16 && up == 0){
		t--;
		joyLeft = 0;
	}
	LCD_Cursor(MSGSIZE + t + 1);
 52a:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <MSGSIZE>
 52e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <t>
 532:	89 0f       	add	r24, r25
 534:	8f 5f       	subi	r24, 0xFF	; 255
 536:	26 df       	rcall	.-436    	; 0x384 <LCD_Cursor>
	return LCDSTATE;
}
 538:	ce 01       	movw	r24, r28
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <main>:




int main(void)
{
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	00 d0       	rcall	.+0      	; 0x546 <main+0x6>
 546:	00 d0       	rcall	.+0      	; 0x548 <main+0x8>
 548:	00 d0       	rcall	.+0      	; 0x54a <main+0xa>
 54a:	cd b7       	in	r28, 0x3d	; 61
 54c:	de b7       	in	r29, 0x3e	; 62
	up = 1;
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <up>
	t = 0;
 554:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <t>
	keyChar = 0x00;
 558:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <keyChar>
	MSGSPOT = 0;
 55c:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <MSGSPOT+0x1>
 560:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <MSGSPOT>
	MSGSIZE = 0;
 564:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <MSGSIZE>
	DDRD = 0xFF; PORTD = 0x00;
 568:	8f ef       	ldi	r24, 0xFF	; 255
 56a:	8a b9       	out	0x0a, r24	; 10
 56c:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xFF; PORTC = 0x00;
 56e:	87 b9       	out	0x07, r24	; 7
 570:	18 b8       	out	0x08, r1	; 8
	DDRB = 0xFF; PORTB = 0x00;
 572:	84 b9       	out	0x04, r24	; 4
 574:	15 b8       	out	0x05, r1	; 5
	DDRA = 0x00; PORTA = 0xFF;//Joystick input.
 576:	11 b8       	out	0x01, r1	; 1
 578:	82 b9       	out	0x02, r24	; 2
	ADMUX |= (1 << REFS0);//setting the reference of ADC
 57a:	ec e7       	ldi	r30, 0x7C	; 124
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	90 81       	ld	r25, Z
 580:	90 64       	ori	r25, 0x40	; 64
 582:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADPS0) | (1<ADPS1)| (1<ADPS2) | (1<<ADEN) ;
 584:	ea e7       	ldi	r30, 0x7A	; 122
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	90 81       	ld	r25, Z
 58a:	91 68       	ori	r25, 0x81	; 129
 58c:	90 83       	st	Z, r25
	static task task1, task2, task3;
	task *tasks[] = { &task1, &task2, &task3};
 58e:	96 e0       	ldi	r25, 0x06	; 6
 590:	e1 e2       	ldi	r30, 0x21	; 33
 592:	f1 e0       	ldi	r31, 0x01	; 1
 594:	de 01       	movw	r26, r28
 596:	11 96       	adiw	r26, 0x01	; 1
 598:	01 90       	ld	r0, Z+
 59a:	0d 92       	st	X+, r0
 59c:	9a 95       	dec	r25
 59e:	e1 f7       	brne	.-8      	; 0x598 <main+0x58>
	//task1 init
	task1.state = -1;
 5a0:	ee e3       	ldi	r30, 0x3E	; 62
 5a2:	f1 e0       	ldi	r31, 0x01	; 1
 5a4:	80 83       	st	Z, r24
	task1.period = 20;
 5a6:	44 e1       	ldi	r20, 0x14	; 20
 5a8:	50 e0       	ldi	r21, 0x00	; 0
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	41 83       	std	Z+1, r20	; 0x01
 5b0:	52 83       	std	Z+2, r21	; 0x02
 5b2:	63 83       	std	Z+3, r22	; 0x03
 5b4:	74 83       	std	Z+4, r23	; 0x04
	task1.elapsedTime = 20;
 5b6:	45 83       	std	Z+5, r20	; 0x05
 5b8:	56 83       	std	Z+6, r21	; 0x06
 5ba:	67 83       	std	Z+7, r22	; 0x07
 5bc:	70 87       	std	Z+8, r23	; 0x08
	task1.TickFct = &JoyStickTick;
 5be:	2a ec       	ldi	r18, 0xCA	; 202
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	32 87       	std	Z+10, r19	; 0x0a
 5c4:	21 87       	std	Z+9, r18	; 0x09
	task2.state = -1;
 5c6:	e3 e3       	ldi	r30, 0x33	; 51
 5c8:	f1 e0       	ldi	r31, 0x01	; 1
 5ca:	80 83       	st	Z, r24
	task2.period = 20;
 5cc:	41 83       	std	Z+1, r20	; 0x01
 5ce:	52 83       	std	Z+2, r21	; 0x02
 5d0:	63 83       	std	Z+3, r22	; 0x03
 5d2:	74 83       	std	Z+4, r23	; 0x04
	task2.elapsedTime = 20;
 5d4:	45 83       	std	Z+5, r20	; 0x05
 5d6:	56 83       	std	Z+6, r21	; 0x06
 5d8:	67 83       	std	Z+7, r22	; 0x07
 5da:	70 87       	std	Z+8, r23	; 0x08
	task2.TickFct = &KeyBoardTick;
 5dc:	24 e6       	ldi	r18, 0x64	; 100
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	32 87       	std	Z+10, r19	; 0x0a
 5e2:	21 87       	std	Z+9, r18	; 0x09
	task3.state = -1;
 5e4:	e8 e2       	ldi	r30, 0x28	; 40
 5e6:	f1 e0       	ldi	r31, 0x01	; 1
 5e8:	80 83       	st	Z, r24
	task3.period = 100;
 5ea:	84 e6       	ldi	r24, 0x64	; 100
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	a0 e0       	ldi	r26, 0x00	; 0
 5f0:	b0 e0       	ldi	r27, 0x00	; 0
 5f2:	81 83       	std	Z+1, r24	; 0x01
 5f4:	92 83       	std	Z+2, r25	; 0x02
 5f6:	a3 83       	std	Z+3, r26	; 0x03
 5f8:	b4 83       	std	Z+4, r27	; 0x04
	task3.elapsedTime = 100;
 5fa:	85 83       	std	Z+5, r24	; 0x05
 5fc:	96 83       	std	Z+6, r25	; 0x06
 5fe:	a7 83       	std	Z+7, r26	; 0x07
 600:	b0 87       	std	Z+8, r27	; 0x08
	task3.TickFct = &LCDTICK;
 602:	87 ef       	ldi	r24, 0xF7	; 247
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	92 87       	std	Z+10, r25	; 0x0a
 608:	81 87       	std	Z+9, r24	; 0x09
	TimerSet(20);
 60a:	64 e1       	ldi	r22, 0x14	; 20
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	2b de       	rcall	.-938    	; 0x26a <TimerSet>
	TimerOn();
 614:	3b de       	rcall	.-906    	; 0x28c <TimerOn>
	LCD_init();
 616:	be de       	rcall	.-644    	; 0x394 <LCD_init>
	LCD_Cursor(0);
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	b4 de       	rcall	.-664    	; 0x384 <LCD_Cursor>
 61c:	7e 01       	movw	r14, r28
 61e:	87 e0       	ldi	r24, 0x07	; 7
 620:	e8 0e       	add	r14, r24
 622:	f1 1c       	adc	r15, r1
 624:	de 01       	movw	r26, r28
 626:	11 96       	adiw	r26, 0x01	; 1
 628:	6d 01       	movw	r12, r26
 62a:	f6 01       	movw	r30, r12
	while(1)
	{
		for ( unsigned i = 0; i < 3; i++ ) {
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 62c:	01 91       	ld	r16, Z+
 62e:	11 91       	ld	r17, Z+
 630:	6f 01       	movw	r12, r30
 632:	d8 01       	movw	r26, r16
 634:	15 96       	adiw	r26, 0x05	; 5
 636:	4d 91       	ld	r20, X+
 638:	5d 91       	ld	r21, X+
 63a:	6d 91       	ld	r22, X+
 63c:	7c 91       	ld	r23, X
 63e:	18 97       	sbiw	r26, 0x08	; 8
 640:	11 96       	adiw	r26, 0x01	; 1
 642:	8d 91       	ld	r24, X+
 644:	9d 91       	ld	r25, X+
 646:	0d 90       	ld	r0, X+
 648:	bc 91       	ld	r27, X
 64a:	a0 2d       	mov	r26, r0
 64c:	48 17       	cp	r20, r24
 64e:	59 07       	cpc	r21, r25
 650:	6a 07       	cpc	r22, r26
 652:	7b 07       	cpc	r23, r27
 654:	81 f4       	brne	.+32     	; 0x676 <main+0x136>
 656:	f8 01       	movw	r30, r16
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 658:	80 81       	ld	r24, Z
 65a:	01 84       	ldd	r0, Z+9	; 0x09
 65c:	f2 85       	ldd	r31, Z+10	; 0x0a
 65e:	e0 2d       	mov	r30, r0
 660:	08 2e       	mov	r0, r24
 662:	00 0c       	add	r0, r0
 664:	99 0b       	sbc	r25, r25
 666:	09 95       	icall
 668:	d8 01       	movw	r26, r16
 66a:	8c 93       	st	X, r24
 66c:	f8 01       	movw	r30, r16
				tasks[i]->elapsedTime = 0;
 66e:	15 82       	std	Z+5, r1	; 0x05
 670:	16 82       	std	Z+6, r1	; 0x06
 672:	17 82       	std	Z+7, r1	; 0x07
 674:	10 86       	std	Z+8, r1	; 0x08
 676:	f8 01       	movw	r30, r16
			}
			tasks[i]->elapsedTime += 20;
 678:	85 81       	ldd	r24, Z+5	; 0x05
 67a:	96 81       	ldd	r25, Z+6	; 0x06
 67c:	a7 81       	ldd	r26, Z+7	; 0x07
 67e:	b0 85       	ldd	r27, Z+8	; 0x08
 680:	44 96       	adiw	r24, 0x14	; 20
 682:	a1 1d       	adc	r26, r1
 684:	b1 1d       	adc	r27, r1
 686:	85 83       	std	Z+5, r24	; 0x05
 688:	96 83       	std	Z+6, r25	; 0x06
 68a:	a7 83       	std	Z+7, r26	; 0x07
 68c:	b0 87       	std	Z+8, r27	; 0x08
 68e:	ce 14       	cp	r12, r14
	TimerOn();
	LCD_init();
	LCD_Cursor(0);
	while(1)
	{
		for ( unsigned i = 0; i < 3; i++ ) {
 690:	df 04       	cpc	r13, r15
 692:	59 f6       	brne	.-106    	; 0x62a <main+0xea>
 694:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <TimerFlag>
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 20;
		}
		//Remember to add timer to code
		while(!TimerFlag);
 698:	88 23       	and	r24, r24
 69a:	e1 f3       	breq	.-8      	; 0x694 <main+0x154>
 69c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <TimerFlag>
		TimerFlag = 0;
 6a0:	c1 cf       	rjmp	.-126    	; 0x624 <main+0xe4>

000006a2 <_exit>:
		//LCD_ClearScreen();
	}
 6a2:	f8 94       	cli

000006a4 <__stop_program>:
 6a4:	ff cf       	rjmp	.-2      	; 0x6a4 <__stop_program>
