
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000005b0  00000644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000057  00800128  00800128  0000066c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e80  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095c  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006cf  00000000  00000000  00001f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00002620  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b7  00000000  00000000  00002780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043e  00000000  00000000  00002d37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003175  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	50 c1       	rjmp	.+672    	; 0x2d6 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 eb       	ldi	r30, 0xB0	; 176
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 32       	cpi	r26, 0x28	; 40
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e2       	ldi	r26, 0x28	; 40
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 37       	cpi	r26, 0x7F	; 127
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c6 d1       	rcall	.+908    	; 0x450 <main>
  c4:	73 c2       	rjmp	.+1254   	; 0x5ac <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <KeyBoardTick>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	91 05       	cpc	r25, r1
  cc:	e9 f1       	breq	.+122    	; 0x148 <KeyBoardTick+0x80>
  ce:	1c f4       	brge	.+6      	; 0xd6 <KeyBoardTick+0xe>
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	51 f0       	breq	.+20     	; 0xe8 <KeyBoardTick+0x20>
  d4:	53 c0       	rjmp	.+166    	; 0x17c <KeyBoardTick+0xb4>
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	91 05       	cpc	r25, r1
  da:	09 f4       	brne	.+2      	; 0xde <KeyBoardTick+0x16>
  dc:	3f c0       	rjmp	.+126    	; 0x15c <KeyBoardTick+0x94>
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	91 05       	cpc	r25, r1
  e2:	09 f4       	brne	.+2      	; 0xe6 <KeyBoardTick+0x1e>
  e4:	42 c0       	rjmp	.+132    	; 0x16a <KeyBoardTick+0xa2>
  e6:	4a c0       	rjmp	.+148    	; 0x17c <KeyBoardTick+0xb4>
  e8:	20 b1       	in	r18, 0x00	; 0
  ea:	20 7f       	andi	r18, 0xF0	; 240
  ec:	20 37       	cpi	r18, 0x70	; 112
  ee:	49 f4       	brne	.+18     	; 0x102 <KeyBoardTick+0x3a>
  f0:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <keyChar>
  f4:	88 0f       	add	r24, r24
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <keyChar>
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	3f c0       	rjmp	.+126    	; 0x180 <KeyBoardTick+0xb8>
 102:	20 b1       	in	r18, 0x00	; 0
 104:	20 7f       	andi	r18, 0xF0	; 240
 106:	20 3b       	cpi	r18, 0xB0	; 176
 108:	41 f4       	brne	.+16     	; 0x11a <KeyBoardTick+0x52>
 10a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <keyChar>
 10e:	88 0f       	add	r24, r24
 110:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <keyChar>
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	33 c0       	rjmp	.+102    	; 0x180 <KeyBoardTick+0xb8>
 11a:	20 b1       	in	r18, 0x00	; 0
 11c:	20 7f       	andi	r18, 0xF0	; 240
 11e:	20 3d       	cpi	r18, 0xD0	; 208
 120:	79 f5       	brne	.+94     	; 0x180 <KeyBoardTick+0xb8>
 122:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <keyChar>
 126:	81 11       	cpse	r24, r1
 128:	07 c0       	rjmp	.+14     	; 0x138 <KeyBoardTick+0x70>
 12a:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <MSGSIZE>
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	e4 5f       	subi	r30, 0xF4	; 244
 132:	fe 4f       	sbci	r31, 0xFE	; 254
 134:	80 e2       	ldi	r24, 0x20	; 32
 136:	80 83       	st	Z, r24
 138:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <MSGSIZE>
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <MSGSIZE>
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	1c c0       	rjmp	.+56     	; 0x180 <KeyBoardTick+0xb8>
 148:	80 b1       	in	r24, 0x00	; 0
 14a:	80 7f       	andi	r24, 0xF0	; 240
 14c:	31 e0       	ldi	r19, 0x01	; 1
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	80 37       	cpi	r24, 0x70	; 112
 152:	09 f0       	breq	.+2      	; 0x156 <KeyBoardTick+0x8e>
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	83 2f       	mov	r24, r19
 158:	92 2f       	mov	r25, r18
 15a:	12 c0       	rjmp	.+36     	; 0x180 <KeyBoardTick+0xb8>
 15c:	20 b1       	in	r18, 0x00	; 0
 15e:	20 7f       	andi	r18, 0xF0	; 240
 160:	20 3b       	cpi	r18, 0xB0	; 176
 162:	71 f0       	breq	.+28     	; 0x180 <KeyBoardTick+0xb8>
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0b c0       	rjmp	.+22     	; 0x180 <KeyBoardTick+0xb8>
 16a:	20 b1       	in	r18, 0x00	; 0
 16c:	20 7f       	andi	r18, 0xF0	; 240
 16e:	20 3d       	cpi	r18, 0xD0	; 208
 170:	39 f0       	breq	.+14     	; 0x180 <KeyBoardTick+0xb8>
 172:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <keyChar>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <KeyBoardTick+0xb8>
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <MSGSIZE>
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	e4 5f       	subi	r30, 0xF4	; 244
 188:	fe 4f       	sbci	r31, 0xFE	; 254
 18a:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <keyChar>
 18e:	20 83       	st	Z, r18
 190:	08 95       	ret

00000192 <JoyStickTick>:
 192:	bc 01       	movw	r22, r24
 194:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 198:	90 34       	cpi	r25, 0x40	; 64
 19a:	19 f0       	breq	.+6      	; 0x1a2 <JoyStickTick+0x10>
 19c:	91 34       	cpi	r25, 0x41	; 65
 19e:	b9 f0       	breq	.+46     	; 0x1ce <JoyStickTick+0x3c>
 1a0:	2b c0       	rjmp	.+86     	; 0x1f8 <JoyStickTick+0x66>
 1a2:	ea e7       	ldi	r30, 0x7A	; 122
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	80 83       	st	Z, r24
 1ac:	90 81       	ld	r25, Z
 1ae:	94 ff       	sbrs	r25, 4
 1b0:	fd cf       	rjmp	.-6      	; 0x1ac <JoyStickTick+0x1a>
 1b2:	e8 e7       	ldi	r30, 0x78	; 120
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	91 81       	ldd	r25, Z+1	; 0x01
 1ba:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <horiz+0x1>
 1be:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <horiz>
 1c2:	11 82       	std	Z+1, r1	; 0x01
 1c4:	10 82       	st	Z, r1
 1c6:	81 e4       	ldi	r24, 0x41	; 65
 1c8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 1cc:	15 c0       	rjmp	.+42     	; 0x1f8 <JoyStickTick+0x66>
 1ce:	ea e7       	ldi	r30, 0x7A	; 122
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	80 64       	ori	r24, 0x40	; 64
 1d6:	80 83       	st	Z, r24
 1d8:	90 81       	ld	r25, Z
 1da:	94 ff       	sbrs	r25, 4
 1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <JoyStickTick+0x46>
 1de:	e8 e7       	ldi	r30, 0x78	; 120
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	91 81       	ldd	r25, Z+1	; 0x01
 1e6:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <vert+0x1>
 1ea:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <vert>
 1ee:	11 82       	std	Z+1, r1	; 0x01
 1f0:	10 82       	st	Z, r1
 1f2:	80 e4       	ldi	r24, 0x40	; 64
 1f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 1f8:	40 91 77 01 	lds	r20, 0x0177	; 0x800177 <horiz>
 1fc:	50 91 78 01 	lds	r21, 0x0178	; 0x800178 <horiz+0x1>
 200:	45 33       	cpi	r20, 0x35	; 53
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	58 07       	cpc	r21, r24
 206:	1c f0       	brlt	.+6      	; 0x20e <JoyStickTick+0x7c>
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <joyRight>
 20e:	4c 32       	cpi	r20, 0x2C	; 44
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	58 07       	cpc	r21, r24
 214:	1c f4       	brge	.+6      	; 0x21c <JoyStickTick+0x8a>
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <joyLeft>
 21c:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <vert>
 220:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <vert+0x1>
 224:	2d 3f       	cpi	r18, 0xFD	; 253
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	38 07       	cpc	r19, r24
 22a:	1c f0       	brlt	.+6      	; 0x232 <JoyStickTick+0xa0>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <joyUp>
 232:	2c 32       	cpi	r18, 0x2C	; 44
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	38 07       	cpc	r19, r24
 238:	1c f4       	brge	.+6      	; 0x240 <JoyStickTick+0xae>
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <joyDown>
 240:	24 5a       	subi	r18, 0xA4	; 164
 242:	31 40       	sbci	r19, 0x01	; 1
 244:	29 3c       	cpi	r18, 0xC9	; 201
 246:	31 05       	cpc	r19, r1
 248:	20 f4       	brcc	.+8      	; 0x252 <JoyStickTick+0xc0>
 24a:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <joyUp>
 24e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <joyDown>
 252:	ca 01       	movw	r24, r20
 254:	84 5a       	subi	r24, 0xA4	; 164
 256:	91 40       	sbci	r25, 0x01	; 1
 258:	89 3c       	cpi	r24, 0xC9	; 201
 25a:	91 05       	cpc	r25, r1
 25c:	20 f4       	brcc	.+8      	; 0x266 <JoyStickTick+0xd4>
 25e:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <joyLeft>
 262:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <joyRight>
 266:	4b b9       	out	0x0b, r20	; 11
 268:	cb 01       	movw	r24, r22
 26a:	08 95       	ret

0000026c <TimerSet>:
 26c:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <_avr_timer_M>
 270:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <_avr_timer_M+0x1>
 274:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <_avr_timer_M+0x2>
 278:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <_avr_timer_M+0x3>
 27c:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <_avr_timer_cntcurr>
 280:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <_avr_timer_cntcurr+0x1>
 284:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <_avr_timer_cntcurr+0x2>
 288:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <_avr_timer_cntcurr+0x3>
 28c:	08 95       	ret

0000028e <TimerOn>:
 28e:	8b e0       	ldi	r24, 0x0B	; 11
 290:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 294:	8d e7       	ldi	r24, 0x7D	; 125
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 29c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 2a6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2aa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 2ae:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_avr_timer_M>
 2b2:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <_avr_timer_M+0x1>
 2b6:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <_avr_timer_M+0x2>
 2ba:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <_avr_timer_M+0x3>
 2be:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <_avr_timer_cntcurr>
 2c2:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <_avr_timer_cntcurr+0x1>
 2c6:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <_avr_timer_cntcurr+0x2>
 2ca:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <_avr_timer_cntcurr+0x3>
 2ce:	8f b7       	in	r24, 0x3f	; 63
 2d0:	80 68       	ori	r24, 0x80	; 128
 2d2:	8f bf       	out	0x3f, r24	; 63
 2d4:	08 95       	ret

000002d6 <__vector_13>:
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	8f 93       	push	r24
 2e2:	9f 93       	push	r25
 2e4:	af 93       	push	r26
 2e6:	bf 93       	push	r27
 2e8:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <_avr_timer_cntcurr>
 2ec:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <_avr_timer_cntcurr+0x1>
 2f0:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <_avr_timer_cntcurr+0x2>
 2f4:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <_avr_timer_cntcurr+0x3>
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	a1 09       	sbc	r26, r1
 2fc:	b1 09       	sbc	r27, r1
 2fe:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <_avr_timer_cntcurr>
 302:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <_avr_timer_cntcurr+0x1>
 306:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <_avr_timer_cntcurr+0x2>
 30a:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <_avr_timer_cntcurr+0x3>
 30e:	89 2b       	or	r24, r25
 310:	8a 2b       	or	r24, r26
 312:	8b 2b       	or	r24, r27
 314:	99 f4       	brne	.+38     	; 0x33c <__vector_13+0x66>
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <TimerFlag>
 31c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_avr_timer_M>
 320:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <_avr_timer_M+0x1>
 324:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <_avr_timer_M+0x2>
 328:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <_avr_timer_M+0x3>
 32c:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <_avr_timer_cntcurr>
 330:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <_avr_timer_cntcurr+0x1>
 334:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <_avr_timer_cntcurr+0x2>
 338:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <_avr_timer_cntcurr+0x3>
 33c:	bf 91       	pop	r27
 33e:	af 91       	pop	r26
 340:	9f 91       	pop	r25
 342:	8f 91       	pop	r24
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <delay_ms>:
 34e:	18 16       	cp	r1, r24
 350:	19 06       	cpc	r1, r25
 352:	5c f0       	brlt	.+22     	; 0x36a <delay_ms+0x1c>
 354:	08 95       	ret
 356:	00 00       	nop
 358:	21 50       	subi	r18, 0x01	; 1
 35a:	31 09       	sbc	r19, r1
 35c:	e1 f7       	brne	.-8      	; 0x356 <delay_ms+0x8>
 35e:	4f 5f       	subi	r20, 0xFF	; 255
 360:	5f 4f       	sbci	r21, 0xFF	; 255
 362:	84 17       	cp	r24, r20
 364:	95 07       	cpc	r25, r21
 366:	19 f4       	brne	.+6      	; 0x36e <delay_ms+0x20>
 368:	08 95       	ret
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	27 e0       	ldi	r18, 0x07	; 7
 370:	33 e0       	ldi	r19, 0x03	; 3
 372:	f1 cf       	rjmp	.-30     	; 0x356 <delay_ms+0x8>

00000374 <LCD_WriteCommand>:
 374:	2e 98       	cbi	0x05, 6	; 5
 376:	88 b9       	out	0x08, r24	; 8
 378:	2f 9a       	sbi	0x05, 7	; 5
 37a:	00 00       	nop
 37c:	2f 98       	cbi	0x05, 7	; 5
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	e5 cf       	rjmp	.-54     	; 0x34e <delay_ms>
 384:	08 95       	ret

00000386 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 386:	81 31       	cpi	r24, 0x11	; 17
 388:	18 f4       	brcc	.+6      	; 0x390 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 38a:	81 58       	subi	r24, 0x81	; 129
 38c:	f3 cf       	rjmp	.-26     	; 0x374 <LCD_WriteCommand>
 38e:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 390:	81 55       	subi	r24, 0x51	; 81
 392:	f0 cf       	rjmp	.-32     	; 0x374 <LCD_WriteCommand>
 394:	08 95       	ret

00000396 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 396:	84 e6       	ldi	r24, 0x64	; 100
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	d9 df       	rcall	.-78     	; 0x34e <delay_ms>
	LCD_WriteCommand(0x38);
 39c:	88 e3       	ldi	r24, 0x38	; 56
 39e:	ea df       	rcall	.-44     	; 0x374 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 3a0:	86 e0       	ldi	r24, 0x06	; 6
 3a2:	e8 df       	rcall	.-48     	; 0x374 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 3a4:	8f e0       	ldi	r24, 0x0F	; 15
 3a6:	e6 df       	rcall	.-52     	; 0x374 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	e4 df       	rcall	.-56     	; 0x374 <LCD_WriteCommand>
	delay_ms(10);						 
 3ac:	8a e0       	ldi	r24, 0x0A	; 10
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	ce cf       	rjmp	.-100    	; 0x34e <delay_ms>
 3b2:	08 95       	ret

000003b4 <LCD_WriteData>:
 3b4:	2e 9a       	sbi	0x05, 6	; 5
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 3b6:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 3b8:	2f 9a       	sbi	0x05, 7	; 5
   asm("nop");
 3ba:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 3bc:	2f 98       	cbi	0x05, 7	; 5
   delay_ms(1);
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	c5 cf       	rjmp	.-118    	; 0x34e <delay_ms>
 3c4:	08 95       	ret

000003c6 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, char* string) {
 3c6:	1f 93       	push	r17
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
   //LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 3cc:	fb 01       	movw	r30, r22
 3ce:	90 81       	ld	r25, Z
 3d0:	99 23       	and	r25, r25
 3d2:	51 f0       	breq	.+20     	; 0x3e8 <LCD_DisplayString+0x22>
 3d4:	eb 01       	movw	r28, r22
      LCD_Cursor(c++);
 3d6:	11 e0       	ldi	r17, 0x01	; 1
 3d8:	18 0f       	add	r17, r24
 3da:	d5 df       	rcall	.-86     	; 0x386 <LCD_Cursor>
      LCD_WriteData(*string++);
 3dc:	89 91       	ld	r24, Y+
 3de:	ea df       	rcall	.-44     	; 0x3b4 <LCD_WriteData>

void LCD_DisplayString( unsigned char column, char* string) {
   //LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 3e0:	81 2f       	mov	r24, r17
}

void LCD_DisplayString( unsigned char column, char* string) {
   //LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 3e2:	98 81       	ld	r25, Y
 3e4:	91 11       	cpse	r25, r1
 3e6:	f7 cf       	rjmp	.-18     	; 0x3d6 <LCD_DisplayString+0x10>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	08 95       	ret

000003f0 <LCDTICK>:
	unsigned long int elapsedTime; //Time elapsed since last task tick
	int (*TickFct)(int); //Task tick function
} task;

enum LCDSTATE{DISPLAY};
int LCDTICK(int LCDSTATE){
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	ec 01       	movw	r28, r24
	static unsigned char t = 0;
	LCD_DisplayString(1, MSG);
 3f6:	6c e0       	ldi	r22, 0x0C	; 12
 3f8:	71 e0       	ldi	r23, 0x01	; 1
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	e4 df       	rcall	.-56     	; 0x3c6 <LCD_DisplayString>
	LCD_DisplayString(17, MSG2);
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	71 e0       	ldi	r23, 0x01	; 1
 402:	81 e1       	ldi	r24, 0x11	; 17
 404:	e0 df       	rcall	.-64     	; 0x3c6 <LCD_DisplayString>
	if(joyRight == 0x01 && t < 15){
 406:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <joyRight>
 40a:	81 30       	cpi	r24, 0x01	; 1
 40c:	49 f4       	brne	.+18     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 40e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <t.1939>
 412:	8f 30       	cpi	r24, 0x0F	; 15
 414:	28 f4       	brcc	.+10     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		t++;
 416:	8f 5f       	subi	r24, 0xFF	; 255
 418:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <t.1939>
		joyRight = 0;
 41c:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <joyRight>
	}
	if(joyLeft == 0x01 && t > 1){
 420:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <joyLeft>
 424:	81 30       	cpi	r24, 0x01	; 1
 426:	49 f4       	brne	.+18     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 428:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <t.1939>
 42c:	82 30       	cpi	r24, 0x02	; 2
 42e:	28 f0       	brcs	.+10     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		t--;
 430:	81 50       	subi	r24, 0x01	; 1
 432:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <t.1939>
		joyLeft = 0;
 436:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <joyLeft>
	}
	LCD_Cursor(MSGSIZE + t + 1);
 43a:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <MSGSIZE>
 43e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <t.1939>
 442:	89 0f       	add	r24, r25
 444:	8f 5f       	subi	r24, 0xFF	; 255
 446:	9f df       	rcall	.-194    	; 0x386 <LCD_Cursor>
	return LCDSTATE;
}
 448:	ce 01       	movw	r24, r28
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <main>:




int main(void)
{
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	00 d0       	rcall	.+0      	; 0x456 <main+0x6>
 456:	00 d0       	rcall	.+0      	; 0x458 <main+0x8>
 458:	00 d0       	rcall	.+0      	; 0x45a <main+0xa>
 45a:	cd b7       	in	r28, 0x3d	; 61
 45c:	de b7       	in	r29, 0x3e	; 62
	keyChar = 0x00;
 45e:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <keyChar>
	MSGSPOT = 0;
 462:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <MSGSPOT+0x1>
 466:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <MSGSPOT>
	MSGSIZE = 0;
 46a:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <MSGSIZE>
	DDRD = 0xFF; PORTD = 0x00;
 46e:	8f ef       	ldi	r24, 0xFF	; 255
 470:	8a b9       	out	0x0a, r24	; 10
 472:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0xFF; PORTC = 0x00;
 474:	87 b9       	out	0x07, r24	; 7
 476:	18 b8       	out	0x08, r1	; 8
	DDRB = 0xFF; PORTB = 0x00;
 478:	84 b9       	out	0x04, r24	; 4
 47a:	15 b8       	out	0x05, r1	; 5
	DDRA = 0x00; PORTA = 0xFF;//Joystick input.
 47c:	11 b8       	out	0x01, r1	; 1
 47e:	82 b9       	out	0x02, r24	; 2
	ADMUX |= (1 << REFS0);//setting the reference of ADC
 480:	ec e7       	ldi	r30, 0x7C	; 124
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	90 81       	ld	r25, Z
 486:	90 64       	ori	r25, 0x40	; 64
 488:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADPS0) | (1<ADPS1)| (1<ADPS2) | (1<<ADEN) ;
 48a:	ea e7       	ldi	r30, 0x7A	; 122
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	90 81       	ld	r25, Z
 490:	91 68       	ori	r25, 0x81	; 129
 492:	90 83       	st	Z, r25
	static task task1, task2, task3;
	task *tasks[] = { &task1, &task2, &task3};
 494:	96 e0       	ldi	r25, 0x06	; 6
 496:	e1 e2       	ldi	r30, 0x21	; 33
 498:	f1 e0       	ldi	r31, 0x01	; 1
 49a:	de 01       	movw	r26, r28
 49c:	11 96       	adiw	r26, 0x01	; 1
 49e:	01 90       	ld	r0, Z+
 4a0:	0d 92       	st	X+, r0
 4a2:	9a 95       	dec	r25
 4a4:	e1 f7       	brne	.-8      	; 0x49e <main+0x4e>
	//task1 init
	task1.state = -1;
 4a6:	ee e3       	ldi	r30, 0x3E	; 62
 4a8:	f1 e0       	ldi	r31, 0x01	; 1
 4aa:	80 83       	st	Z, r24
	task1.period = 100;
 4ac:	44 e6       	ldi	r20, 0x64	; 100
 4ae:	50 e0       	ldi	r21, 0x00	; 0
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	70 e0       	ldi	r23, 0x00	; 0
 4b4:	41 83       	std	Z+1, r20	; 0x01
 4b6:	52 83       	std	Z+2, r21	; 0x02
 4b8:	63 83       	std	Z+3, r22	; 0x03
 4ba:	74 83       	std	Z+4, r23	; 0x04
	task1.elapsedTime = 100;
 4bc:	45 83       	std	Z+5, r20	; 0x05
 4be:	56 83       	std	Z+6, r21	; 0x06
 4c0:	67 83       	std	Z+7, r22	; 0x07
 4c2:	70 87       	std	Z+8, r23	; 0x08
	task1.TickFct = &JoyStickTick;
 4c4:	29 ec       	ldi	r18, 0xC9	; 201
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	32 87       	std	Z+10, r19	; 0x0a
 4ca:	21 87       	std	Z+9, r18	; 0x09
	task2.state = -1;
 4cc:	e3 e3       	ldi	r30, 0x33	; 51
 4ce:	f1 e0       	ldi	r31, 0x01	; 1
 4d0:	80 83       	st	Z, r24
	task2.period = 40;
 4d2:	48 e2       	ldi	r20, 0x28	; 40
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	41 83       	std	Z+1, r20	; 0x01
 4dc:	52 83       	std	Z+2, r21	; 0x02
 4de:	63 83       	std	Z+3, r22	; 0x03
 4e0:	74 83       	std	Z+4, r23	; 0x04
	task2.elapsedTime = 40;
 4e2:	45 83       	std	Z+5, r20	; 0x05
 4e4:	56 83       	std	Z+6, r21	; 0x06
 4e6:	67 83       	std	Z+7, r22	; 0x07
 4e8:	70 87       	std	Z+8, r23	; 0x08
	task2.TickFct = &KeyBoardTick;
 4ea:	24 e6       	ldi	r18, 0x64	; 100
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	32 87       	std	Z+10, r19	; 0x0a
 4f0:	21 87       	std	Z+9, r18	; 0x09
	task3.state = -1;
 4f2:	e8 e2       	ldi	r30, 0x28	; 40
 4f4:	f1 e0       	ldi	r31, 0x01	; 1
 4f6:	80 83       	st	Z, r24
	task3.period = 200;
 4f8:	88 ec       	ldi	r24, 0xC8	; 200
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	a0 e0       	ldi	r26, 0x00	; 0
 4fe:	b0 e0       	ldi	r27, 0x00	; 0
 500:	81 83       	std	Z+1, r24	; 0x01
 502:	92 83       	std	Z+2, r25	; 0x02
 504:	a3 83       	std	Z+3, r26	; 0x03
 506:	b4 83       	std	Z+4, r27	; 0x04
	task3.elapsedTime = 200;
 508:	85 83       	std	Z+5, r24	; 0x05
 50a:	96 83       	std	Z+6, r25	; 0x06
 50c:	a7 83       	std	Z+7, r26	; 0x07
 50e:	b0 87       	std	Z+8, r27	; 0x08
	task3.TickFct = &LCDTICK;
 510:	88 ef       	ldi	r24, 0xF8	; 248
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	92 87       	std	Z+10, r25	; 0x0a
 516:	81 87       	std	Z+9, r24	; 0x09
	TimerSet(20);
 518:	64 e1       	ldi	r22, 0x14	; 20
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	a5 de       	rcall	.-694    	; 0x26c <TimerSet>
	TimerOn();
 522:	b5 de       	rcall	.-662    	; 0x28e <TimerOn>
	LCD_init();
 524:	38 df       	rcall	.-400    	; 0x396 <LCD_init>
 526:	7e 01       	movw	r14, r28
 528:	87 e0       	ldi	r24, 0x07	; 7
 52a:	e8 0e       	add	r14, r24
 52c:	f1 1c       	adc	r15, r1
 52e:	de 01       	movw	r26, r28
 530:	11 96       	adiw	r26, 0x01	; 1
 532:	6d 01       	movw	r12, r26
 534:	f6 01       	movw	r30, r12
	while(1)
	{
		for ( unsigned i = 0; i < 3; i++ ) {
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 536:	01 91       	ld	r16, Z+
 538:	11 91       	ld	r17, Z+
 53a:	6f 01       	movw	r12, r30
 53c:	d8 01       	movw	r26, r16
 53e:	15 96       	adiw	r26, 0x05	; 5
 540:	4d 91       	ld	r20, X+
 542:	5d 91       	ld	r21, X+
 544:	6d 91       	ld	r22, X+
 546:	7c 91       	ld	r23, X
 548:	18 97       	sbiw	r26, 0x08	; 8
 54a:	11 96       	adiw	r26, 0x01	; 1
 54c:	8d 91       	ld	r24, X+
 54e:	9d 91       	ld	r25, X+
 550:	0d 90       	ld	r0, X+
 552:	bc 91       	ld	r27, X
 554:	a0 2d       	mov	r26, r0
 556:	48 17       	cp	r20, r24
 558:	59 07       	cpc	r21, r25
 55a:	6a 07       	cpc	r22, r26
 55c:	7b 07       	cpc	r23, r27
 55e:	81 f4       	brne	.+32     	; 0x580 <main+0x130>
 560:	f8 01       	movw	r30, r16
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 562:	80 81       	ld	r24, Z
 564:	01 84       	ldd	r0, Z+9	; 0x09
 566:	f2 85       	ldd	r31, Z+10	; 0x0a
 568:	e0 2d       	mov	r30, r0
 56a:	08 2e       	mov	r0, r24
 56c:	00 0c       	add	r0, r0
 56e:	99 0b       	sbc	r25, r25
 570:	09 95       	icall
 572:	d8 01       	movw	r26, r16
 574:	8c 93       	st	X, r24
 576:	f8 01       	movw	r30, r16
				tasks[i]->elapsedTime = 0;
 578:	15 82       	std	Z+5, r1	; 0x05
 57a:	16 82       	std	Z+6, r1	; 0x06
 57c:	17 82       	std	Z+7, r1	; 0x07
 57e:	10 86       	std	Z+8, r1	; 0x08
 580:	f8 01       	movw	r30, r16
			}
			tasks[i]->elapsedTime += 20;
 582:	85 81       	ldd	r24, Z+5	; 0x05
 584:	96 81       	ldd	r25, Z+6	; 0x06
 586:	a7 81       	ldd	r26, Z+7	; 0x07
 588:	b0 85       	ldd	r27, Z+8	; 0x08
 58a:	44 96       	adiw	r24, 0x14	; 20
 58c:	a1 1d       	adc	r26, r1
 58e:	b1 1d       	adc	r27, r1
 590:	85 83       	std	Z+5, r24	; 0x05
 592:	96 83       	std	Z+6, r25	; 0x06
 594:	a7 83       	std	Z+7, r26	; 0x07
 596:	b0 87       	std	Z+8, r27	; 0x08
 598:	ce 14       	cp	r12, r14
	TimerSet(20);
	TimerOn();
	LCD_init();
	while(1)
	{
		for ( unsigned i = 0; i < 3; i++ ) {
 59a:	df 04       	cpc	r13, r15
 59c:	59 f6       	brne	.-106    	; 0x534 <main+0xe4>
 59e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <TimerFlag>
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 20;
		}
		//Remember to add timer to code
		while(!TimerFlag);
 5a2:	88 23       	and	r24, r24
 5a4:	e1 f3       	breq	.-8      	; 0x59e <main+0x14e>
 5a6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <TimerFlag>
		TimerFlag = 0;
 5aa:	c1 cf       	rjmp	.-126    	; 0x52e <main+0xde>

000005ac <_exit>:
		//LCD_ClearScreen();
	}
 5ac:	f8 94       	cli

000005ae <__stop_program>:
 5ae:	ff cf       	rjmp	.-2      	; 0x5ae <__stop_program>
