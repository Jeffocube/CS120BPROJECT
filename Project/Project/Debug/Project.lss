
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00000a9c  00000b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  00800150  00800150  00000b80  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000170e  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a18  00000000  00000000  00002416  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e1c  00000000  00000000  00002e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00003c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006cb  00000000  00000000  00003e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e5  00000000  00000000  000044cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004cb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	88 c1       	rjmp	.+784    	; 0x346 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e9       	ldi	r30, 0x9C	; 156
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 35       	cpi	r26, 0x50	; 80
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e5       	ldi	r26, 0x50	; 80
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 39       	cpi	r26, 0x98	; 152
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d1 d3       	rcall	.+1954   	; 0x866 <main>
  c4:	e9 c4       	rjmp	.+2514   	; 0xa98 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <KeyBoardTick>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
  c8:	e0 91 7d 01 	lds	r30, 0x017D	; 0x80017d <t>
  cc:	e0 31       	cpi	r30, 0x10	; 16
  ce:	08 f0       	brcs	.+2      	; 0xd2 <KeyBoardTick+0xa>
  d0:	99 c0       	rjmp	.+306    	; 0x204 <KeyBoardTick+0x13c>
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	91 05       	cpc	r25, r1
  d6:	09 f4       	brne	.+2      	; 0xda <KeyBoardTick+0x12>
  d8:	6a c0       	rjmp	.+212    	; 0x1ae <KeyBoardTick+0xe6>
  da:	34 f4       	brge	.+12     	; 0xe8 <KeyBoardTick+0x20>
  dc:	00 97       	sbiw	r24, 0x00	; 0
  de:	79 f0       	breq	.+30     	; 0xfe <KeyBoardTick+0x36>
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	09 f4       	brne	.+2      	; 0xe6 <KeyBoardTick+0x1e>
  e4:	5a c0       	rjmp	.+180    	; 0x19a <KeyBoardTick+0xd2>
  e6:	81 c0       	rjmp	.+258    	; 0x1ea <KeyBoardTick+0x122>
  e8:	84 30       	cpi	r24, 0x04	; 4
  ea:	91 05       	cpc	r25, r1
  ec:	09 f4       	brne	.+2      	; 0xf0 <KeyBoardTick+0x28>
  ee:	6f c0       	rjmp	.+222    	; 0x1ce <KeyBoardTick+0x106>
  f0:	0c f4       	brge	.+2      	; 0xf4 <KeyBoardTick+0x2c>
  f2:	64 c0       	rjmp	.+200    	; 0x1bc <KeyBoardTick+0xf4>
  f4:	85 30       	cpi	r24, 0x05	; 5
  f6:	91 05       	cpc	r25, r1
  f8:	09 f4       	brne	.+2      	; 0xfc <KeyBoardTick+0x34>
  fa:	70 c0       	rjmp	.+224    	; 0x1dc <KeyBoardTick+0x114>
  fc:	76 c0       	rjmp	.+236    	; 0x1ea <KeyBoardTick+0x122>
  fe:	20 b1       	in	r18, 0x00	; 0
 100:	20 7f       	andi	r18, 0xF0	; 240
 102:	20 37       	cpi	r18, 0x70	; 112
 104:	49 f4       	brne	.+18     	; 0x118 <KeyBoardTick+0x50>
 106:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <keyChar>
 10a:	88 0f       	add	r24, r24
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <keyChar>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	6b c0       	rjmp	.+214    	; 0x1ee <KeyBoardTick+0x126>
 118:	20 b1       	in	r18, 0x00	; 0
 11a:	20 7f       	andi	r18, 0xF0	; 240
 11c:	20 3b       	cpi	r18, 0xB0	; 176
 11e:	41 f4       	brne	.+16     	; 0x130 <KeyBoardTick+0x68>
 120:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <keyChar>
 124:	88 0f       	add	r24, r24
 126:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <keyChar>
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	5f c0       	rjmp	.+190    	; 0x1ee <KeyBoardTick+0x126>
 130:	20 b1       	in	r18, 0x00	; 0
 132:	20 7f       	andi	r18, 0xF0	; 240
 134:	20 3d       	cpi	r18, 0xD0	; 208
 136:	a9 f4       	brne	.+42     	; 0x162 <KeyBoardTick+0x9a>
 138:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <keyChar>
 13c:	81 11       	cpse	r24, r1
 13e:	06 c0       	rjmp	.+12     	; 0x14c <KeyBoardTick+0x84>
 140:	ae 2f       	mov	r26, r30
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	ad 5c       	subi	r26, 0xCD	; 205
 146:	be 4f       	sbci	r27, 0xFE	; 254
 148:	80 e2       	ldi	r24, 0x20	; 32
 14a:	8c 93       	st	X, r24
 14c:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <keyChar>
 150:	eb 30       	cpi	r30, 0x0B	; 11
 152:	08 f0       	brcs	.+2      	; 0x156 <KeyBoardTick+0x8e>
 154:	55 c0       	rjmp	.+170    	; 0x200 <KeyBoardTick+0x138>
 156:	ef 5f       	subi	r30, 0xFF	; 255
 158:	e0 93 7d 01 	sts	0x017D, r30	; 0x80017d <t>
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	08 95       	ret
 162:	20 b1       	in	r18, 0x00	; 0
 164:	20 7f       	andi	r18, 0xF0	; 240
 166:	20 3e       	cpi	r18, 0xE0	; 224
 168:	51 f4       	brne	.+20     	; 0x17e <KeyBoardTick+0xb6>
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <READYTOSEND>
 170:	91 11       	cpse	r25, r1
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <READYTOSEND>
 178:	84 e0       	ldi	r24, 0x04	; 4
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	38 c0       	rjmp	.+112    	; 0x1ee <KeyBoardTick+0x126>
 17e:	20 b1       	in	r18, 0x00	; 0
 180:	28 7f       	andi	r18, 0xF8	; 248
 182:	20 3f       	cpi	r18, 0xF0	; 240
 184:	a1 f5       	brne	.+104    	; 0x1ee <KeyBoardTick+0x126>
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <READYTORECEIVE>
 18c:	91 11       	cpse	r25, r1
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <READYTORECEIVE>
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	2a c0       	rjmp	.+84     	; 0x1ee <KeyBoardTick+0x126>
 19a:	80 b1       	in	r24, 0x00	; 0
 19c:	80 7f       	andi	r24, 0xF0	; 240
 19e:	31 e0       	ldi	r19, 0x01	; 1
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	80 37       	cpi	r24, 0x70	; 112
 1a4:	09 f0       	breq	.+2      	; 0x1a8 <KeyBoardTick+0xe0>
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	83 2f       	mov	r24, r19
 1aa:	92 2f       	mov	r25, r18
 1ac:	20 c0       	rjmp	.+64     	; 0x1ee <KeyBoardTick+0x126>
 1ae:	20 b1       	in	r18, 0x00	; 0
 1b0:	20 7f       	andi	r18, 0xF0	; 240
 1b2:	20 3b       	cpi	r18, 0xB0	; 176
 1b4:	e1 f0       	breq	.+56     	; 0x1ee <KeyBoardTick+0x126>
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	19 c0       	rjmp	.+50     	; 0x1ee <KeyBoardTick+0x126>
 1bc:	20 b1       	in	r18, 0x00	; 0
 1be:	20 7f       	andi	r18, 0xF0	; 240
 1c0:	20 3d       	cpi	r18, 0xD0	; 208
 1c2:	a9 f0       	breq	.+42     	; 0x1ee <KeyBoardTick+0x126>
 1c4:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <keyChar>
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	08 95       	ret
 1ce:	20 b1       	in	r18, 0x00	; 0
 1d0:	20 7f       	andi	r18, 0xF0	; 240
 1d2:	20 3e       	cpi	r18, 0xE0	; 224
 1d4:	61 f0       	breq	.+24     	; 0x1ee <KeyBoardTick+0x126>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	09 c0       	rjmp	.+18     	; 0x1ee <KeyBoardTick+0x126>
 1dc:	20 b1       	in	r18, 0x00	; 0
 1de:	28 7f       	andi	r18, 0xF8	; 248
 1e0:	20 3f       	cpi	r18, 0xF0	; 240
 1e2:	29 f0       	breq	.+10     	; 0x1ee <KeyBoardTick+0x126>
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <KeyBoardTick+0x126>
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <keyChar>
 1f2:	22 23       	and	r18, r18
 1f4:	39 f0       	breq	.+14     	; 0x204 <KeyBoardTick+0x13c>
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	ed 5c       	subi	r30, 0xCD	; 205
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254
 1fc:	20 83       	st	Z, r18
 1fe:	08 95       	ret
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	08 95       	ret

00000206 <JoyStickTick>:
 206:	bc 01       	movw	r22, r24
 208:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 20c:	90 34       	cpi	r25, 0x40	; 64
 20e:	19 f0       	breq	.+6      	; 0x216 <JoyStickTick+0x10>
 210:	91 34       	cpi	r25, 0x41	; 65
 212:	b9 f0       	breq	.+46     	; 0x242 <JoyStickTick+0x3c>
 214:	2b c0       	rjmp	.+86     	; 0x26c <JoyStickTick+0x66>
 216:	ea e7       	ldi	r30, 0x7A	; 122
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	80 64       	ori	r24, 0x40	; 64
 21e:	80 83       	st	Z, r24
 220:	90 81       	ld	r25, Z
 222:	94 ff       	sbrs	r25, 4
 224:	fd cf       	rjmp	.-6      	; 0x220 <JoyStickTick+0x1a>
 226:	e8 e7       	ldi	r30, 0x78	; 120
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	91 81       	ldd	r25, Z+1	; 0x01
 22e:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <horiz+0x1>
 232:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <horiz>
 236:	11 82       	std	Z+1, r1	; 0x01
 238:	10 82       	st	Z, r1
 23a:	81 e4       	ldi	r24, 0x41	; 65
 23c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 240:	15 c0       	rjmp	.+42     	; 0x26c <JoyStickTick+0x66>
 242:	ea e7       	ldi	r30, 0x7A	; 122
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	80 64       	ori	r24, 0x40	; 64
 24a:	80 83       	st	Z, r24
 24c:	90 81       	ld	r25, Z
 24e:	94 ff       	sbrs	r25, 4
 250:	fd cf       	rjmp	.-6      	; 0x24c <JoyStickTick+0x46>
 252:	e8 e7       	ldi	r30, 0x78	; 120
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	91 81       	ldd	r25, Z+1	; 0x01
 25a:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <vert+0x1>
 25e:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <vert>
 262:	11 82       	std	Z+1, r1	; 0x01
 264:	10 82       	st	Z, r1
 266:	80 e4       	ldi	r24, 0x40	; 64
 268:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 26c:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <horiz>
 270:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <horiz+0x1>
 274:	25 33       	cpi	r18, 0x35	; 53
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	38 07       	cpc	r19, r24
 27a:	1c f0       	brlt	.+6      	; 0x282 <JoyStickTick+0x7c>
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <joyRight>
 282:	2c 32       	cpi	r18, 0x2C	; 44
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	38 07       	cpc	r19, r24
 288:	1c f4       	brge	.+6      	; 0x290 <JoyStickTick+0x8a>
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <joyLeft>
 290:	40 91 83 01 	lds	r20, 0x0183	; 0x800183 <vert>
 294:	50 91 84 01 	lds	r21, 0x0184	; 0x800184 <vert+0x1>
 298:	45 33       	cpi	r20, 0x35	; 53
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	58 07       	cpc	r21, r24
 29e:	1c f0       	brlt	.+6      	; 0x2a6 <JoyStickTick+0xa0>
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <joyUp>
 2a6:	4c 32       	cpi	r20, 0x2C	; 44
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	58 07       	cpc	r21, r24
 2ac:	1c f4       	brge	.+6      	; 0x2b4 <JoyStickTick+0xae>
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <joyDown>
 2b4:	44 5a       	subi	r20, 0xA4	; 164
 2b6:	51 40       	sbci	r21, 0x01	; 1
 2b8:	49 3c       	cpi	r20, 0xC9	; 201
 2ba:	51 05       	cpc	r21, r1
 2bc:	20 f4       	brcc	.+8      	; 0x2c6 <JoyStickTick+0xc0>
 2be:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <joyUp>
 2c2:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <joyDown>
 2c6:	24 5a       	subi	r18, 0xA4	; 164
 2c8:	31 40       	sbci	r19, 0x01	; 1
 2ca:	29 3c       	cpi	r18, 0xC9	; 201
 2cc:	31 05       	cpc	r19, r1
 2ce:	20 f4       	brcc	.+8      	; 0x2d8 <JoyStickTick+0xd2>
 2d0:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <joyLeft>
 2d4:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <joyRight>
 2d8:	cb 01       	movw	r24, r22
 2da:	08 95       	ret

000002dc <TimerSet>:
 2dc:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <_avr_timer_M>
 2e0:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <_avr_timer_M+0x1>
 2e4:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <_avr_timer_M+0x2>
 2e8:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <_avr_timer_M+0x3>
 2ec:	60 93 7e 01 	sts	0x017E, r22	; 0x80017e <_avr_timer_cntcurr>
 2f0:	70 93 7f 01 	sts	0x017F, r23	; 0x80017f <_avr_timer_cntcurr+0x1>
 2f4:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_avr_timer_cntcurr+0x2>
 2f8:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_avr_timer_cntcurr+0x3>
 2fc:	08 95       	ret

000002fe <TimerOn>:
 2fe:	8b e0       	ldi	r24, 0x0B	; 11
 300:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 304:	8d e7       	ldi	r24, 0x7D	; 125
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 30c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 316:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 31a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 31e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_avr_timer_M>
 322:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <_avr_timer_M+0x1>
 326:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <_avr_timer_M+0x2>
 32a:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <_avr_timer_M+0x3>
 32e:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <_avr_timer_cntcurr>
 332:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <_avr_timer_cntcurr+0x1>
 336:	a0 93 80 01 	sts	0x0180, r26	; 0x800180 <_avr_timer_cntcurr+0x2>
 33a:	b0 93 81 01 	sts	0x0181, r27	; 0x800181 <_avr_timer_cntcurr+0x3>
 33e:	8f b7       	in	r24, 0x3f	; 63
 340:	80 68       	ori	r24, 0x80	; 128
 342:	8f bf       	out	0x3f, r24	; 63
 344:	08 95       	ret

00000346 <__vector_13>:
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	8f 93       	push	r24
 352:	9f 93       	push	r25
 354:	af 93       	push	r26
 356:	bf 93       	push	r27
 358:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <_avr_timer_cntcurr>
 35c:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <_avr_timer_cntcurr+0x1>
 360:	a0 91 80 01 	lds	r26, 0x0180	; 0x800180 <_avr_timer_cntcurr+0x2>
 364:	b0 91 81 01 	lds	r27, 0x0181	; 0x800181 <_avr_timer_cntcurr+0x3>
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	a1 09       	sbc	r26, r1
 36c:	b1 09       	sbc	r27, r1
 36e:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <_avr_timer_cntcurr>
 372:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <_avr_timer_cntcurr+0x1>
 376:	a0 93 80 01 	sts	0x0180, r26	; 0x800180 <_avr_timer_cntcurr+0x2>
 37a:	b0 93 81 01 	sts	0x0181, r27	; 0x800181 <_avr_timer_cntcurr+0x3>
 37e:	89 2b       	or	r24, r25
 380:	8a 2b       	or	r24, r26
 382:	8b 2b       	or	r24, r27
 384:	99 f4       	brne	.+38     	; 0x3ac <__vector_13+0x66>
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <TimerFlag>
 38c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_avr_timer_M>
 390:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <_avr_timer_M+0x1>
 394:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <_avr_timer_M+0x2>
 398:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <_avr_timer_M+0x3>
 39c:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <_avr_timer_cntcurr>
 3a0:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <_avr_timer_cntcurr+0x1>
 3a4:	a0 93 80 01 	sts	0x0180, r26	; 0x800180 <_avr_timer_cntcurr+0x2>
 3a8:	b0 93 81 01 	sts	0x0181, r27	; 0x800181 <_avr_timer_cntcurr+0x3>
 3ac:	bf 91       	pop	r27
 3ae:	af 91       	pop	r26
 3b0:	9f 91       	pop	r25
 3b2:	8f 91       	pop	r24
 3b4:	0f 90       	pop	r0
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	0f 90       	pop	r0
 3ba:	1f 90       	pop	r1
 3bc:	18 95       	reti

000003be <delay_ms>:
 3be:	18 16       	cp	r1, r24
 3c0:	19 06       	cpc	r1, r25
 3c2:	5c f0       	brlt	.+22     	; 0x3da <delay_ms+0x1c>
 3c4:	08 95       	ret
 3c6:	00 00       	nop
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	31 09       	sbc	r19, r1
 3cc:	e1 f7       	brne	.-8      	; 0x3c6 <delay_ms+0x8>
 3ce:	4f 5f       	subi	r20, 0xFF	; 255
 3d0:	5f 4f       	sbci	r21, 0xFF	; 255
 3d2:	84 17       	cp	r24, r20
 3d4:	95 07       	cpc	r25, r21
 3d6:	19 f4       	brne	.+6      	; 0x3de <delay_ms+0x20>
 3d8:	08 95       	ret
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	27 e0       	ldi	r18, 0x07	; 7
 3e0:	33 e0       	ldi	r19, 0x03	; 3
 3e2:	f1 cf       	rjmp	.-30     	; 0x3c6 <delay_ms+0x8>

000003e4 <LCD_WriteCommand>:
 3e4:	2e 98       	cbi	0x05, 6	; 5
 3e6:	88 b9       	out	0x08, r24	; 8
 3e8:	2f 9a       	sbi	0x05, 7	; 5
 3ea:	00 00       	nop
 3ec:	2f 98       	cbi	0x05, 7	; 5
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	e5 cf       	rjmp	.-54     	; 0x3be <delay_ms>
 3f4:	08 95       	ret

000003f6 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 3f6:	81 31       	cpi	r24, 0x11	; 17
 3f8:	18 f4       	brcc	.+6      	; 0x400 <__LOCK_REGION_LENGTH__>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 3fa:	81 58       	subi	r24, 0x81	; 129
 3fc:	f3 cf       	rjmp	.-26     	; 0x3e4 <LCD_WriteCommand>
 3fe:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 400:	81 55       	subi	r24, 0x51	; 81
 402:	f0 cf       	rjmp	.-32     	; 0x3e4 <LCD_WriteCommand>
 404:	08 95       	ret

00000406 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 406:	84 e6       	ldi	r24, 0x64	; 100
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	d9 df       	rcall	.-78     	; 0x3be <delay_ms>
	LCD_WriteCommand(0x38);
 40c:	88 e3       	ldi	r24, 0x38	; 56
 40e:	ea df       	rcall	.-44     	; 0x3e4 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 410:	86 e0       	ldi	r24, 0x06	; 6
 412:	e8 df       	rcall	.-48     	; 0x3e4 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 414:	8f e0       	ldi	r24, 0x0F	; 15
 416:	e6 df       	rcall	.-52     	; 0x3e4 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	e4 df       	rcall	.-56     	; 0x3e4 <LCD_WriteCommand>
	delay_ms(10);						 
 41c:	8a e0       	ldi	r24, 0x0A	; 10
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	ce cf       	rjmp	.-100    	; 0x3be <delay_ms>
 422:	08 95       	ret

00000424 <LCD_WriteData>:
 424:	2e 9a       	sbi	0x05, 6	; 5
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 426:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 428:	2f 9a       	sbi	0x05, 7	; 5
   asm("nop");
 42a:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 42c:	2f 98       	cbi	0x05, 7	; 5
   delay_ms(1);
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	c5 cf       	rjmp	.-118    	; 0x3be <delay_ms>
 434:	08 95       	ret

00000436 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, char* string) {
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
   //LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 43c:	fb 01       	movw	r30, r22
 43e:	90 81       	ld	r25, Z
 440:	99 23       	and	r25, r25
 442:	51 f0       	breq	.+20     	; 0x458 <LCD_DisplayString+0x22>
 444:	eb 01       	movw	r28, r22
      LCD_Cursor(c++);
 446:	11 e0       	ldi	r17, 0x01	; 1
 448:	18 0f       	add	r17, r24
 44a:	d5 df       	rcall	.-86     	; 0x3f6 <LCD_Cursor>
      LCD_WriteData(*string++);
 44c:	89 91       	ld	r24, Y+
 44e:	ea df       	rcall	.-44     	; 0x424 <LCD_WriteData>

void LCD_DisplayString( unsigned char column, char* string) {
   //LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 450:	81 2f       	mov	r24, r17
}

void LCD_DisplayString( unsigned char column, char* string) {
   //LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 452:	98 81       	ld	r25, Y
 454:	91 11       	cpse	r25, r1
 456:	f7 cf       	rjmp	.-18     	; 0x446 <LCD_DisplayString+0x10>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	08 95       	ret

00000460 <LCDTICK>:
	return USARTSTATE;
}

//Updates the strings to be displayed===================================================
enum LCDSTATE{DISPLAY, SENDING, RECE, OKAY1, OKAY2};
int LCDTICK(int LCDSTATE){
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	ec 01       	movw	r28, r24
	static unsigned char WAIT = 0;
	switch(LCDSTATE){
 466:	82 30       	cpi	r24, 0x02	; 2
 468:	91 05       	cpc	r25, r1
 46a:	09 f4       	brne	.+2      	; 0x46e <LCDTICK+0xe>
 46c:	af c0       	rjmp	.+350    	; 0x5cc <LCDTICK+0x16c>
 46e:	34 f4       	brge	.+12     	; 0x47c <LCDTICK+0x1c>
 470:	00 97       	sbiw	r24, 0x00	; 0
 472:	61 f0       	breq	.+24     	; 0x48c <LCDTICK+0x2c>
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	09 f4       	brne	.+2      	; 0x47a <LCDTICK+0x1a>
 478:	9d c0       	rjmp	.+314    	; 0x5b4 <LCDTICK+0x154>
 47a:	e4 c0       	rjmp	.+456    	; 0x644 <LCDTICK+0x1e4>
 47c:	83 30       	cpi	r24, 0x03	; 3
 47e:	91 05       	cpc	r25, r1
 480:	09 f4       	brne	.+2      	; 0x484 <LCDTICK+0x24>
 482:	b0 c0       	rjmp	.+352    	; 0x5e4 <LCDTICK+0x184>
 484:	04 97       	sbiw	r24, 0x04	; 4
 486:	09 f4       	brne	.+2      	; 0x48a <LCDTICK+0x2a>
 488:	c5 c0       	rjmp	.+394    	; 0x614 <LCDTICK+0x1b4>
 48a:	dc c0       	rjmp	.+440    	; 0x644 <LCDTICK+0x1e4>
		case DISPLAY :
			LCD_DisplayString(1, MSG);
 48c:	63 e3       	ldi	r22, 0x33	; 51
 48e:	71 e0       	ldi	r23, 0x01	; 1
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	d1 df       	rcall	.-94     	; 0x436 <LCD_DisplayString>
			LCD_DisplayString(17, MSG2);
 494:	62 e2       	ldi	r22, 0x22	; 34
 496:	71 e0       	ldi	r23, 0x01	; 1
 498:	81 e1       	ldi	r24, 0x11	; 17
 49a:	cd df       	rcall	.-102    	; 0x436 <LCD_DisplayString>
			if(joyUp == 0x01 && up == 0){
 49c:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <joyUp>
 4a0:	81 30       	cpi	r24, 0x01	; 1
 4a2:	89 f4       	brne	.+34     	; 0x4c6 <LCDTICK+0x66>
 4a4:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <up>
 4a8:	81 11       	cpse	r24, r1
 4aa:	0d c0       	rjmp	.+26     	; 0x4c6 <LCDTICK+0x66>
				keyChar = 0;
 4ac:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <keyChar>
				t = 0;
 4b0:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <t>
				up = 1;
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <up>
			}
			if(joyDown == 0x01 && up == 1){
 4ba:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <joyDown>
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <LCDTICK+0x64>
 4c2:	dc c0       	rjmp	.+440    	; 0x67c <LCDTICK+0x21c>
 4c4:	08 c0       	rjmp	.+16     	; 0x4d6 <LCDTICK+0x76>
 4c6:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <joyDown>
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	59 f4       	brne	.+22     	; 0x4e4 <LCDTICK+0x84>
 4ce:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <up>
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	39 f4       	brne	.+14     	; 0x4e4 <LCDTICK+0x84>
				keyChar = 0;
 4d6:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <keyChar>
				t = 16;
 4da:	80 e1       	ldi	r24, 0x10	; 16
 4dc:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <t>
				up = 0;
 4e0:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <up>
			}
	
			if(joyRight == 0x01 && t < 11 && up == 1){
 4e4:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <joyRight>
 4e8:	81 30       	cpi	r24, 0x01	; 1
 4ea:	09 f0       	breq	.+2      	; 0x4ee <LCDTICK+0x8e>
 4ec:	cd c0       	rjmp	.+410    	; 0x688 <LCDTICK+0x228>
 4ee:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <t>
 4f2:	8b 30       	cpi	r24, 0x0B	; 11
 4f4:	08 f0       	brcs	.+2      	; 0x4f8 <LCDTICK+0x98>
 4f6:	ce c0       	rjmp	.+412    	; 0x694 <LCDTICK+0x234>
 4f8:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <up>
 4fc:	91 30       	cpi	r25, 0x01	; 1
 4fe:	09 f0       	breq	.+2      	; 0x502 <LCDTICK+0xa2>
 500:	c9 c0       	rjmp	.+402    	; 0x694 <LCDTICK+0x234>
				keyChar = 0;
 502:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <keyChar>
				t++;
 506:	8f 5f       	subi	r24, 0xFF	; 255
 508:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <t>
				joyRight = 0;
 50c:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <joyRight>
 510:	bb c0       	rjmp	.+374    	; 0x688 <LCDTICK+0x228>
			}
			if(joyLeft == 0x01 && t > 0 && up == 1){
 512:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <joyLeft>
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	09 f0       	breq	.+2      	; 0x51c <LCDTICK+0xbc>
 51a:	9c c0       	rjmp	.+312    	; 0x654 <LCDTICK+0x1f4>
 51c:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <t>
 520:	88 23       	and	r24, r24
 522:	09 f4       	brne	.+2      	; 0x526 <LCDTICK+0xc6>
 524:	a3 c0       	rjmp	.+326    	; 0x66c <LCDTICK+0x20c>
 526:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <up>
 52a:	91 30       	cpi	r25, 0x01	; 1
 52c:	09 f0       	breq	.+2      	; 0x530 <LCDTICK+0xd0>
 52e:	8d c0       	rjmp	.+282    	; 0x64a <LCDTICK+0x1ea>
				keyChar = 0;
 530:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <keyChar>
				t--;
 534:	81 50       	subi	r24, 0x01	; 1
 536:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <t>
				joyLeft = 0;
 53a:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <joyLeft>
 53e:	8a c0       	rjmp	.+276    	; 0x654 <LCDTICK+0x1f4>
			}
			if(joyRight == 0x01 && t < 32 && up == 0){
 540:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <t>
 544:	80 32       	cpi	r24, 0x20	; 32
 546:	48 f4       	brcc	.+18     	; 0x55a <LCDTICK+0xfa>
 548:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <up>
 54c:	91 11       	cpse	r25, r1
 54e:	05 c0       	rjmp	.+10     	; 0x55a <LCDTICK+0xfa>
				t++;
 550:	8f 5f       	subi	r24, 0xFF	; 255
 552:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <t>
				joyRight = 0;
 556:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <joyRight>
			}
			if(joyLeft == 0x01 && t > 16 && up == 0){
 55a:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <joyLeft>
 55e:	81 30       	cpi	r24, 0x01	; 1
 560:	69 f4       	brne	.+26     	; 0x57c <LCDTICK+0x11c>
 562:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <t>
 566:	81 31       	cpi	r24, 0x11	; 17
 568:	48 f0       	brcs	.+18     	; 0x57c <LCDTICK+0x11c>
 56a:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <up>
 56e:	91 11       	cpse	r25, r1
 570:	05 c0       	rjmp	.+10     	; 0x57c <LCDTICK+0x11c>
				t--;
 572:	81 50       	subi	r24, 0x01	; 1
 574:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <t>
				joyLeft = 0;
 578:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <joyLeft>
			}
			LCD_Cursor(MSGSIZE + t + 1);
 57c:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <MSGSIZE>
 580:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <t>
 584:	89 0f       	add	r24, r25
 586:	8f 5f       	subi	r24, 0xFF	; 255
 588:	36 df       	rcall	.-404    	; 0x3f6 <LCD_Cursor>
			if(READYTOSEND == 1){
 58a:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <READYTOSEND>
 58e:	81 30       	cpi	r24, 0x01	; 1
				LCDSTATE = SENDING;
				LCD_DisplayString(1, WAITMESSAGE);
 590:	31 f4       	brne	.+12     	; 0x59e <LCDTICK+0x13e>
 592:	61 e1       	ldi	r22, 0x11	; 17
 594:	71 e0       	ldi	r23, 0x01	; 1
 596:	4f df       	rcall	.-354    	; 0x436 <LCD_DisplayString>
				t--;
				joyLeft = 0;
			}
			LCD_Cursor(MSGSIZE + t + 1);
			if(READYTOSEND == 1){
				LCDSTATE = SENDING;
 598:	c1 e0       	ldi	r28, 0x01	; 1
 59a:	d0 e0       	ldi	r29, 0x00	; 0
				LCD_DisplayString(1, WAITMESSAGE);
				break;
 59c:	87 c0       	rjmp	.+270    	; 0x6ac <LCDTICK+0x24c>
			}
			if(READYTORECEIVE == 1){
 59e:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <READYTORECEIVE>
 5a2:	81 30       	cpi	r24, 0x01	; 1
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <LCDTICK+0x148>
				LCDSTATE = RECE;
				LCD_DisplayString(1, WAITMESSAGE);
 5a6:	82 c0       	rjmp	.+260    	; 0x6ac <LCDTICK+0x24c>
 5a8:	61 e1       	ldi	r22, 0x11	; 17
 5aa:	71 e0       	ldi	r23, 0x01	; 1
 5ac:	44 df       	rcall	.-376    	; 0x436 <LCD_DisplayString>
				LCDSTATE = SENDING;
				LCD_DisplayString(1, WAITMESSAGE);
				break;
			}
			if(READYTORECEIVE == 1){
				LCDSTATE = RECE;
 5ae:	c2 e0       	ldi	r28, 0x02	; 2
 5b0:	d0 e0       	ldi	r29, 0x00	; 0
				LCD_DisplayString(1, WAITMESSAGE);
				break;
 5b2:	7c c0       	rjmp	.+248    	; 0x6ac <LCDTICK+0x24c>
			}
			LCDSTATE = DISPLAY;
		break;
		case SENDING :
			if(READYTOSEND == 1)
 5b4:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <READYTOSEND>
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	09 f4       	brne	.+2      	; 0x5be <LCDTICK+0x15e>
				LCDSTATE = SENDING;
			else{
				LCD_DisplayString(1, DONEMESSAGE);
 5bc:	77 c0       	rjmp	.+238    	; 0x6ac <LCDTICK+0x24c>
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	71 e0       	ldi	r23, 0x01	; 1
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	38 df       	rcall	.-400    	; 0x436 <LCD_DisplayString>
				LCDSTATE = OKAY1;
 5c6:	c3 e0       	ldi	r28, 0x03	; 3
 5c8:	d0 e0       	ldi	r29, 0x00	; 0
 5ca:	70 c0       	rjmp	.+224    	; 0x6ac <LCDTICK+0x24c>
			}
		break;
		case RECE :
			if(READYTORECEIVE == 1)
 5cc:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <READYTORECEIVE>
 5d0:	81 30       	cpi	r24, 0x01	; 1
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <LCDTICK+0x176>
				LCDSTATE = RECE;
			else{
				LCD_DisplayString(1, DONEMESSAGE);
 5d4:	6b c0       	rjmp	.+214    	; 0x6ac <LCDTICK+0x24c>
 5d6:	60 e0       	ldi	r22, 0x00	; 0
 5d8:	71 e0       	ldi	r23, 0x01	; 1
 5da:	81 e0       	ldi	r24, 0x01	; 1
				LCDSTATE = OKAY2;
 5dc:	2c df       	rcall	.-424    	; 0x436 <LCD_DisplayString>
 5de:	c4 e0       	ldi	r28, 0x04	; 4
			}
		break;
		case OKAY1 :
			LCD_Cursor(5);
 5e0:	d0 e0       	ldi	r29, 0x00	; 0
 5e2:	64 c0       	rjmp	.+200    	; 0x6ac <LCDTICK+0x24c>
			LCD_WriteData(3);
 5e4:	85 e0       	ldi	r24, 0x05	; 5
 5e6:	07 df       	rcall	.-498    	; 0x3f6 <LCD_Cursor>
			LCD_Cursor(6);
 5e8:	83 e0       	ldi	r24, 0x03	; 3
 5ea:	1c df       	rcall	.-456    	; 0x424 <LCD_WriteData>
 5ec:	86 e0       	ldi	r24, 0x06	; 6
			LCD_WriteData(2);
 5ee:	03 df       	rcall	.-506    	; 0x3f6 <LCD_Cursor>
 5f0:	82 e0       	ldi	r24, 0x02	; 2
 5f2:	18 df       	rcall	.-464    	; 0x424 <LCD_WriteData>
			LCD_Cursor(7);
 5f4:	87 e0       	ldi	r24, 0x07	; 7
 5f6:	ff de       	rcall	.-514    	; 0x3f6 <LCD_Cursor>
 5f8:	81 e0       	ldi	r24, 0x01	; 1
			LCD_WriteData(1);
 5fa:	14 df       	rcall	.-472    	; 0x424 <LCD_WriteData>
 5fc:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <WAIT.1999>
			WAIT++;
 600:	8f 5f       	subi	r24, 0xFF	; 255
 602:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <WAIT.1999>
			if(WAIT < 40){
				LCDSTATE = OKAY1;
			}else{
				LCDSTATE = DISPLAY;
 606:	88 32       	cpi	r24, 0x28	; 40
			}
			LCD_Cursor(0);
 608:	10 f0       	brcs	.+4      	; 0x60e <LCDTICK+0x1ae>
 60a:	c0 e0       	ldi	r28, 0x00	; 0
		break;
 60c:	d0 e0       	ldi	r29, 0x00	; 0
		case OKAY2 :
			LCD_Cursor(5);
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	f2 de       	rcall	.-540    	; 0x3f6 <LCD_Cursor>
 612:	4c c0       	rjmp	.+152    	; 0x6ac <LCDTICK+0x24c>
			LCD_WriteData(3);
 614:	85 e0       	ldi	r24, 0x05	; 5
 616:	ef de       	rcall	.-546    	; 0x3f6 <LCD_Cursor>
 618:	83 e0       	ldi	r24, 0x03	; 3
			LCD_Cursor(6);
 61a:	04 df       	rcall	.-504    	; 0x424 <LCD_WriteData>
 61c:	86 e0       	ldi	r24, 0x06	; 6
			LCD_WriteData(2);
 61e:	eb de       	rcall	.-554    	; 0x3f6 <LCD_Cursor>
 620:	82 e0       	ldi	r24, 0x02	; 2
 622:	00 df       	rcall	.-512    	; 0x424 <LCD_WriteData>
			LCD_Cursor(7);
 624:	87 e0       	ldi	r24, 0x07	; 7
 626:	e7 de       	rcall	.-562    	; 0x3f6 <LCD_Cursor>
 628:	81 e0       	ldi	r24, 0x01	; 1
			LCD_WriteData(1);
 62a:	fc de       	rcall	.-520    	; 0x424 <LCD_WriteData>
 62c:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <WAIT.1999>
			WAIT++;
 630:	8f 5f       	subi	r24, 0xFF	; 255
 632:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <WAIT.1999>
 636:	84 31       	cpi	r24, 0x14	; 20
 638:	10 f0       	brcs	.+4      	; 0x63e <LCDTICK+0x1de>
			if(WAIT < 20){
 63a:	c0 e0       	ldi	r28, 0x00	; 0
 63c:	d0 e0       	ldi	r29, 0x00	; 0
				LCDSTATE = OKAY2;
			}else{
				LCDSTATE = DISPLAY;
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	da de       	rcall	.-588    	; 0x3f6 <LCD_Cursor>
			}
			LCD_Cursor(0);
 642:	34 c0       	rjmp	.+104    	; 0x6ac <LCDTICK+0x24c>
 644:	c0 e0       	ldi	r28, 0x00	; 0
 646:	d0 e0       	ldi	r29, 0x00	; 0
		break;
 648:	31 c0       	rjmp	.+98     	; 0x6ac <LCDTICK+0x24c>
		default :
			LCDSTATE = DISPLAY;
 64a:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <joyRight>
		break;
	}
	return LCDSTATE;
 64e:	81 30       	cpi	r24, 0x01	; 1
			if(joyLeft == 0x01 && t > 0 && up == 1){
				keyChar = 0;
				t--;
				joyLeft = 0;
			}
			if(joyRight == 0x01 && t < 32 && up == 0){
 650:	39 f1       	breq	.+78     	; 0x6a0 <LCDTICK+0x240>
 652:	87 cf       	rjmp	.-242    	; 0x562 <LCDTICK+0x102>
 654:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <joyRight>
 658:	81 30       	cpi	r24, 0x01	; 1
 65a:	09 f0       	breq	.+2      	; 0x65e <LCDTICK+0x1fe>
 65c:	8f cf       	rjmp	.-226    	; 0x57c <LCDTICK+0x11c>
 65e:	70 cf       	rjmp	.-288    	; 0x540 <LCDTICK+0xe0>
 660:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <up>
 664:	88 23       	and	r24, r24
 666:	09 f4       	brne	.+2      	; 0x66a <LCDTICK+0x20a>
 668:	73 cf       	rjmp	.-282    	; 0x550 <LCDTICK+0xf0>
 66a:	7b cf       	rjmp	.-266    	; 0x562 <LCDTICK+0x102>
 66c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <joyRight>
 670:	81 30       	cpi	r24, 0x01	; 1
 672:	b1 f3       	breq	.-20     	; 0x660 <LCDTICK+0x200>
 674:	76 cf       	rjmp	.-276    	; 0x562 <LCDTICK+0x102>
 676:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <t>
 67a:	3e cf       	rjmp	.-388    	; 0x4f8 <LCDTICK+0x98>
				keyChar = 0;
				t = 16;
				up = 0;
			}
	
			if(joyRight == 0x01 && t < 11 && up == 1){
 67c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <joyRight>
 680:	81 30       	cpi	r24, 0x01	; 1
 682:	09 f0       	breq	.+2      	; 0x686 <LCDTICK+0x226>
 684:	46 cf       	rjmp	.-372    	; 0x512 <LCDTICK+0xb2>
 686:	f7 cf       	rjmp	.-18     	; 0x676 <LCDTICK+0x216>
 688:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <joyLeft>
 68c:	81 30       	cpi	r24, 0x01	; 1
				keyChar = 0;
				t++;
				joyRight = 0;
			}
			if(joyLeft == 0x01 && t > 0 && up == 1){
 68e:	09 f0       	breq	.+2      	; 0x692 <LCDTICK+0x232>
 690:	75 cf       	rjmp	.-278    	; 0x57c <LCDTICK+0x11c>
 692:	44 cf       	rjmp	.-376    	; 0x51c <LCDTICK+0xbc>
 694:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <joyLeft>
 698:	81 30       	cpi	r24, 0x01	; 1
 69a:	09 f4       	brne	.+2      	; 0x69e <LCDTICK+0x23e>
 69c:	3f cf       	rjmp	.-386    	; 0x51c <LCDTICK+0xbc>
 69e:	50 cf       	rjmp	.-352    	; 0x540 <LCDTICK+0xe0>
 6a0:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <t>
 6a4:	80 32       	cpi	r24, 0x20	; 32
				keyChar = 0;
				t--;
				joyLeft = 0;
			}
			if(joyRight == 0x01 && t < 32 && up == 0){
 6a6:	08 f0       	brcs	.+2      	; 0x6aa <LCDTICK+0x24a>
 6a8:	5c cf       	rjmp	.-328    	; 0x562 <LCDTICK+0x102>
 6aa:	4e cf       	rjmp	.-356    	; 0x548 <LCDTICK+0xe8>
 6ac:	ce 01       	movw	r24, r28
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
		default :
			LCDSTATE = DISPLAY;
		break;
	}
	return LCDSTATE;
}
 6b2:	08 95       	ret

000006b4 <receive_string>:
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
 6b8:	a2 e2       	ldi	r26, 0x22	; 34
#define BAUD_RATE 9600
#define BAUD_PRESCALE (((F_CPU / (BAUD_RATE * 16UL))) - 1)
unsigned char READYTOSEND;
unsigned char READYTORECEIVE;
//Sends and receives strings via USART==================================================
void receive_string(char* stringswapped){
 6ba:	b1 e0       	ldi	r27, 0x01	; 1
 6bc:	22 e3       	ldi	r18, 0x32	; 50
 6be:	31 e0       	ldi	r19, 0x01	; 1
 6c0:	fd 01       	movw	r30, r26
	static unsigned char flush;

	for(unsigned j = 0; j < 16; j++){
		MSG2[j] = ' ';
 6c2:	80 e2       	ldi	r24, 0x20	; 32
 6c4:	81 93       	st	Z+, r24
unsigned char READYTORECEIVE;
//Sends and receives strings via USART==================================================
void receive_string(char* stringswapped){
	static unsigned char flush;

	for(unsigned j = 0; j < 16; j++){
 6c6:	2e 17       	cp	r18, r30
 6c8:	3f 07       	cpc	r19, r31
 6ca:	e1 f7       	brne	.-8      	; 0x6c4 <receive_string+0x10>
		MSG2[j] = ' ';
	}
	MSG2[16] = 0;
 6cc:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <MSG2+0x10>
	for(unsigned j = 0; j < 16; j++){
		while ( !(UCSR0A & (1 << RXC0)) );
 6d0:	e0 ec       	ldi	r30, 0xC0	; 192
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
		MSG2[j] = UDR0;
 6d4:	c6 ec       	ldi	r28, 0xC6	; 198
 6d6:	d0 e0       	ldi	r29, 0x00	; 0
	for(unsigned j = 0; j < 16; j++){
		MSG2[j] = ' ';
	}
	MSG2[16] = 0;
	for(unsigned j = 0; j < 16; j++){
		while ( !(UCSR0A & (1 << RXC0)) );
 6d8:	80 81       	ld	r24, Z
 6da:	88 23       	and	r24, r24
 6dc:	ec f7       	brge	.-6      	; 0x6d8 <receive_string+0x24>
		MSG2[j] = UDR0;
 6de:	88 81       	ld	r24, Y
 6e0:	8d 93       	st	X+, r24

	for(unsigned j = 0; j < 16; j++){
		MSG2[j] = ' ';
	}
	MSG2[16] = 0;
	for(unsigned j = 0; j < 16; j++){
 6e2:	2a 17       	cp	r18, r26
 6e4:	3b 07       	cpc	r19, r27
 6e6:	c1 f7       	brne	.-16     	; 0x6d8 <receive_string+0x24>
			stringswapped[j] = ' ';
		if(j == 15)
			stringswapped[j] = 0;
			*/
	}
	while ( UCSR0A & (1 << RXC0) ) { flush = UDR0; }
 6e8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 6ec:	88 23       	and	r24, r24
 6ee:	44 f4       	brge	.+16     	; 0x700 <receive_string+0x4c>
 6f0:	a6 ec       	ldi	r26, 0xC6	; 198
 6f2:	b0 e0       	ldi	r27, 0x00	; 0
 6f4:	e0 ec       	ldi	r30, 0xC0	; 192
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	8c 91       	ld	r24, X
 6fa:	80 81       	ld	r24, Z
 6fc:	88 23       	and	r24, r24
 6fe:	e4 f3       	brlt	.-8      	; 0x6f8 <receive_string+0x44>
	LCD_Cursor(0);
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	79 de       	rcall	.-782    	; 0x3f6 <LCD_Cursor>
}
 704:	df 91       	pop	r29
 706:	cf 91       	pop	r28
 708:	08 95       	ret

0000070a <transmit_string>:
void transmit_string(char* stringswapped){
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
 70e:	63 e3       	ldi	r22, 0x33	; 51
 710:	71 e0       	ldi	r23, 0x01	; 1
 712:	23 e4       	ldi	r18, 0x43	; 67
 714:	31 e0       	ldi	r19, 0x01	; 1
 716:	eb 01       	movw	r28, r22
	for(unsigned j = 0; j < 16; j++){
		while( !(UCSR0A & (1 << UDRE0)) );
 718:	e0 ec       	ldi	r30, 0xC0	; 192
 71a:	f0 e0       	ldi	r31, 0x00	; 0
			UDR0 = MSG[j];
 71c:	46 ec       	ldi	r20, 0xC6	; 198
 71e:	50 e0       	ldi	r21, 0x00	; 0
	while ( UCSR0A & (1 << RXC0) ) { flush = UDR0; }
	LCD_Cursor(0);
}
void transmit_string(char* stringswapped){
	for(unsigned j = 0; j < 16; j++){
		while( !(UCSR0A & (1 << UDRE0)) );
 720:	80 81       	ld	r24, Z
 722:	85 ff       	sbrs	r24, 5
 724:	fd cf       	rjmp	.-6      	; 0x720 <transmit_string+0x16>
			UDR0 = MSG[j];
 726:	89 91       	ld	r24, Y+
 728:	da 01       	movw	r26, r20
 72a:	8c 93       	st	X, r24
	}
	while ( UCSR0A & (1 << RXC0) ) { flush = UDR0; }
	LCD_Cursor(0);
}
void transmit_string(char* stringswapped){
	for(unsigned j = 0; j < 16; j++){
 72c:	c2 17       	cp	r28, r18
 72e:	d3 07       	cpc	r29, r19
 730:	b9 f7       	brne	.-18     	; 0x720 <transmit_string+0x16>
		while( !(UCSR0A & (1 << UDRE0)) );
			UDR0 = MSG[j];
	}
	for(unsigned j = 0; j < 16; j++){
		MSG[j] = ' ';
 732:	80 e2       	ldi	r24, 0x20	; 32
 734:	fb 01       	movw	r30, r22
 736:	81 93       	st	Z+, r24
 738:	bf 01       	movw	r22, r30
void transmit_string(char* stringswapped){
	for(unsigned j = 0; j < 16; j++){
		while( !(UCSR0A & (1 << UDRE0)) );
			UDR0 = MSG[j];
	}
	for(unsigned j = 0; j < 16; j++){
 73a:	e2 17       	cp	r30, r18
 73c:	f3 07       	cpc	r31, r19
 73e:	d1 f7       	brne	.-12     	; 0x734 <transmit_string+0x2a>
		MSG[j] = ' ';
	}
	MSG[16] = 0;
 740:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <MSG+0x10>
	LCD_Cursor(0);
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	57 de       	rcall	.-850    	; 0x3f6 <LCD_Cursor>
}
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	08 95       	ret

0000074e <USARTTICK>:

enum USARTSTATE{WAITSHAKE, WAITTRANSMIT, WAITRECEIVE, TRANSMIT, RECEIVE};
int USARTTICK(int USARTSTATE){
	switch(USARTSTATE){
 74e:	82 30       	cpi	r24, 0x02	; 2
 750:	91 05       	cpc	r25, r1
 752:	49 f1       	breq	.+82     	; 0x7a6 <USARTTICK+0x58>
 754:	34 f4       	brge	.+12     	; 0x762 <USARTTICK+0x14>
 756:	00 97       	sbiw	r24, 0x00	; 0
 758:	51 f0       	breq	.+20     	; 0x76e <USARTTICK+0x20>
 75a:	81 30       	cpi	r24, 0x01	; 1
 75c:	91 05       	cpc	r25, r1
 75e:	b1 f0       	breq	.+44     	; 0x78c <USARTTICK+0x3e>
 760:	48 c0       	rjmp	.+144    	; 0x7f2 <USARTTICK+0xa4>
 762:	83 30       	cpi	r24, 0x03	; 3
 764:	91 05       	cpc	r25, r1
 766:	61 f1       	breq	.+88     	; 0x7c0 <USARTTICK+0x72>
 768:	04 97       	sbiw	r24, 0x04	; 4
 76a:	99 f1       	breq	.+102    	; 0x7d2 <USARTTICK+0x84>
 76c:	42 c0       	rjmp	.+132    	; 0x7f2 <USARTTICK+0xa4>
		case WAITSHAKE :
			if(READYTOSEND == 1){
 76e:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <READYTOSEND>
 772:	21 30       	cpi	r18, 0x01	; 1
 774:	19 f4       	brne	.+6      	; 0x77c <USARTTICK+0x2e>
				PORTD = PORTD | 0x20;
 776:	5d 9a       	sbi	0x0b, 5	; 11
				USARTSTATE = WAITTRANSMIT;
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	90 e0       	ldi	r25, 0x00	; 0
			}
			if(READYTORECEIVE == 1){
 77c:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <READYTORECEIVE>
 780:	21 30       	cpi	r18, 0x01	; 1
 782:	c9 f5       	brne	.+114    	; 0x7f6 <USARTTICK+0xa8>
				PORTD = PORTD | 0x08;
 784:	5b 9a       	sbi	0x0b, 3	; 11
				USARTSTATE = WAITRECEIVE;
 786:	82 e0       	ldi	r24, 0x02	; 2
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	08 95       	ret
			}
		break;
		case WAITTRANSMIT :
			if(READYTOSEND == 0){
 78c:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <READYTOSEND>
 790:	21 11       	cpse	r18, r1
 792:	04 c0       	rjmp	.+8      	; 0x79c <USARTTICK+0x4e>
				PORTD = PORTD & 0xDF;
 794:	5d 98       	cbi	0x0b, 5	; 11
				USARTSTATE = WAITSHAKE;
 796:	80 e0       	ldi	r24, 0x00	; 0
 798:	90 e0       	ldi	r25, 0x00	; 0
				break;
 79a:	08 95       	ret
			}
			if((PORTD & 0x04) == 0x04){
 79c:	5a 9b       	sbis	0x0b, 2	; 11
 79e:	2b c0       	rjmp	.+86     	; 0x7f6 <USARTTICK+0xa8>
				USARTSTATE = TRANSMIT;
 7a0:	83 e0       	ldi	r24, 0x03	; 3
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	08 95       	ret
			}
		break;
		case WAITRECEIVE :
			if(READYTORECEIVE == 0){
 7a6:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <READYTORECEIVE>
 7aa:	21 11       	cpse	r18, r1
 7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <USARTTICK+0x68>
				PORTD = PORTD & 0xF7;
 7ae:	5b 98       	cbi	0x0b, 3	; 11
				USARTSTATE = WAITSHAKE;
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	90 e0       	ldi	r25, 0x00	; 0
				break;
 7b4:	08 95       	ret
			}
			if((PIND & 0x10) == 0x10){
 7b6:	4c 9b       	sbis	0x09, 4	; 9
 7b8:	1e c0       	rjmp	.+60     	; 0x7f6 <USARTTICK+0xa8>
				USARTSTATE = RECEIVE;
 7ba:	84 e0       	ldi	r24, 0x04	; 4
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	08 95       	ret
			}
		break;
		case TRANSMIT :
			transmit_string(MSG);
 7c0:	83 e3       	ldi	r24, 0x33	; 51
 7c2:	91 e0       	ldi	r25, 0x01	; 1
 7c4:	a2 df       	rcall	.-188    	; 0x70a <transmit_string>
			PORTD = PORTD & 0xDF;
 7c6:	5d 98       	cbi	0x0b, 5	; 11
			READYTOSEND = 0;
 7c8:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <READYTOSEND>
			USARTSTATE = WAITSHAKE;
 7cc:	80 e0       	ldi	r24, 0x00	; 0
 7ce:	90 e0       	ldi	r25, 0x00	; 0
		break;
 7d0:	08 95       	ret
		case RECEIVE :
			receive_string(MSG2);
 7d2:	82 e2       	ldi	r24, 0x22	; 34
 7d4:	91 e0       	ldi	r25, 0x01	; 1
 7d6:	6e df       	rcall	.-292    	; 0x6b4 <receive_string>
			PORTD = PORTD & 0xF7;
 7d8:	5b 98       	cbi	0x0b, 3	; 11
			eeprom_update_block(MSG2, (void *)1, 17);
 7da:	41 e1       	ldi	r20, 0x11	; 17
 7dc:	50 e0       	ldi	r21, 0x00	; 0
 7de:	61 e0       	ldi	r22, 0x01	; 1
 7e0:	70 e0       	ldi	r23, 0x00	; 0
 7e2:	82 e2       	ldi	r24, 0x22	; 34
 7e4:	91 e0       	ldi	r25, 0x01	; 1
 7e6:	37 d1       	rcall	.+622    	; 0xa56 <eeprom_update_block>
			READYTORECEIVE = 0;
 7e8:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <READYTORECEIVE>
			USARTSTATE = WAITSHAKE;
 7ec:	80 e0       	ldi	r24, 0x00	; 0
 7ee:	90 e0       	ldi	r25, 0x00	; 0
		break;
 7f0:	08 95       	ret
		default :
			USARTSTATE = WAITSHAKE;
 7f2:	80 e0       	ldi	r24, 0x00	; 0
 7f4:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	
	return USARTSTATE;
}
 7f6:	08 95       	ret

000007f8 <LCD_build>:
}



void LCD_build(){
	LCD_WriteCommand(0x48);       //Load the location where we want to store
 7f8:	88 e4       	ldi	r24, 0x48	; 72
 7fa:	f4 dd       	rcall	.-1048   	; 0x3e4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	12 de       	rcall	.-988    	; 0x424 <LCD_WriteData>
	LCD_WriteData(0x10);      //Load row 1 data
 800:	80 e1       	ldi	r24, 0x10	; 16
 802:	10 de       	rcall	.-992    	; 0x424 <LCD_WriteData>
	LCD_WriteData(0x30);      //Load row 2 data
 804:	80 e3       	ldi	r24, 0x30	; 48
 806:	0e de       	rcall	.-996    	; 0x424 <LCD_WriteData>
	LCD_WriteData(0x70);      //Load row 4 data
 808:	80 e7       	ldi	r24, 0x70	; 112
 80a:	0c de       	rcall	.-1000   	; 0x424 <LCD_WriteData>
	LCD_WriteData(0xFF);      //Load row 5 data
 80c:	8f ef       	ldi	r24, 0xFF	; 255
 80e:	0a de       	rcall	.-1004   	; 0x424 <LCD_WriteData>
	LCD_WriteData(0xFF);      //Load row 6 data
 810:	8f ef       	ldi	r24, 0xFF	; 255
 812:	08 de       	rcall	.-1008   	; 0x424 <LCD_WriteData>
	LCD_WriteData(0xFF);      //Load row 7 data
 814:	8f ef       	ldi	r24, 0xFF	; 255
 816:	06 de       	rcall	.-1012   	; 0x424 <LCD_WriteData>
	LCD_WriteData(0xFF);      //Load row 8 data
 818:	8f ef       	ldi	r24, 0xFF	; 255
 81a:	04 de       	rcall	.-1016   	; 0x424 <LCD_WriteData>
	LCD_WriteCommand(0x50);       //Load the location where we want to store
 81c:	80 e5       	ldi	r24, 0x50	; 80
 81e:	e2 dd       	rcall	.-1084   	; 0x3e4 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	00 de       	rcall	.-1024   	; 0x424 <LCD_WriteData>
	LCD_WriteData(0x00);      //Load row 1 data
 824:	80 e0       	ldi	r24, 0x00	; 0
 826:	fe dd       	rcall	.-1028   	; 0x424 <LCD_WriteData>
	LCD_WriteData(0x00);      //Load row 2 data
 828:	80 e0       	ldi	r24, 0x00	; 0
 82a:	fc dd       	rcall	.-1032   	; 0x424 <LCD_WriteData>
	LCD_WriteData(0x24);      //Load row 4 data
 82c:	84 e2       	ldi	r24, 0x24	; 36
 82e:	fa dd       	rcall	.-1036   	; 0x424 <LCD_WriteData>
	LCD_WriteData(0x00);      //Load row 5 data
 830:	80 e0       	ldi	r24, 0x00	; 0
 832:	f8 dd       	rcall	.-1040   	; 0x424 <LCD_WriteData>
	LCD_WriteData(0x42);      //Load row 6 data
 834:	82 e4       	ldi	r24, 0x42	; 66
 836:	f6 dd       	rcall	.-1044   	; 0x424 <LCD_WriteData>
	LCD_WriteData(0x24);      //Load row 7 data
 838:	84 e2       	ldi	r24, 0x24	; 36
 83a:	f4 dd       	rcall	.-1048   	; 0x424 <LCD_WriteData>
	LCD_WriteData(0x18);      //Load row 8 data
 83c:	88 e1       	ldi	r24, 0x18	; 24
 83e:	f2 dd       	rcall	.-1052   	; 0x424 <LCD_WriteData>
	LCD_WriteCommand(0x58);       //Load the location where we want to store
 840:	88 e5       	ldi	r24, 0x58	; 88
 842:	d0 dd       	rcall	.-1120   	; 0x3e4 <LCD_WriteCommand>
 844:	80 e0       	ldi	r24, 0x00	; 0
	LCD_WriteData(0x00);
 846:	ee dd       	rcall	.-1060   	; 0x424 <LCD_WriteData>
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	ec dd       	rcall	.-1064   	; 0x424 <LCD_WriteData>
	LCD_WriteData(0x00);      //Load row 1 data
 84c:	80 e0       	ldi	r24, 0x00	; 0
 84e:	ea dd       	rcall	.-1068   	; 0x424 <LCD_WriteData>
 850:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteData(0x00);      //Load row 2 data
 852:	e8 dd       	rcall	.-1072   	; 0x424 <LCD_WriteData>
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	e6 dd       	rcall	.-1076   	; 0x424 <LCD_WriteData>
	LCD_WriteData(0x02);      //Load row 4 data
 858:	84 e0       	ldi	r24, 0x04	; 4
 85a:	e4 dd       	rcall	.-1080   	; 0x424 <LCD_WriteData>
 85c:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteData(0x00);      //Load row 5 data
 85e:	e2 dd       	rcall	.-1084   	; 0x424 <LCD_WriteData>
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	e0 cd       	rjmp	.-1088   	; 0x424 <LCD_WriteData>
	LCD_WriteData(0x04);      //Load row 6 data
 864:	08 95       	ret

00000866 <main>:
 866:	cf 93       	push	r28
 868:	df 93       	push	r29
	LCD_WriteData(0x02);      //Load row 7 data
 86a:	cd b7       	in	r28, 0x3d	; 61
 86c:	de b7       	in	r29, 0x3e	; 62
 86e:	28 97       	sbiw	r28, 0x08	; 8
	LCD_WriteData(0x01);      //Load row 8 data
 870:	0f b6       	in	r0, 0x3f	; 63
 872:	f8 94       	cli
 874:	de bf       	out	0x3e, r29	; 62
 876:	0f be       	out	0x3f, r0	; 63




int main(void)
{
 878:	cd bf       	out	0x3d, r28	; 61
	sent = 0;
 87a:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <sent>
	received = 0;
 87e:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <received>
	
	READYTORECEIVE = 0;
 882:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <READYTORECEIVE>
	READYTOSEND = 0;
 886:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <READYTOSEND>
	
	UCSR0B |= (1 << RXEN0)  | (1 << TXEN0);
 88a:	e1 ec       	ldi	r30, 0xC1	; 193
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	80 81       	ld	r24, Z
 890:	88 61       	ori	r24, 0x18	; 24
 892:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 894:	e2 ec       	ldi	r30, 0xC2	; 194
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	80 81       	ld	r24, Z
 89a:	86 60       	ori	r24, 0x06	; 6
 89c:	80 83       	st	Z, r24
	UBRR0L = BAUD_PRESCALE;
 89e:	83 e3       	ldi	r24, 0x33	; 51
 8a0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR0H = (BAUD_PRESCALE >> 8);
 8a4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	
	//eeprom_update_block("Hello world", (void *)1, 12);
	eeprom_read_block(MSG2, 0x01, 12);
 8a8:	4c e0       	ldi	r20, 0x0C	; 12
 8aa:	50 e0       	ldi	r21, 0x00	; 0
 8ac:	61 e0       	ldi	r22, 0x01	; 1
 8ae:	70 e0       	ldi	r23, 0x00	; 0
 8b0:	82 e2       	ldi	r24, 0x22	; 34
 8b2:	91 e0       	ldi	r25, 0x01	; 1
 8b4:	c0 d0       	rcall	.+384    	; 0xa36 <eeprom_read_block>
	
	up = 1;
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <up>
	t = 0;
 8bc:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <t>
	keyChar = 0x00;
 8c0:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <keyChar>
	MSGSPOT = 0;
 8c4:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <MSGSPOT+0x1>
 8c8:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <MSGSPOT>
	MSGSIZE = 0;
 8cc:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <MSGSIZE>
	
	DDRD = 0xAA; PORTD = 0x55;
 8d0:	8a ea       	ldi	r24, 0xAA	; 170
 8d2:	8a b9       	out	0x0a, r24	; 10
 8d4:	85 e5       	ldi	r24, 0x55	; 85
 8d6:	8b b9       	out	0x0b, r24	; 11
	DDRC = 0xFF; PORTC = 0x00;
 8d8:	8f ef       	ldi	r24, 0xFF	; 255
 8da:	87 b9       	out	0x07, r24	; 7
 8dc:	18 b8       	out	0x08, r1	; 8
	DDRB = 0xFF; PORTB = 0x00;
 8de:	84 b9       	out	0x04, r24	; 4
 8e0:	15 b8       	out	0x05, r1	; 5
	DDRA = 0x00; PORTA = 0xFF;//Joystick input.
 8e2:	11 b8       	out	0x01, r1	; 1
 8e4:	82 b9       	out	0x02, r24	; 2
	
	ADMUX |= (1 << REFS0);//setting the reference of ADC
 8e6:	ec e7       	ldi	r30, 0x7C	; 124
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	90 81       	ld	r25, Z
 8ec:	90 64       	ori	r25, 0x40	; 64
 8ee:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADPS0) | (1<ADPS1)| (1<ADPS2) | (1<<ADEN) ;
 8f0:	ea e7       	ldi	r30, 0x7A	; 122
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	90 81       	ld	r25, Z
 8f6:	91 68       	ori	r25, 0x81	; 129
 8f8:	90 83       	st	Z, r25
	static task task1, task2, task3, task4;
	task *tasks[] = { &task1, &task2, &task3, &task4};
 8fa:	98 e0       	ldi	r25, 0x08	; 8
 8fc:	e8 e4       	ldi	r30, 0x48	; 72
 8fe:	f1 e0       	ldi	r31, 0x01	; 1
 900:	de 01       	movw	r26, r28
 902:	11 96       	adiw	r26, 0x01	; 1
 904:	01 90       	ld	r0, Z+
 906:	0d 92       	st	X+, r0
 908:	9a 95       	dec	r25
 90a:	e1 f7       	brne	.-8      	; 0x904 <main+0x9e>
	//task1 init
	task1.state = -1;
 90c:	e1 e7       	ldi	r30, 0x71	; 113
 90e:	f1 e0       	ldi	r31, 0x01	; 1
 910:	80 83       	st	Z, r24
	task1.period = 40;
 912:	48 e2       	ldi	r20, 0x28	; 40
 914:	50 e0       	ldi	r21, 0x00	; 0
 916:	60 e0       	ldi	r22, 0x00	; 0
 918:	70 e0       	ldi	r23, 0x00	; 0
 91a:	41 83       	std	Z+1, r20	; 0x01
 91c:	52 83       	std	Z+2, r21	; 0x02
 91e:	63 83       	std	Z+3, r22	; 0x03
 920:	74 83       	std	Z+4, r23	; 0x04
	task1.elapsedTime = 40;
 922:	45 83       	std	Z+5, r20	; 0x05
 924:	56 83       	std	Z+6, r21	; 0x06
 926:	67 83       	std	Z+7, r22	; 0x07
 928:	70 87       	std	Z+8, r23	; 0x08
	task1.TickFct = &KeyBoardTick;
 92a:	24 e6       	ldi	r18, 0x64	; 100
 92c:	30 e0       	ldi	r19, 0x00	; 0
 92e:	32 87       	std	Z+10, r19	; 0x0a
 930:	21 87       	std	Z+9, r18	; 0x09
	
	task2.state = -1;
 932:	e6 e6       	ldi	r30, 0x66	; 102
 934:	f1 e0       	ldi	r31, 0x01	; 1
 936:	80 83       	st	Z, r24
	task2.period = 20;
 938:	44 e1       	ldi	r20, 0x14	; 20
 93a:	50 e0       	ldi	r21, 0x00	; 0
 93c:	60 e0       	ldi	r22, 0x00	; 0
 93e:	70 e0       	ldi	r23, 0x00	; 0
 940:	41 83       	std	Z+1, r20	; 0x01
 942:	52 83       	std	Z+2, r21	; 0x02
 944:	63 83       	std	Z+3, r22	; 0x03
 946:	74 83       	std	Z+4, r23	; 0x04
	task2.elapsedTime = 20;
 948:	45 83       	std	Z+5, r20	; 0x05
 94a:	56 83       	std	Z+6, r21	; 0x06
 94c:	67 83       	std	Z+7, r22	; 0x07
 94e:	70 87       	std	Z+8, r23	; 0x08
	task2.TickFct = &JoyStickTick;
 950:	23 e0       	ldi	r18, 0x03	; 3
 952:	31 e0       	ldi	r19, 0x01	; 1
 954:	32 87       	std	Z+10, r19	; 0x0a
 956:	21 87       	std	Z+9, r18	; 0x09
	
	task3.state = -1;
 958:	eb e5       	ldi	r30, 0x5B	; 91
 95a:	f1 e0       	ldi	r31, 0x01	; 1
 95c:	80 83       	st	Z, r24
	task3.period = 200;
 95e:	08 ec       	ldi	r16, 0xC8	; 200
 960:	10 e0       	ldi	r17, 0x00	; 0
 962:	20 e0       	ldi	r18, 0x00	; 0
 964:	30 e0       	ldi	r19, 0x00	; 0
 966:	01 83       	std	Z+1, r16	; 0x01
 968:	12 83       	std	Z+2, r17	; 0x02
 96a:	23 83       	std	Z+3, r18	; 0x03
 96c:	34 83       	std	Z+4, r19	; 0x04
	task3.elapsedTime = 200;
 96e:	05 83       	std	Z+5, r16	; 0x05
 970:	16 83       	std	Z+6, r17	; 0x06
 972:	27 83       	std	Z+7, r18	; 0x07
 974:	30 87       	std	Z+8, r19	; 0x08
	task3.TickFct = &LCDTICK;
 976:	20 e3       	ldi	r18, 0x30	; 48
 978:	32 e0       	ldi	r19, 0x02	; 2
 97a:	32 87       	std	Z+10, r19	; 0x0a
 97c:	21 87       	std	Z+9, r18	; 0x09
	
	task4.state = -1;
 97e:	e0 e5       	ldi	r30, 0x50	; 80
 980:	f1 e0       	ldi	r31, 0x01	; 1
 982:	80 83       	st	Z, r24
	task4.period = 20;
 984:	41 83       	std	Z+1, r20	; 0x01
 986:	52 83       	std	Z+2, r21	; 0x02
 988:	63 83       	std	Z+3, r22	; 0x03
 98a:	74 83       	std	Z+4, r23	; 0x04
	task4.elapsedTime = 20;
 98c:	45 83       	std	Z+5, r20	; 0x05
 98e:	56 83       	std	Z+6, r21	; 0x06
 990:	67 83       	std	Z+7, r22	; 0x07
 992:	70 87       	std	Z+8, r23	; 0x08
	task4.TickFct = &USARTTICK;
 994:	87 ea       	ldi	r24, 0xA7	; 167
 996:	93 e0       	ldi	r25, 0x03	; 3
 998:	92 87       	std	Z+10, r25	; 0x0a
 99a:	81 87       	std	Z+9, r24	; 0x09
	
	TimerSet(20);
 99c:	64 e1       	ldi	r22, 0x14	; 20
 99e:	70 e0       	ldi	r23, 0x00	; 0
 9a0:	80 e0       	ldi	r24, 0x00	; 0
 9a2:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 9a4:	9b dc       	rcall	.-1738   	; 0x2dc <TimerSet>
	LCD_init();
 9a6:	ab dc       	rcall	.-1706   	; 0x2fe <TimerOn>
	LCD_build();
 9a8:	2e dd       	rcall	.-1444   	; 0x406 <LCD_init>
 9aa:	26 df       	rcall	.-436    	; 0x7f8 <LCD_build>
	LCD_Cursor(0);
 9ac:	80 e0       	ldi	r24, 0x00	; 0
 9ae:	23 dd       	rcall	.-1466   	; 0x3f6 <LCD_Cursor>
 9b0:	7e 01       	movw	r14, r28
 9b2:	89 e0       	ldi	r24, 0x09	; 9
 9b4:	e8 0e       	add	r14, r24
 9b6:	f1 1c       	adc	r15, r1
 9b8:	de 01       	movw	r26, r28
 9ba:	11 96       	adiw	r26, 0x01	; 1
 9bc:	6d 01       	movw	r12, r26
 9be:	f6 01       	movw	r30, r12
	while(1)
	{
		
		for ( unsigned i = 0; i < 4; i++ ) {
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 9c0:	01 91       	ld	r16, Z+
 9c2:	11 91       	ld	r17, Z+
 9c4:	6f 01       	movw	r12, r30
 9c6:	d8 01       	movw	r26, r16
 9c8:	15 96       	adiw	r26, 0x05	; 5
 9ca:	4d 91       	ld	r20, X+
 9cc:	5d 91       	ld	r21, X+
 9ce:	6d 91       	ld	r22, X+
 9d0:	7c 91       	ld	r23, X
 9d2:	18 97       	sbiw	r26, 0x08	; 8
 9d4:	11 96       	adiw	r26, 0x01	; 1
 9d6:	8d 91       	ld	r24, X+
 9d8:	9d 91       	ld	r25, X+
 9da:	0d 90       	ld	r0, X+
 9dc:	bc 91       	ld	r27, X
 9de:	a0 2d       	mov	r26, r0
 9e0:	48 17       	cp	r20, r24
 9e2:	59 07       	cpc	r21, r25
 9e4:	6a 07       	cpc	r22, r26
 9e6:	7b 07       	cpc	r23, r27
 9e8:	81 f4       	brne	.+32     	; 0xa0a <main+0x1a4>
 9ea:	f8 01       	movw	r30, r16
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 9ec:	80 81       	ld	r24, Z
 9ee:	01 84       	ldd	r0, Z+9	; 0x09
 9f0:	f2 85       	ldd	r31, Z+10	; 0x0a
 9f2:	e0 2d       	mov	r30, r0
 9f4:	08 2e       	mov	r0, r24
 9f6:	00 0c       	add	r0, r0
 9f8:	99 0b       	sbc	r25, r25
 9fa:	09 95       	icall
 9fc:	d8 01       	movw	r26, r16
 9fe:	8c 93       	st	X, r24
 a00:	f8 01       	movw	r30, r16
				tasks[i]->elapsedTime = 0;
 a02:	15 82       	std	Z+5, r1	; 0x05
 a04:	16 82       	std	Z+6, r1	; 0x06
 a06:	17 82       	std	Z+7, r1	; 0x07
 a08:	10 86       	std	Z+8, r1	; 0x08
 a0a:	f8 01       	movw	r30, r16
			}
			tasks[i]->elapsedTime += 20;
 a0c:	85 81       	ldd	r24, Z+5	; 0x05
 a0e:	96 81       	ldd	r25, Z+6	; 0x06
 a10:	a7 81       	ldd	r26, Z+7	; 0x07
 a12:	b0 85       	ldd	r27, Z+8	; 0x08
 a14:	44 96       	adiw	r24, 0x14	; 20
 a16:	a1 1d       	adc	r26, r1
 a18:	b1 1d       	adc	r27, r1
 a1a:	85 83       	std	Z+5, r24	; 0x05
 a1c:	96 83       	std	Z+6, r25	; 0x06
 a1e:	a7 83       	std	Z+7, r26	; 0x07
 a20:	b0 87       	std	Z+8, r27	; 0x08
 a22:	ce 14       	cp	r12, r14
	LCD_build();
	LCD_Cursor(0);
	while(1)
	{
		
		for ( unsigned i = 0; i < 4; i++ ) {
 a24:	df 04       	cpc	r13, r15
 a26:	59 f6       	brne	.-106    	; 0x9be <main+0x158>
 a28:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <TimerFlag>
			}
			tasks[i]->elapsedTime += 20;
		}
	
		//Remember to add timer to code
		while(!TimerFlag);
 a2c:	88 23       	and	r24, r24
 a2e:	e1 f3       	breq	.-8      	; 0xa28 <main+0x1c2>
 a30:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <TimerFlag>
		TimerFlag = 0;
 a34:	c1 cf       	rjmp	.-126    	; 0x9b8 <main+0x152>

00000a36 <eeprom_read_block>:
 a36:	dc 01       	movw	r26, r24
 a38:	cb 01       	movw	r24, r22

00000a3a <eeprom_read_blraw>:
 a3a:	fc 01       	movw	r30, r24
 a3c:	f9 99       	sbic	0x1f, 1	; 31
 a3e:	fe cf       	rjmp	.-4      	; 0xa3c <eeprom_read_blraw+0x2>
 a40:	06 c0       	rjmp	.+12     	; 0xa4e <eeprom_read_blraw+0x14>
 a42:	f2 bd       	out	0x22, r31	; 34
 a44:	e1 bd       	out	0x21, r30	; 33
 a46:	f8 9a       	sbi	0x1f, 0	; 31
 a48:	31 96       	adiw	r30, 0x01	; 1
 a4a:	00 b4       	in	r0, 0x20	; 32
 a4c:	0d 92       	st	X+, r0
 a4e:	41 50       	subi	r20, 0x01	; 1
 a50:	50 40       	sbci	r21, 0x00	; 0
 a52:	b8 f7       	brcc	.-18     	; 0xa42 <eeprom_read_blraw+0x8>
 a54:	08 95       	ret

00000a56 <eeprom_update_block>:
 a56:	dc 01       	movw	r26, r24
 a58:	a4 0f       	add	r26, r20
 a5a:	b5 1f       	adc	r27, r21
 a5c:	41 50       	subi	r20, 0x01	; 1
 a5e:	50 40       	sbci	r21, 0x00	; 0
 a60:	40 f0       	brcs	.+16     	; 0xa72 <eeprom_update_block+0x1c>
 a62:	cb 01       	movw	r24, r22
 a64:	84 0f       	add	r24, r20
 a66:	95 1f       	adc	r25, r21
 a68:	2e 91       	ld	r18, -X
 a6a:	05 d0       	rcall	.+10     	; 0xa76 <eeprom_update_r18>
 a6c:	41 50       	subi	r20, 0x01	; 1
 a6e:	50 40       	sbci	r21, 0x00	; 0
 a70:	d8 f7       	brcc	.-10     	; 0xa68 <eeprom_update_block+0x12>
 a72:	08 95       	ret

00000a74 <eeprom_update_byte>:
 a74:	26 2f       	mov	r18, r22

00000a76 <eeprom_update_r18>:
 a76:	f9 99       	sbic	0x1f, 1	; 31
 a78:	fe cf       	rjmp	.-4      	; 0xa76 <eeprom_update_r18>
 a7a:	92 bd       	out	0x22, r25	; 34
 a7c:	81 bd       	out	0x21, r24	; 33
 a7e:	f8 9a       	sbi	0x1f, 0	; 31
 a80:	01 97       	sbiw	r24, 0x01	; 1
 a82:	00 b4       	in	r0, 0x20	; 32
 a84:	02 16       	cp	r0, r18
 a86:	39 f0       	breq	.+14     	; 0xa96 <eeprom_update_r18+0x20>
 a88:	1f ba       	out	0x1f, r1	; 31
 a8a:	20 bd       	out	0x20, r18	; 32
 a8c:	0f b6       	in	r0, 0x3f	; 63
 a8e:	f8 94       	cli
 a90:	fa 9a       	sbi	0x1f, 2	; 31
 a92:	f9 9a       	sbi	0x1f, 1	; 31
 a94:	0f be       	out	0x3f, r0	; 63
 a96:	08 95       	ret

00000a98 <_exit>:
 a98:	f8 94       	cli

00000a9a <__stop_program>:
 a9a:	ff cf       	rjmp	.-2      	; 0xa9a <__stop_program>
