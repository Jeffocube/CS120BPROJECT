
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00000abe  00000b52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000abe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  00800150  00800150  00000ba2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ba2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000c18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001756  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a18  00000000  00000000  00002486  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e58  00000000  00000000  00002e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00003cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ee  00000000  00000000  00003eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e5  00000000  00000000  0000459e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004d83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	94 c1       	rjmp	.+808    	; 0x35e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee eb       	ldi	r30, 0xBE	; 190
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 35       	cpi	r26, 0x50	; 80
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e5       	ldi	r26, 0x50	; 80
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 39       	cpi	r26, 0x9C	; 156
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d2 d3       	rcall	.+1956   	; 0x868 <main>
  c4:	fa c4       	rjmp	.+2548   	; 0xaba <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <KeyBoardTick>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
  c8:	e0 91 7d 01 	lds	r30, 0x017D	; 0x80017d <t>
  cc:	e0 31       	cpi	r30, 0x10	; 16
  ce:	08 f0       	brcs	.+2      	; 0xd2 <KeyBoardTick+0xa>
  d0:	99 c0       	rjmp	.+306    	; 0x204 <KeyBoardTick+0x13c>
  d2:	82 30       	cpi	r24, 0x02	; 2
  d4:	91 05       	cpc	r25, r1
  d6:	09 f4       	brne	.+2      	; 0xda <KeyBoardTick+0x12>
  d8:	6a c0       	rjmp	.+212    	; 0x1ae <KeyBoardTick+0xe6>
  da:	34 f4       	brge	.+12     	; 0xe8 <KeyBoardTick+0x20>
  dc:	00 97       	sbiw	r24, 0x00	; 0
  de:	79 f0       	breq	.+30     	; 0xfe <KeyBoardTick+0x36>
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	09 f4       	brne	.+2      	; 0xe6 <KeyBoardTick+0x1e>
  e4:	5a c0       	rjmp	.+180    	; 0x19a <KeyBoardTick+0xd2>
  e6:	81 c0       	rjmp	.+258    	; 0x1ea <KeyBoardTick+0x122>
  e8:	84 30       	cpi	r24, 0x04	; 4
  ea:	91 05       	cpc	r25, r1
  ec:	09 f4       	brne	.+2      	; 0xf0 <KeyBoardTick+0x28>
  ee:	6f c0       	rjmp	.+222    	; 0x1ce <KeyBoardTick+0x106>
  f0:	0c f4       	brge	.+2      	; 0xf4 <KeyBoardTick+0x2c>
  f2:	64 c0       	rjmp	.+200    	; 0x1bc <KeyBoardTick+0xf4>
  f4:	85 30       	cpi	r24, 0x05	; 5
  f6:	91 05       	cpc	r25, r1
  f8:	09 f4       	brne	.+2      	; 0xfc <KeyBoardTick+0x34>
  fa:	70 c0       	rjmp	.+224    	; 0x1dc <KeyBoardTick+0x114>
  fc:	76 c0       	rjmp	.+236    	; 0x1ea <KeyBoardTick+0x122>
  fe:	20 b1       	in	r18, 0x00	; 0
 100:	20 7f       	andi	r18, 0xF0	; 240
 102:	20 37       	cpi	r18, 0x70	; 112
 104:	49 f4       	brne	.+18     	; 0x118 <KeyBoardTick+0x50>
 106:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <keyChar>
 10a:	88 0f       	add	r24, r24
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <keyChar>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	6b c0       	rjmp	.+214    	; 0x1ee <KeyBoardTick+0x126>
 118:	20 b1       	in	r18, 0x00	; 0
 11a:	20 7f       	andi	r18, 0xF0	; 240
 11c:	20 3b       	cpi	r18, 0xB0	; 176
 11e:	41 f4       	brne	.+16     	; 0x130 <KeyBoardTick+0x68>
 120:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <keyChar>
 124:	88 0f       	add	r24, r24
 126:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <keyChar>
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	5f c0       	rjmp	.+190    	; 0x1ee <KeyBoardTick+0x126>
 130:	20 b1       	in	r18, 0x00	; 0
 132:	20 7f       	andi	r18, 0xF0	; 240
 134:	20 3d       	cpi	r18, 0xD0	; 208
 136:	a9 f4       	brne	.+42     	; 0x162 <KeyBoardTick+0x9a>
 138:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <keyChar>
 13c:	81 11       	cpse	r24, r1
 13e:	06 c0       	rjmp	.+12     	; 0x14c <KeyBoardTick+0x84>
 140:	ae 2f       	mov	r26, r30
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	ad 5c       	subi	r26, 0xCD	; 205
 146:	be 4f       	sbci	r27, 0xFE	; 254
 148:	80 e2       	ldi	r24, 0x20	; 32
 14a:	8c 93       	st	X, r24
 14c:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <keyChar>
 150:	eb 30       	cpi	r30, 0x0B	; 11
 152:	08 f0       	brcs	.+2      	; 0x156 <KeyBoardTick+0x8e>
 154:	55 c0       	rjmp	.+170    	; 0x200 <KeyBoardTick+0x138>
 156:	ef 5f       	subi	r30, 0xFF	; 255
 158:	e0 93 7d 01 	sts	0x017D, r30	; 0x80017d <t>
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	08 95       	ret
 162:	20 b1       	in	r18, 0x00	; 0
 164:	20 7f       	andi	r18, 0xF0	; 240
 166:	20 3e       	cpi	r18, 0xE0	; 224
 168:	51 f4       	brne	.+20     	; 0x17e <KeyBoardTick+0xb6>
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <READYTOSEND>
 170:	91 11       	cpse	r25, r1
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <READYTOSEND>
 178:	84 e0       	ldi	r24, 0x04	; 4
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	38 c0       	rjmp	.+112    	; 0x1ee <KeyBoardTick+0x126>
 17e:	20 b1       	in	r18, 0x00	; 0
 180:	28 7f       	andi	r18, 0xF8	; 248
 182:	20 3f       	cpi	r18, 0xF0	; 240
 184:	a1 f5       	brne	.+104    	; 0x1ee <KeyBoardTick+0x126>
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <READYTORECEIVE>
 18c:	91 11       	cpse	r25, r1
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <READYTORECEIVE>
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	2a c0       	rjmp	.+84     	; 0x1ee <KeyBoardTick+0x126>
 19a:	80 b1       	in	r24, 0x00	; 0
 19c:	80 7f       	andi	r24, 0xF0	; 240
 19e:	31 e0       	ldi	r19, 0x01	; 1
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	80 37       	cpi	r24, 0x70	; 112
 1a4:	09 f0       	breq	.+2      	; 0x1a8 <KeyBoardTick+0xe0>
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	83 2f       	mov	r24, r19
 1aa:	92 2f       	mov	r25, r18
 1ac:	20 c0       	rjmp	.+64     	; 0x1ee <KeyBoardTick+0x126>
 1ae:	20 b1       	in	r18, 0x00	; 0
 1b0:	20 7f       	andi	r18, 0xF0	; 240
 1b2:	20 3b       	cpi	r18, 0xB0	; 176
 1b4:	e1 f0       	breq	.+56     	; 0x1ee <KeyBoardTick+0x126>
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	19 c0       	rjmp	.+50     	; 0x1ee <KeyBoardTick+0x126>
 1bc:	20 b1       	in	r18, 0x00	; 0
 1be:	20 7f       	andi	r18, 0xF0	; 240
 1c0:	20 3d       	cpi	r18, 0xD0	; 208
 1c2:	a9 f0       	breq	.+42     	; 0x1ee <KeyBoardTick+0x126>
 1c4:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <keyChar>
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	08 95       	ret
 1ce:	20 b1       	in	r18, 0x00	; 0
 1d0:	20 7f       	andi	r18, 0xF0	; 240
 1d2:	20 3e       	cpi	r18, 0xE0	; 224
 1d4:	61 f0       	breq	.+24     	; 0x1ee <KeyBoardTick+0x126>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	09 c0       	rjmp	.+18     	; 0x1ee <KeyBoardTick+0x126>
 1dc:	20 b1       	in	r18, 0x00	; 0
 1de:	28 7f       	andi	r18, 0xF8	; 248
 1e0:	20 3f       	cpi	r18, 0xF0	; 240
 1e2:	29 f0       	breq	.+10     	; 0x1ee <KeyBoardTick+0x126>
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <KeyBoardTick+0x126>
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <keyChar>
 1f2:	22 23       	and	r18, r18
 1f4:	39 f0       	breq	.+14     	; 0x204 <KeyBoardTick+0x13c>
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	ed 5c       	subi	r30, 0xCD	; 205
 1fa:	fe 4f       	sbci	r31, 0xFE	; 254
 1fc:	20 83       	st	Z, r18
 1fe:	08 95       	ret
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	08 95       	ret

00000206 <JoyStickTick>:
 206:	bc 01       	movw	r22, r24
 208:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <joyRight2>
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	11 f4       	brne	.+4      	; 0x214 <JoyStickTick+0xe>
 210:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <joyRight>
 214:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <joyLeft2>
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	11 f4       	brne	.+4      	; 0x220 <JoyStickTick+0x1a>
 21c:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <joyLeft>
 220:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 224:	90 34       	cpi	r25, 0x40	; 64
 226:	19 f0       	breq	.+6      	; 0x22e <JoyStickTick+0x28>
 228:	91 34       	cpi	r25, 0x41	; 65
 22a:	b9 f0       	breq	.+46     	; 0x25a <JoyStickTick+0x54>
 22c:	2b c0       	rjmp	.+86     	; 0x284 <JoyStickTick+0x7e>
 22e:	ea e7       	ldi	r30, 0x7A	; 122
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	80 64       	ori	r24, 0x40	; 64
 236:	80 83       	st	Z, r24
 238:	90 81       	ld	r25, Z
 23a:	94 ff       	sbrs	r25, 4
 23c:	fd cf       	rjmp	.-6      	; 0x238 <JoyStickTick+0x32>
 23e:	e8 e7       	ldi	r30, 0x78	; 120
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	91 81       	ldd	r25, Z+1	; 0x01
 246:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <horiz+0x1>
 24a:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <horiz>
 24e:	11 82       	std	Z+1, r1	; 0x01
 250:	10 82       	st	Z, r1
 252:	81 e4       	ldi	r24, 0x41	; 65
 254:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 258:	15 c0       	rjmp	.+42     	; 0x284 <JoyStickTick+0x7e>
 25a:	ea e7       	ldi	r30, 0x7A	; 122
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	80 64       	ori	r24, 0x40	; 64
 262:	80 83       	st	Z, r24
 264:	90 81       	ld	r25, Z
 266:	94 ff       	sbrs	r25, 4
 268:	fd cf       	rjmp	.-6      	; 0x264 <JoyStickTick+0x5e>
 26a:	e8 e7       	ldi	r30, 0x78	; 120
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	91 81       	ldd	r25, Z+1	; 0x01
 272:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <vert+0x1>
 276:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <vert>
 27a:	11 82       	std	Z+1, r1	; 0x01
 27c:	10 82       	st	Z, r1
 27e:	80 e4       	ldi	r24, 0x40	; 64
 280:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 284:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <horiz>
 288:	30 91 92 01 	lds	r19, 0x0192	; 0x800192 <horiz+0x1>
 28c:	25 33       	cpi	r18, 0x35	; 53
 28e:	83 e0       	ldi	r24, 0x03	; 3
 290:	38 07       	cpc	r19, r24
 292:	1c f0       	brlt	.+6      	; 0x29a <JoyStickTick+0x94>
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <joyRight>
 29a:	20 34       	cpi	r18, 0x40	; 64
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	38 07       	cpc	r19, r24
 2a0:	1c f4       	brge	.+6      	; 0x2a8 <JoyStickTick+0xa2>
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <joyLeft>
 2a8:	40 91 83 01 	lds	r20, 0x0183	; 0x800183 <vert>
 2ac:	50 91 84 01 	lds	r21, 0x0184	; 0x800184 <vert+0x1>
 2b0:	45 33       	cpi	r20, 0x35	; 53
 2b2:	83 e0       	ldi	r24, 0x03	; 3
 2b4:	58 07       	cpc	r21, r24
 2b6:	1c f0       	brlt	.+6      	; 0x2be <JoyStickTick+0xb8>
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <joyUp>
 2be:	40 34       	cpi	r20, 0x40	; 64
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	58 07       	cpc	r21, r24
 2c4:	1c f4       	brge	.+6      	; 0x2cc <JoyStickTick+0xc6>
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <joyDown>
 2cc:	44 5a       	subi	r20, 0xA4	; 164
 2ce:	51 40       	sbci	r21, 0x01	; 1
 2d0:	49 3c       	cpi	r20, 0xC9	; 201
 2d2:	51 05       	cpc	r21, r1
 2d4:	20 f4       	brcc	.+8      	; 0x2de <JoyStickTick+0xd8>
 2d6:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <joyUp>
 2da:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <joyDown>
 2de:	24 5a       	subi	r18, 0xA4	; 164
 2e0:	31 40       	sbci	r19, 0x01	; 1
 2e2:	29 3c       	cpi	r18, 0xC9	; 201
 2e4:	31 05       	cpc	r19, r1
 2e6:	20 f4       	brcc	.+8      	; 0x2f0 <JoyStickTick+0xea>
 2e8:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <joyLeft>
 2ec:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <joyRight>
 2f0:	cb 01       	movw	r24, r22
 2f2:	08 95       	ret

000002f4 <TimerSet>:
 2f4:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <_avr_timer_M>
 2f8:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <_avr_timer_M+0x1>
 2fc:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <_avr_timer_M+0x2>
 300:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <_avr_timer_M+0x3>
 304:	60 93 7e 01 	sts	0x017E, r22	; 0x80017e <_avr_timer_cntcurr>
 308:	70 93 7f 01 	sts	0x017F, r23	; 0x80017f <_avr_timer_cntcurr+0x1>
 30c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_avr_timer_cntcurr+0x2>
 310:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_avr_timer_cntcurr+0x3>
 314:	08 95       	ret

00000316 <TimerOn>:
 316:	8b e0       	ldi	r24, 0x0B	; 11
 318:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 31c:	8d e7       	ldi	r24, 0x7D	; 125
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 324:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 32e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 332:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 336:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_avr_timer_M>
 33a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <_avr_timer_M+0x1>
 33e:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <_avr_timer_M+0x2>
 342:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <_avr_timer_M+0x3>
 346:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <_avr_timer_cntcurr>
 34a:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <_avr_timer_cntcurr+0x1>
 34e:	a0 93 80 01 	sts	0x0180, r26	; 0x800180 <_avr_timer_cntcurr+0x2>
 352:	b0 93 81 01 	sts	0x0181, r27	; 0x800181 <_avr_timer_cntcurr+0x3>
 356:	8f b7       	in	r24, 0x3f	; 63
 358:	80 68       	ori	r24, 0x80	; 128
 35a:	8f bf       	out	0x3f, r24	; 63
 35c:	08 95       	ret

0000035e <__vector_13>:
 35e:	1f 92       	push	r1
 360:	0f 92       	push	r0
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	0f 92       	push	r0
 366:	11 24       	eor	r1, r1
 368:	8f 93       	push	r24
 36a:	9f 93       	push	r25
 36c:	af 93       	push	r26
 36e:	bf 93       	push	r27
 370:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <_avr_timer_cntcurr>
 374:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <_avr_timer_cntcurr+0x1>
 378:	a0 91 80 01 	lds	r26, 0x0180	; 0x800180 <_avr_timer_cntcurr+0x2>
 37c:	b0 91 81 01 	lds	r27, 0x0181	; 0x800181 <_avr_timer_cntcurr+0x3>
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	a1 09       	sbc	r26, r1
 384:	b1 09       	sbc	r27, r1
 386:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <_avr_timer_cntcurr>
 38a:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <_avr_timer_cntcurr+0x1>
 38e:	a0 93 80 01 	sts	0x0180, r26	; 0x800180 <_avr_timer_cntcurr+0x2>
 392:	b0 93 81 01 	sts	0x0181, r27	; 0x800181 <_avr_timer_cntcurr+0x3>
 396:	89 2b       	or	r24, r25
 398:	8a 2b       	or	r24, r26
 39a:	8b 2b       	or	r24, r27
 39c:	99 f4       	brne	.+38     	; 0x3c4 <__vector_13+0x66>
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <TimerFlag>
 3a4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_avr_timer_M>
 3a8:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <_avr_timer_M+0x1>
 3ac:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <_avr_timer_M+0x2>
 3b0:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <_avr_timer_M+0x3>
 3b4:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <_avr_timer_cntcurr>
 3b8:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <_avr_timer_cntcurr+0x1>
 3bc:	a0 93 80 01 	sts	0x0180, r26	; 0x800180 <_avr_timer_cntcurr+0x2>
 3c0:	b0 93 81 01 	sts	0x0181, r27	; 0x800181 <_avr_timer_cntcurr+0x3>
 3c4:	bf 91       	pop	r27
 3c6:	af 91       	pop	r26
 3c8:	9f 91       	pop	r25
 3ca:	8f 91       	pop	r24
 3cc:	0f 90       	pop	r0
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	0f 90       	pop	r0
 3d2:	1f 90       	pop	r1
 3d4:	18 95       	reti

000003d6 <delay_ms>:
 3d6:	18 16       	cp	r1, r24
 3d8:	19 06       	cpc	r1, r25
 3da:	5c f0       	brlt	.+22     	; 0x3f2 <delay_ms+0x1c>
 3dc:	08 95       	ret
 3de:	00 00       	nop
 3e0:	21 50       	subi	r18, 0x01	; 1
 3e2:	31 09       	sbc	r19, r1
 3e4:	e1 f7       	brne	.-8      	; 0x3de <delay_ms+0x8>
 3e6:	4f 5f       	subi	r20, 0xFF	; 255
 3e8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ea:	84 17       	cp	r24, r20
 3ec:	95 07       	cpc	r25, r21
 3ee:	19 f4       	brne	.+6      	; 0x3f6 <delay_ms+0x20>
 3f0:	08 95       	ret
 3f2:	40 e0       	ldi	r20, 0x00	; 0
 3f4:	50 e0       	ldi	r21, 0x00	; 0
 3f6:	27 e0       	ldi	r18, 0x07	; 7
 3f8:	33 e0       	ldi	r19, 0x03	; 3
 3fa:	f1 cf       	rjmp	.-30     	; 0x3de <delay_ms+0x8>

000003fc <LCD_WriteCommand>:
 3fc:	2e 98       	cbi	0x05, 6	; 5
 3fe:	88 b9       	out	0x08, r24	; 8
 400:	2f 9a       	sbi	0x05, 7	; 5
 402:	00 00       	nop
 404:	2f 98       	cbi	0x05, 7	; 5
 406:	82 e0       	ldi	r24, 0x02	; 2
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	e5 cf       	rjmp	.-54     	; 0x3d6 <delay_ms>
 40c:	08 95       	ret

0000040e <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 40e:	81 31       	cpi	r24, 0x11	; 17
 410:	18 f4       	brcc	.+6      	; 0x418 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 412:	81 58       	subi	r24, 0x81	; 129
 414:	f3 cf       	rjmp	.-26     	; 0x3fc <LCD_WriteCommand>
 416:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 418:	81 55       	subi	r24, 0x51	; 81
 41a:	f0 cf       	rjmp	.-32     	; 0x3fc <LCD_WriteCommand>
 41c:	08 95       	ret

0000041e <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 41e:	84 e6       	ldi	r24, 0x64	; 100
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	d9 df       	rcall	.-78     	; 0x3d6 <delay_ms>
	LCD_WriteCommand(0x38);
 424:	88 e3       	ldi	r24, 0x38	; 56
 426:	ea df       	rcall	.-44     	; 0x3fc <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 428:	86 e0       	ldi	r24, 0x06	; 6
 42a:	e8 df       	rcall	.-48     	; 0x3fc <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 42c:	8f e0       	ldi	r24, 0x0F	; 15
 42e:	e6 df       	rcall	.-52     	; 0x3fc <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	e4 df       	rcall	.-56     	; 0x3fc <LCD_WriteCommand>
	delay_ms(10);						 
 434:	8a e0       	ldi	r24, 0x0A	; 10
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	ce cf       	rjmp	.-100    	; 0x3d6 <delay_ms>
 43a:	08 95       	ret

0000043c <LCD_WriteData>:
 43c:	2e 9a       	sbi	0x05, 6	; 5
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 43e:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 440:	2f 9a       	sbi	0x05, 7	; 5
   asm("nop");
 442:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 444:	2f 98       	cbi	0x05, 7	; 5
   delay_ms(1);
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	c5 cf       	rjmp	.-118    	; 0x3d6 <delay_ms>
 44c:	08 95       	ret

0000044e <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, char* string) {
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
   //LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 454:	fb 01       	movw	r30, r22
 456:	90 81       	ld	r25, Z
 458:	99 23       	and	r25, r25
 45a:	51 f0       	breq	.+20     	; 0x470 <LCD_DisplayString+0x22>
 45c:	eb 01       	movw	r28, r22
      LCD_Cursor(c++);
 45e:	11 e0       	ldi	r17, 0x01	; 1
 460:	18 0f       	add	r17, r24
 462:	d5 df       	rcall	.-86     	; 0x40e <LCD_Cursor>
      LCD_WriteData(*string++);
 464:	89 91       	ld	r24, Y+
 466:	ea df       	rcall	.-44     	; 0x43c <LCD_WriteData>

void LCD_DisplayString( unsigned char column, char* string) {
   //LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 468:	81 2f       	mov	r24, r17
}

void LCD_DisplayString( unsigned char column, char* string) {
   //LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 46a:	98 81       	ld	r25, Y
 46c:	91 11       	cpse	r25, r1
 46e:	f7 cf       	rjmp	.-18     	; 0x45e <LCD_DisplayString+0x10>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	1f 91       	pop	r17
 476:	08 95       	ret

00000478 <LCDTICK>:
	return USARTSTATE;
}

//Updates the strings to be displayed===================================================
enum LCDSTATE{DISPLAY, SENDING, RECE, OKAY1, OKAY2};
int LCDTICK(int LCDSTATE){
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	ec 01       	movw	r28, r24
	static unsigned char WAIT = 0;
	switch(LCDSTATE){
 47e:	82 30       	cpi	r24, 0x02	; 2
 480:	91 05       	cpc	r25, r1
 482:	09 f4       	brne	.+2      	; 0x486 <LCDTICK+0xe>
 484:	aa c0       	rjmp	.+340    	; 0x5da <LCDTICK+0x162>
 486:	34 f4       	brge	.+12     	; 0x494 <LCDTICK+0x1c>
 488:	00 97       	sbiw	r24, 0x00	; 0
 48a:	61 f0       	breq	.+24     	; 0x4a4 <LCDTICK+0x2c>
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	09 f4       	brne	.+2      	; 0x492 <LCDTICK+0x1a>
 490:	98 c0       	rjmp	.+304    	; 0x5c2 <LCDTICK+0x14a>
 492:	df c0       	rjmp	.+446    	; 0x652 <LCDTICK+0x1da>
 494:	83 30       	cpi	r24, 0x03	; 3
 496:	91 05       	cpc	r25, r1
 498:	09 f4       	brne	.+2      	; 0x49c <LCDTICK+0x24>
 49a:	ab c0       	rjmp	.+342    	; 0x5f2 <LCDTICK+0x17a>
 49c:	04 97       	sbiw	r24, 0x04	; 4
 49e:	09 f4       	brne	.+2      	; 0x4a2 <LCDTICK+0x2a>
 4a0:	c0 c0       	rjmp	.+384    	; 0x622 <LCDTICK+0x1aa>
 4a2:	d7 c0       	rjmp	.+430    	; 0x652 <LCDTICK+0x1da>
		case DISPLAY :
			LCD_DisplayString(1, MSG);
 4a4:	63 e3       	ldi	r22, 0x33	; 51
 4a6:	71 e0       	ldi	r23, 0x01	; 1
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	d1 df       	rcall	.-94     	; 0x44e <LCD_DisplayString>
			LCD_DisplayString(17, MSG2);
 4ac:	62 e2       	ldi	r22, 0x22	; 34
 4ae:	71 e0       	ldi	r23, 0x01	; 1
 4b0:	81 e1       	ldi	r24, 0x11	; 17
 4b2:	cd df       	rcall	.-102    	; 0x44e <LCD_DisplayString>
			if(joyUp == 0x01 && up == 0){
 4b4:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <joyUp>
 4b8:	81 30       	cpi	r24, 0x01	; 1
 4ba:	89 f4       	brne	.+34     	; 0x4de <LCDTICK+0x66>
 4bc:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <up>
 4c0:	81 11       	cpse	r24, r1
 4c2:	0d c0       	rjmp	.+26     	; 0x4de <LCDTICK+0x66>
				keyChar = 0;
 4c4:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <keyChar>
				t = 0;
 4c8:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <t>
				up = 1;
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <up>
			}
			if(joyDown == 0x01 && up == 1){
 4d2:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <joyDown>
 4d6:	81 30       	cpi	r24, 0x01	; 1
 4d8:	09 f0       	breq	.+2      	; 0x4dc <LCDTICK+0x64>
 4da:	d1 c0       	rjmp	.+418    	; 0x67e <LCDTICK+0x206>
 4dc:	08 c0       	rjmp	.+16     	; 0x4ee <LCDTICK+0x76>
 4de:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <joyDown>
 4e2:	81 30       	cpi	r24, 0x01	; 1
 4e4:	59 f4       	brne	.+22     	; 0x4fc <LCDTICK+0x84>
 4e6:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <up>
 4ea:	81 30       	cpi	r24, 0x01	; 1
 4ec:	39 f4       	brne	.+14     	; 0x4fc <LCDTICK+0x84>
				keyChar = 0;
 4ee:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <keyChar>
				t = 16;
 4f2:	80 e1       	ldi	r24, 0x10	; 16
 4f4:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <t>
				up = 0;
 4f8:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <up>
			}
	
			if(joyRight == 0x01 && t < 11 && up == 1){
 4fc:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <joyRight>
 500:	81 30       	cpi	r24, 0x01	; 1
 502:	09 f0       	breq	.+2      	; 0x506 <LCDTICK+0x8e>
 504:	c2 c0       	rjmp	.+388    	; 0x68a <LCDTICK+0x212>
 506:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <t>
 50a:	9b 30       	cpi	r25, 0x0B	; 11
 50c:	60 f4       	brcc	.+24     	; 0x526 <LCDTICK+0xae>
 50e:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <up>
 512:	21 30       	cpi	r18, 0x01	; 1
 514:	41 f4       	brne	.+16     	; 0x526 <LCDTICK+0xae>
				keyChar = 0;
 516:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <keyChar>
				t++;
 51a:	9f 5f       	subi	r25, 0xFF	; 255
 51c:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <t>
				joyRight2 = 1;
 520:	91 e0       	ldi	r25, 0x01	; 1
 522:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <joyRight2>
			}
			if(joyLeft == 0x01 && t > 0 && up == 1){
 526:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <joyLeft>
 52a:	91 30       	cpi	r25, 0x01	; 1
 52c:	09 f0       	breq	.+2      	; 0x530 <LCDTICK+0xb8>
 52e:	97 c0       	rjmp	.+302    	; 0x65e <LCDTICK+0x1e6>
 530:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <t>
 534:	22 23       	and	r18, r18
 536:	09 f4       	brne	.+2      	; 0x53a <LCDTICK+0xc2>
 538:	9c c0       	rjmp	.+312    	; 0x672 <LCDTICK+0x1fa>
 53a:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <up>
 53e:	31 30       	cpi	r19, 0x01	; 1
 540:	09 f0       	breq	.+2      	; 0x544 <LCDTICK+0xcc>
 542:	8a c0       	rjmp	.+276    	; 0x658 <LCDTICK+0x1e0>
				keyChar = 0;
 544:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <keyChar>
				t--;
 548:	21 50       	subi	r18, 0x01	; 1
 54a:	20 93 7d 01 	sts	0x017D, r18	; 0x80017d <t>
				joyLeft2 = 1;
 54e:	21 e0       	ldi	r18, 0x01	; 1
 550:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <joyLeft2>
 554:	81 c0       	rjmp	.+258    	; 0x658 <LCDTICK+0x1e0>
			}
			if(joyRight == 0x01 && t < 32 && up == 0){
 556:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <up>
 55a:	21 11       	cpse	r18, r1
 55c:	06 c0       	rjmp	.+12     	; 0x56a <LCDTICK+0xf2>
				t++;
 55e:	8f 5f       	subi	r24, 0xFF	; 255
 560:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <t>
				joyRight2 = 1;
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <joyRight2>
			}
			if(joyLeft == 0x01 && t > 16 && up == 0){
 56a:	91 30       	cpi	r25, 0x01	; 1
 56c:	71 f4       	brne	.+28     	; 0x58a <LCDTICK+0x112>
 56e:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <t>
 572:	81 31       	cpi	r24, 0x11	; 17
 574:	50 f0       	brcs	.+20     	; 0x58a <LCDTICK+0x112>
 576:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <up>
 57a:	91 11       	cpse	r25, r1
 57c:	06 c0       	rjmp	.+12     	; 0x58a <LCDTICK+0x112>
				t--;
 57e:	81 50       	subi	r24, 0x01	; 1
 580:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <t>
				joyLeft2 = 1;
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <joyLeft2>
			}
			LCD_Cursor(MSGSIZE + t + 1);
 58a:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <MSGSIZE>
 58e:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <t>
 592:	89 0f       	add	r24, r25
 594:	8f 5f       	subi	r24, 0xFF	; 255
 596:	3b df       	rcall	.-394    	; 0x40e <LCD_Cursor>
			if(READYTOSEND == 1){
 598:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <READYTOSEND>
 59c:	81 30       	cpi	r24, 0x01	; 1
				LCDSTATE = SENDING;
				LCD_DisplayString(1, WAITMESSAGE);
 59e:	31 f4       	brne	.+12     	; 0x5ac <LCDTICK+0x134>
 5a0:	61 e1       	ldi	r22, 0x11	; 17
 5a2:	71 e0       	ldi	r23, 0x01	; 1
 5a4:	54 df       	rcall	.-344    	; 0x44e <LCD_DisplayString>
				t--;
				joyLeft2 = 1;
			}
			LCD_Cursor(MSGSIZE + t + 1);
			if(READYTOSEND == 1){
				LCDSTATE = SENDING;
 5a6:	c1 e0       	ldi	r28, 0x01	; 1
 5a8:	d0 e0       	ldi	r29, 0x00	; 0
				LCD_DisplayString(1, WAITMESSAGE);
				break;
 5aa:	81 c0       	rjmp	.+258    	; 0x6ae <LCDTICK+0x236>
			}
			if(READYTORECEIVE == 1){
 5ac:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <READYTORECEIVE>
 5b0:	81 30       	cpi	r24, 0x01	; 1
 5b2:	09 f0       	breq	.+2      	; 0x5b6 <LCDTICK+0x13e>
				LCDSTATE = RECE;
				LCD_DisplayString(1, WAITMESSAGE);
 5b4:	7c c0       	rjmp	.+248    	; 0x6ae <LCDTICK+0x236>
 5b6:	61 e1       	ldi	r22, 0x11	; 17
 5b8:	71 e0       	ldi	r23, 0x01	; 1
 5ba:	49 df       	rcall	.-366    	; 0x44e <LCD_DisplayString>
				LCDSTATE = SENDING;
				LCD_DisplayString(1, WAITMESSAGE);
				break;
			}
			if(READYTORECEIVE == 1){
				LCDSTATE = RECE;
 5bc:	c2 e0       	ldi	r28, 0x02	; 2
 5be:	d0 e0       	ldi	r29, 0x00	; 0
				LCD_DisplayString(1, WAITMESSAGE);
				break;
 5c0:	76 c0       	rjmp	.+236    	; 0x6ae <LCDTICK+0x236>
			}
			LCDSTATE = DISPLAY;
		break;
		case SENDING :
			if(READYTOSEND == 1)
 5c2:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <READYTOSEND>
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	09 f4       	brne	.+2      	; 0x5cc <LCDTICK+0x154>
				LCDSTATE = SENDING;
			else{
				LCD_DisplayString(1, DONEMESSAGE);
 5ca:	71 c0       	rjmp	.+226    	; 0x6ae <LCDTICK+0x236>
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	71 e0       	ldi	r23, 0x01	; 1
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	3d df       	rcall	.-390    	; 0x44e <LCD_DisplayString>
				LCDSTATE = OKAY1;
 5d4:	c3 e0       	ldi	r28, 0x03	; 3
 5d6:	d0 e0       	ldi	r29, 0x00	; 0
 5d8:	6a c0       	rjmp	.+212    	; 0x6ae <LCDTICK+0x236>
			}
		break;
		case RECE :
			if(READYTORECEIVE == 1)
 5da:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <READYTORECEIVE>
 5de:	81 30       	cpi	r24, 0x01	; 1
 5e0:	09 f4       	brne	.+2      	; 0x5e4 <LCDTICK+0x16c>
				LCDSTATE = RECE;
			else{
				LCD_DisplayString(1, DONEMESSAGE);
 5e2:	65 c0       	rjmp	.+202    	; 0x6ae <LCDTICK+0x236>
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	71 e0       	ldi	r23, 0x01	; 1
 5e8:	81 e0       	ldi	r24, 0x01	; 1
				LCDSTATE = OKAY2;
 5ea:	31 df       	rcall	.-414    	; 0x44e <LCD_DisplayString>
 5ec:	c4 e0       	ldi	r28, 0x04	; 4
			}
		break;
		case OKAY1 :
			LCD_Cursor(5);
 5ee:	d0 e0       	ldi	r29, 0x00	; 0
 5f0:	5e c0       	rjmp	.+188    	; 0x6ae <LCDTICK+0x236>
			LCD_WriteData(3);
 5f2:	85 e0       	ldi	r24, 0x05	; 5
 5f4:	0c df       	rcall	.-488    	; 0x40e <LCD_Cursor>
			LCD_Cursor(6);
 5f6:	83 e0       	ldi	r24, 0x03	; 3
 5f8:	21 df       	rcall	.-446    	; 0x43c <LCD_WriteData>
 5fa:	86 e0       	ldi	r24, 0x06	; 6
			LCD_WriteData(2);
 5fc:	08 df       	rcall	.-496    	; 0x40e <LCD_Cursor>
 5fe:	82 e0       	ldi	r24, 0x02	; 2
 600:	1d df       	rcall	.-454    	; 0x43c <LCD_WriteData>
			LCD_Cursor(7);
 602:	87 e0       	ldi	r24, 0x07	; 7
 604:	04 df       	rcall	.-504    	; 0x40e <LCD_Cursor>
 606:	81 e0       	ldi	r24, 0x01	; 1
			LCD_WriteData(1);
 608:	19 df       	rcall	.-462    	; 0x43c <LCD_WriteData>
 60a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <WAIT.2003>
			WAIT++;
 60e:	8f 5f       	subi	r24, 0xFF	; 255
 610:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <WAIT.2003>
			if(WAIT < 40){
				LCDSTATE = OKAY1;
			}else{
				LCDSTATE = DISPLAY;
 614:	88 32       	cpi	r24, 0x28	; 40
			}
			LCD_Cursor(0);
 616:	10 f0       	brcs	.+4      	; 0x61c <LCDTICK+0x1a4>
 618:	c0 e0       	ldi	r28, 0x00	; 0
		break;
 61a:	d0 e0       	ldi	r29, 0x00	; 0
		case OKAY2 :
			LCD_Cursor(5);
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	f7 de       	rcall	.-530    	; 0x40e <LCD_Cursor>
 620:	46 c0       	rjmp	.+140    	; 0x6ae <LCDTICK+0x236>
			LCD_WriteData(3);
 622:	85 e0       	ldi	r24, 0x05	; 5
 624:	f4 de       	rcall	.-536    	; 0x40e <LCD_Cursor>
 626:	83 e0       	ldi	r24, 0x03	; 3
			LCD_Cursor(6);
 628:	09 df       	rcall	.-494    	; 0x43c <LCD_WriteData>
 62a:	86 e0       	ldi	r24, 0x06	; 6
			LCD_WriteData(2);
 62c:	f0 de       	rcall	.-544    	; 0x40e <LCD_Cursor>
 62e:	82 e0       	ldi	r24, 0x02	; 2
 630:	05 df       	rcall	.-502    	; 0x43c <LCD_WriteData>
			LCD_Cursor(7);
 632:	87 e0       	ldi	r24, 0x07	; 7
 634:	ec de       	rcall	.-552    	; 0x40e <LCD_Cursor>
 636:	81 e0       	ldi	r24, 0x01	; 1
			LCD_WriteData(1);
 638:	01 df       	rcall	.-510    	; 0x43c <LCD_WriteData>
 63a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <WAIT.2003>
			WAIT++;
 63e:	8f 5f       	subi	r24, 0xFF	; 255
 640:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <WAIT.2003>
 644:	84 31       	cpi	r24, 0x14	; 20
 646:	10 f0       	brcs	.+4      	; 0x64c <LCDTICK+0x1d4>
			if(WAIT < 20){
 648:	c0 e0       	ldi	r28, 0x00	; 0
 64a:	d0 e0       	ldi	r29, 0x00	; 0
				LCDSTATE = OKAY2;
			}else{
				LCDSTATE = DISPLAY;
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	df de       	rcall	.-578    	; 0x40e <LCD_Cursor>
			}
			LCD_Cursor(0);
 650:	2e c0       	rjmp	.+92     	; 0x6ae <LCDTICK+0x236>
 652:	c0 e0       	ldi	r28, 0x00	; 0
 654:	d0 e0       	ldi	r29, 0x00	; 0
		break;
 656:	2b c0       	rjmp	.+86     	; 0x6ae <LCDTICK+0x236>
		default :
			LCDSTATE = DISPLAY;
 658:	81 30       	cpi	r24, 0x01	; 1
 65a:	e9 f0       	breq	.+58     	; 0x696 <LCDTICK+0x21e>
		break;
	}
	return LCDSTATE;
 65c:	88 cf       	rjmp	.-240    	; 0x56e <LCDTICK+0xf6>
			if(joyLeft == 0x01 && t > 0 && up == 1){
				keyChar = 0;
				t--;
				joyLeft2 = 1;
			}
			if(joyRight == 0x01 && t < 32 && up == 0){
 65e:	81 30       	cpi	r24, 0x01	; 1
 660:	09 f0       	breq	.+2      	; 0x664 <LCDTICK+0x1ec>
 662:	93 cf       	rjmp	.-218    	; 0x58a <LCDTICK+0x112>
 664:	1e c0       	rjmp	.+60     	; 0x6a2 <LCDTICK+0x22a>
 666:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <up>
 66a:	88 23       	and	r24, r24
 66c:	09 f4       	brne	.+2      	; 0x670 <LCDTICK+0x1f8>
 66e:	77 cf       	rjmp	.-274    	; 0x55e <LCDTICK+0xe6>
 670:	7e cf       	rjmp	.-260    	; 0x56e <LCDTICK+0xf6>
 672:	81 30       	cpi	r24, 0x01	; 1
 674:	c1 f3       	breq	.-16     	; 0x666 <LCDTICK+0x1ee>
 676:	7b cf       	rjmp	.-266    	; 0x56e <LCDTICK+0xf6>
 678:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <t>
 67c:	48 cf       	rjmp	.-368    	; 0x50e <LCDTICK+0x96>
				keyChar = 0;
				t = 16;
				up = 0;
			}
	
			if(joyRight == 0x01 && t < 11 && up == 1){
 67e:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <joyRight>
 682:	81 30       	cpi	r24, 0x01	; 1
 684:	09 f0       	breq	.+2      	; 0x688 <LCDTICK+0x210>
 686:	4f cf       	rjmp	.-354    	; 0x526 <LCDTICK+0xae>
 688:	f7 cf       	rjmp	.-18     	; 0x678 <LCDTICK+0x200>
 68a:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <joyLeft>
 68e:	91 30       	cpi	r25, 0x01	; 1
				keyChar = 0;
				t++;
				joyRight2 = 1;
			}
			if(joyLeft == 0x01 && t > 0 && up == 1){
 690:	09 f0       	breq	.+2      	; 0x694 <LCDTICK+0x21c>
 692:	7b cf       	rjmp	.-266    	; 0x58a <LCDTICK+0x112>
 694:	4d cf       	rjmp	.-358    	; 0x530 <LCDTICK+0xb8>
 696:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <t>
 69a:	80 32       	cpi	r24, 0x20	; 32
				keyChar = 0;
				t--;
				joyLeft2 = 1;
			}
			if(joyRight == 0x01 && t < 32 && up == 0){
 69c:	08 f0       	brcs	.+2      	; 0x6a0 <LCDTICK+0x228>
 69e:	67 cf       	rjmp	.-306    	; 0x56e <LCDTICK+0xf6>
 6a0:	5a cf       	rjmp	.-332    	; 0x556 <LCDTICK+0xde>
 6a2:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <t>
 6a6:	80 32       	cpi	r24, 0x20	; 32
 6a8:	08 f0       	brcs	.+2      	; 0x6ac <LCDTICK+0x234>
 6aa:	6f cf       	rjmp	.-290    	; 0x58a <LCDTICK+0x112>
 6ac:	54 cf       	rjmp	.-344    	; 0x556 <LCDTICK+0xde>
 6ae:	ce 01       	movw	r24, r28
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
		default :
			LCDSTATE = DISPLAY;
		break;
	}
	return LCDSTATE;
}
 6b4:	08 95       	ret

000006b6 <receive_string>:
 6b6:	cf 93       	push	r28
 6b8:	df 93       	push	r29
 6ba:	a2 e2       	ldi	r26, 0x22	; 34
#define BAUD_RATE 9600
#define BAUD_PRESCALE (((F_CPU / (BAUD_RATE * 16UL))) - 1)
unsigned char READYTOSEND;
unsigned char READYTORECEIVE;
//Sends and receives strings via USART==================================================
void receive_string(char* stringswapped){
 6bc:	b1 e0       	ldi	r27, 0x01	; 1
 6be:	22 e3       	ldi	r18, 0x32	; 50
 6c0:	31 e0       	ldi	r19, 0x01	; 1
 6c2:	fd 01       	movw	r30, r26
	static unsigned char flush;

	for(unsigned j = 0; j < 16; j++){
		MSG2[j] = ' ';
 6c4:	80 e2       	ldi	r24, 0x20	; 32
 6c6:	81 93       	st	Z+, r24
unsigned char READYTORECEIVE;
//Sends and receives strings via USART==================================================
void receive_string(char* stringswapped){
	static unsigned char flush;

	for(unsigned j = 0; j < 16; j++){
 6c8:	2e 17       	cp	r18, r30
 6ca:	3f 07       	cpc	r19, r31
 6cc:	e1 f7       	brne	.-8      	; 0x6c6 <receive_string+0x10>
		MSG2[j] = ' ';
	}
	MSG2[16] = 0;
 6ce:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <MSG2+0x10>
	for(unsigned j = 0; j < 16; j++){
		while ( !(UCSR0A & (1 << RXC0)) );
 6d2:	e0 ec       	ldi	r30, 0xC0	; 192
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
		MSG2[j] = UDR0;
 6d6:	c6 ec       	ldi	r28, 0xC6	; 198
 6d8:	d0 e0       	ldi	r29, 0x00	; 0
	for(unsigned j = 0; j < 16; j++){
		MSG2[j] = ' ';
	}
	MSG2[16] = 0;
	for(unsigned j = 0; j < 16; j++){
		while ( !(UCSR0A & (1 << RXC0)) );
 6da:	80 81       	ld	r24, Z
 6dc:	88 23       	and	r24, r24
 6de:	ec f7       	brge	.-6      	; 0x6da <receive_string+0x24>
		MSG2[j] = UDR0;
 6e0:	88 81       	ld	r24, Y
 6e2:	8d 93       	st	X+, r24

	for(unsigned j = 0; j < 16; j++){
		MSG2[j] = ' ';
	}
	MSG2[16] = 0;
	for(unsigned j = 0; j < 16; j++){
 6e4:	2a 17       	cp	r18, r26
 6e6:	3b 07       	cpc	r19, r27
 6e8:	c1 f7       	brne	.-16     	; 0x6da <receive_string+0x24>
		while ( !(UCSR0A & (1 << RXC0)) );
		MSG2[j] = UDR0;
	}
	while ( UCSR0A & (1 << RXC0) ) { flush = UDR0; }
 6ea:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 6ee:	88 23       	and	r24, r24
 6f0:	44 f4       	brge	.+16     	; 0x702 <receive_string+0x4c>
 6f2:	a6 ec       	ldi	r26, 0xC6	; 198
 6f4:	b0 e0       	ldi	r27, 0x00	; 0
 6f6:	e0 ec       	ldi	r30, 0xC0	; 192
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	8c 91       	ld	r24, X
 6fc:	80 81       	ld	r24, Z
 6fe:	88 23       	and	r24, r24
 700:	e4 f3       	brlt	.-8      	; 0x6fa <receive_string+0x44>
	LCD_Cursor(0);
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	84 de       	rcall	.-760    	; 0x40e <LCD_Cursor>
}
 706:	df 91       	pop	r29
 708:	cf 91       	pop	r28
 70a:	08 95       	ret

0000070c <transmit_string>:
void transmit_string(char* stringswapped){
 70c:	cf 93       	push	r28
 70e:	df 93       	push	r29
 710:	63 e3       	ldi	r22, 0x33	; 51
 712:	71 e0       	ldi	r23, 0x01	; 1
 714:	23 e4       	ldi	r18, 0x43	; 67
 716:	31 e0       	ldi	r19, 0x01	; 1
 718:	eb 01       	movw	r28, r22
	for(unsigned j = 0; j < 16; j++){
		while( !(UCSR0A & (1 << UDRE0)) );
 71a:	e0 ec       	ldi	r30, 0xC0	; 192
 71c:	f0 e0       	ldi	r31, 0x00	; 0
			UDR0 = MSG[j];
 71e:	46 ec       	ldi	r20, 0xC6	; 198
 720:	50 e0       	ldi	r21, 0x00	; 0
	while ( UCSR0A & (1 << RXC0) ) { flush = UDR0; }
	LCD_Cursor(0);
}
void transmit_string(char* stringswapped){
	for(unsigned j = 0; j < 16; j++){
		while( !(UCSR0A & (1 << UDRE0)) );
 722:	80 81       	ld	r24, Z
 724:	85 ff       	sbrs	r24, 5
 726:	fd cf       	rjmp	.-6      	; 0x722 <transmit_string+0x16>
			UDR0 = MSG[j];
 728:	89 91       	ld	r24, Y+
 72a:	da 01       	movw	r26, r20
 72c:	8c 93       	st	X, r24
	}
	while ( UCSR0A & (1 << RXC0) ) { flush = UDR0; }
	LCD_Cursor(0);
}
void transmit_string(char* stringswapped){
	for(unsigned j = 0; j < 16; j++){
 72e:	c2 17       	cp	r28, r18
 730:	d3 07       	cpc	r29, r19
 732:	b9 f7       	brne	.-18     	; 0x722 <transmit_string+0x16>
		while( !(UCSR0A & (1 << UDRE0)) );
			UDR0 = MSG[j];
	}
	for(unsigned j = 0; j < 16; j++){
		MSG[j] = ' ';
 734:	80 e2       	ldi	r24, 0x20	; 32
 736:	fb 01       	movw	r30, r22
 738:	81 93       	st	Z+, r24
 73a:	bf 01       	movw	r22, r30
void transmit_string(char* stringswapped){
	for(unsigned j = 0; j < 16; j++){
		while( !(UCSR0A & (1 << UDRE0)) );
			UDR0 = MSG[j];
	}
	for(unsigned j = 0; j < 16; j++){
 73c:	e2 17       	cp	r30, r18
 73e:	f3 07       	cpc	r31, r19
 740:	d1 f7       	brne	.-12     	; 0x736 <transmit_string+0x2a>
		MSG[j] = ' ';
	}
	MSG[16] = 0;
 742:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <MSG+0x10>
	LCD_Cursor(0);
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	62 de       	rcall	.-828    	; 0x40e <LCD_Cursor>
}
 74a:	df 91       	pop	r29
 74c:	cf 91       	pop	r28
 74e:	08 95       	ret

00000750 <USARTTICK>:

enum USARTSTATE{WAITSHAKE, WAITTRANSMIT, WAITRECEIVE, TRANSMIT, RECEIVE};
int USARTTICK(int USARTSTATE){
	switch(USARTSTATE){
 750:	82 30       	cpi	r24, 0x02	; 2
 752:	91 05       	cpc	r25, r1
 754:	49 f1       	breq	.+82     	; 0x7a8 <USARTTICK+0x58>
 756:	34 f4       	brge	.+12     	; 0x764 <USARTTICK+0x14>
 758:	00 97       	sbiw	r24, 0x00	; 0
 75a:	51 f0       	breq	.+20     	; 0x770 <USARTTICK+0x20>
 75c:	81 30       	cpi	r24, 0x01	; 1
 75e:	91 05       	cpc	r25, r1
 760:	b1 f0       	breq	.+44     	; 0x78e <USARTTICK+0x3e>
 762:	48 c0       	rjmp	.+144    	; 0x7f4 <USARTTICK+0xa4>
 764:	83 30       	cpi	r24, 0x03	; 3
 766:	91 05       	cpc	r25, r1
 768:	61 f1       	breq	.+88     	; 0x7c2 <USARTTICK+0x72>
 76a:	04 97       	sbiw	r24, 0x04	; 4
 76c:	99 f1       	breq	.+102    	; 0x7d4 <USARTTICK+0x84>
 76e:	42 c0       	rjmp	.+132    	; 0x7f4 <USARTTICK+0xa4>
		case WAITSHAKE :
			if(READYTOSEND == 1){
 770:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <READYTOSEND>
 774:	21 30       	cpi	r18, 0x01	; 1
 776:	19 f4       	brne	.+6      	; 0x77e <USARTTICK+0x2e>
				PORTD = PORTD | 0x20;
 778:	5d 9a       	sbi	0x0b, 5	; 11
				USARTSTATE = WAITTRANSMIT;
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	90 e0       	ldi	r25, 0x00	; 0
			}
			if(READYTORECEIVE == 1){
 77e:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <READYTORECEIVE>
 782:	21 30       	cpi	r18, 0x01	; 1
 784:	c9 f5       	brne	.+114    	; 0x7f8 <USARTTICK+0xa8>
				PORTD = PORTD | 0x08;
 786:	5b 9a       	sbi	0x0b, 3	; 11
				USARTSTATE = WAITRECEIVE;
 788:	82 e0       	ldi	r24, 0x02	; 2
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	08 95       	ret
			}
		break;
		case WAITTRANSMIT :
			if(READYTOSEND == 0){
 78e:	20 91 90 01 	lds	r18, 0x0190	; 0x800190 <READYTOSEND>
 792:	21 11       	cpse	r18, r1
 794:	04 c0       	rjmp	.+8      	; 0x79e <USARTTICK+0x4e>
				PORTD = PORTD & 0xDF;
 796:	5d 98       	cbi	0x0b, 5	; 11
				USARTSTATE = WAITSHAKE;
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	90 e0       	ldi	r25, 0x00	; 0
				break;
 79c:	08 95       	ret
			}
			if((PORTD & 0x04) == 0x04){
 79e:	5a 9b       	sbis	0x0b, 2	; 11
 7a0:	2b c0       	rjmp	.+86     	; 0x7f8 <USARTTICK+0xa8>
				USARTSTATE = TRANSMIT;
 7a2:	83 e0       	ldi	r24, 0x03	; 3
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	08 95       	ret
			}
		break;
		case WAITRECEIVE :
			if(READYTORECEIVE == 0){
 7a8:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <READYTORECEIVE>
 7ac:	21 11       	cpse	r18, r1
 7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <USARTTICK+0x68>
				PORTD = PORTD & 0xF7;
 7b0:	5b 98       	cbi	0x0b, 3	; 11
				USARTSTATE = WAITSHAKE;
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	90 e0       	ldi	r25, 0x00	; 0
				break;
 7b6:	08 95       	ret
			}
			if((PIND & 0x10) == 0x10){
 7b8:	4c 9b       	sbis	0x09, 4	; 9
 7ba:	1e c0       	rjmp	.+60     	; 0x7f8 <USARTTICK+0xa8>
				USARTSTATE = RECEIVE;
 7bc:	84 e0       	ldi	r24, 0x04	; 4
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	08 95       	ret
			}
		break;
		case TRANSMIT :
			transmit_string(MSG);
 7c2:	83 e3       	ldi	r24, 0x33	; 51
 7c4:	91 e0       	ldi	r25, 0x01	; 1
 7c6:	a2 df       	rcall	.-188    	; 0x70c <transmit_string>
			PORTD = PORTD & 0xDF;
 7c8:	5d 98       	cbi	0x0b, 5	; 11
			READYTOSEND = 0;
 7ca:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <READYTOSEND>
			USARTSTATE = WAITSHAKE;
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	90 e0       	ldi	r25, 0x00	; 0
		break;
 7d2:	08 95       	ret
		case RECEIVE :
			receive_string(MSG2);
 7d4:	82 e2       	ldi	r24, 0x22	; 34
 7d6:	91 e0       	ldi	r25, 0x01	; 1
 7d8:	6e df       	rcall	.-292    	; 0x6b6 <receive_string>
			PORTD = PORTD & 0xF7;
 7da:	5b 98       	cbi	0x0b, 3	; 11
			eeprom_update_block(MSG2, (void *)1, 17);
 7dc:	41 e1       	ldi	r20, 0x11	; 17
 7de:	50 e0       	ldi	r21, 0x00	; 0
 7e0:	61 e0       	ldi	r22, 0x01	; 1
 7e2:	70 e0       	ldi	r23, 0x00	; 0
 7e4:	82 e2       	ldi	r24, 0x22	; 34
 7e6:	91 e0       	ldi	r25, 0x01	; 1
 7e8:	47 d1       	rcall	.+654    	; 0xa78 <eeprom_update_block>
			READYTORECEIVE = 0;
 7ea:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <READYTORECEIVE>
			USARTSTATE = WAITSHAKE;
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	90 e0       	ldi	r25, 0x00	; 0
		break;
 7f2:	08 95       	ret
		default :
			USARTSTATE = WAITSHAKE;
 7f4:	80 e0       	ldi	r24, 0x00	; 0
 7f6:	90 e0       	ldi	r25, 0x00	; 0
		break;
	}
	
	return USARTSTATE;
}
 7f8:	08 95       	ret

000007fa <LCD_build>:
}



void LCD_build(){
	LCD_WriteCommand(0x48);
 7fa:	88 e4       	ldi	r24, 0x48	; 72
 7fc:	ff dd       	rcall	.-1026   	; 0x3fc <LCD_WriteCommand>
	LCD_WriteData(0x00);
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	1d de       	rcall	.-966    	; 0x43c <LCD_WriteData>
	LCD_WriteData(0x10);
 802:	80 e1       	ldi	r24, 0x10	; 16
 804:	1b de       	rcall	.-970    	; 0x43c <LCD_WriteData>
	LCD_WriteData(0x30);
 806:	80 e3       	ldi	r24, 0x30	; 48
 808:	19 de       	rcall	.-974    	; 0x43c <LCD_WriteData>
	LCD_WriteData(0x70);
 80a:	80 e7       	ldi	r24, 0x70	; 112
 80c:	17 de       	rcall	.-978    	; 0x43c <LCD_WriteData>
	LCD_WriteData(0xFF);
 80e:	8f ef       	ldi	r24, 0xFF	; 255
 810:	15 de       	rcall	.-982    	; 0x43c <LCD_WriteData>
	LCD_WriteData(0xFF);
 812:	8f ef       	ldi	r24, 0xFF	; 255
 814:	13 de       	rcall	.-986    	; 0x43c <LCD_WriteData>
	LCD_WriteData(0xFF);
 816:	8f ef       	ldi	r24, 0xFF	; 255
 818:	11 de       	rcall	.-990    	; 0x43c <LCD_WriteData>
	LCD_WriteData(0xFF);
 81a:	8f ef       	ldi	r24, 0xFF	; 255
 81c:	0f de       	rcall	.-994    	; 0x43c <LCD_WriteData>
	LCD_WriteCommand(0x50);
 81e:	80 e5       	ldi	r24, 0x50	; 80
 820:	ed dd       	rcall	.-1062   	; 0x3fc <LCD_WriteCommand>
	LCD_WriteData(0x00);
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	0b de       	rcall	.-1002   	; 0x43c <LCD_WriteData>
	LCD_WriteData(0x00);
 826:	80 e0       	ldi	r24, 0x00	; 0
 828:	09 de       	rcall	.-1006   	; 0x43c <LCD_WriteData>
	LCD_WriteData(0x00);
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	07 de       	rcall	.-1010   	; 0x43c <LCD_WriteData>
	LCD_WriteData(0x24);
 82e:	84 e2       	ldi	r24, 0x24	; 36
 830:	05 de       	rcall	.-1014   	; 0x43c <LCD_WriteData>
	LCD_WriteData(0x00);
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	03 de       	rcall	.-1018   	; 0x43c <LCD_WriteData>
	LCD_WriteData(0x42);
 836:	82 e4       	ldi	r24, 0x42	; 66
 838:	01 de       	rcall	.-1022   	; 0x43c <LCD_WriteData>
	LCD_WriteData(0x24);
 83a:	84 e2       	ldi	r24, 0x24	; 36
 83c:	ff dd       	rcall	.-1026   	; 0x43c <LCD_WriteData>
	LCD_WriteData(0x18);
 83e:	88 e1       	ldi	r24, 0x18	; 24
 840:	fd dd       	rcall	.-1030   	; 0x43c <LCD_WriteData>
	LCD_WriteCommand(0x58);
 842:	88 e5       	ldi	r24, 0x58	; 88
 844:	db dd       	rcall	.-1098   	; 0x3fc <LCD_WriteCommand>
 846:	80 e0       	ldi	r24, 0x00	; 0
	LCD_WriteData(0x00);
 848:	f9 dd       	rcall	.-1038   	; 0x43c <LCD_WriteData>
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	f7 dd       	rcall	.-1042   	; 0x43c <LCD_WriteData>
	LCD_WriteData(0x00);
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	f5 dd       	rcall	.-1046   	; 0x43c <LCD_WriteData>
 852:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteData(0x00);
 854:	f3 dd       	rcall	.-1050   	; 0x43c <LCD_WriteData>
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	f1 dd       	rcall	.-1054   	; 0x43c <LCD_WriteData>
	LCD_WriteData(0x02);
 85a:	84 e0       	ldi	r24, 0x04	; 4
 85c:	ef dd       	rcall	.-1058   	; 0x43c <LCD_WriteData>
 85e:	82 e0       	ldi	r24, 0x02	; 2
	LCD_WriteData(0x00);
 860:	ed dd       	rcall	.-1062   	; 0x43c <LCD_WriteData>
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	eb cd       	rjmp	.-1066   	; 0x43c <LCD_WriteData>
	LCD_WriteData(0x04);
 866:	08 95       	ret

00000868 <main>:
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
	LCD_WriteData(0x02);
 86c:	cd b7       	in	r28, 0x3d	; 61
 86e:	de b7       	in	r29, 0x3e	; 62
 870:	28 97       	sbiw	r28, 0x08	; 8
	LCD_WriteData(0x01);
 872:	0f b6       	in	r0, 0x3f	; 63
 874:	f8 94       	cli
 876:	de bf       	out	0x3e, r29	; 62
 878:	0f be       	out	0x3f, r0	; 63




int main(void)
{
 87a:	cd bf       	out	0x3d, r28	; 61
	
	joyUp = 0;
 87c:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <joyUp>
	joyDown = 0;
 880:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <joyDown>
	joyLeft = 0;
 884:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <joyLeft>
	joyRight = 0;
 888:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <joyRight>
	joyUp2 = 0;
 88c:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <joyUp2>
	joyDown2 = 0;
 890:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <joyDown2>
	joyLeft2 = 0;
 894:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <joyLeft2>
	joyRight2 = 0;
 898:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <joyRight2>
	sent = 0;
 89c:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <sent>
	received = 0;
 8a0:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <received>
	
	READYTORECEIVE = 0;
 8a4:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <READYTORECEIVE>
	READYTOSEND = 0;
 8a8:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <READYTOSEND>
	
	UCSR0B |= (1 << RXEN0)  | (1 << TXEN0);
 8ac:	e1 ec       	ldi	r30, 0xC1	; 193
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	80 81       	ld	r24, Z
 8b2:	88 61       	ori	r24, 0x18	; 24
 8b4:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01);
 8b6:	e2 ec       	ldi	r30, 0xC2	; 194
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	80 81       	ld	r24, Z
 8bc:	86 60       	ori	r24, 0x06	; 6
 8be:	80 83       	st	Z, r24
	UBRR0L = BAUD_PRESCALE;
 8c0:	83 e3       	ldi	r24, 0x33	; 51
 8c2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR0H = (BAUD_PRESCALE >> 8);
 8c6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	
	eeprom_read_block(MSG2, 0x01, 12);
 8ca:	4c e0       	ldi	r20, 0x0C	; 12
 8cc:	50 e0       	ldi	r21, 0x00	; 0
 8ce:	61 e0       	ldi	r22, 0x01	; 1
 8d0:	70 e0       	ldi	r23, 0x00	; 0
 8d2:	82 e2       	ldi	r24, 0x22	; 34
 8d4:	91 e0       	ldi	r25, 0x01	; 1
 8d6:	c0 d0       	rcall	.+384    	; 0xa58 <eeprom_read_block>
	
	up = 1;
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <up>
	t = 0;
 8de:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <t>
	keyChar = 0x00;
 8e2:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <keyChar>
	MSGSPOT = 0;
 8e6:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <MSGSPOT+0x1>
 8ea:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <MSGSPOT>
	MSGSIZE = 0;
 8ee:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <MSGSIZE>
	
	DDRD = 0xAA; PORTD = 0x55;
 8f2:	8a ea       	ldi	r24, 0xAA	; 170
 8f4:	8a b9       	out	0x0a, r24	; 10
 8f6:	85 e5       	ldi	r24, 0x55	; 85
 8f8:	8b b9       	out	0x0b, r24	; 11
	DDRC = 0xFF; PORTC = 0x00;
 8fa:	8f ef       	ldi	r24, 0xFF	; 255
 8fc:	87 b9       	out	0x07, r24	; 7
 8fe:	18 b8       	out	0x08, r1	; 8
	DDRB = 0xFF; PORTB = 0x00;
 900:	84 b9       	out	0x04, r24	; 4
 902:	15 b8       	out	0x05, r1	; 5
	DDRA = 0x00; PORTA = 0xFF;//Joystick input.
 904:	11 b8       	out	0x01, r1	; 1
 906:	82 b9       	out	0x02, r24	; 2
	
	ADMUX |= (1 << REFS0);//setting the reference of ADC
 908:	ec e7       	ldi	r30, 0x7C	; 124
 90a:	f0 e0       	ldi	r31, 0x00	; 0
 90c:	90 81       	ld	r25, Z
 90e:	90 64       	ori	r25, 0x40	; 64
 910:	90 83       	st	Z, r25
	ADCSRA |= (1<<ADPS0) | (1<ADPS1)| (1<ADPS2) | (1<<ADEN) ;
 912:	ea e7       	ldi	r30, 0x7A	; 122
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	90 81       	ld	r25, Z
 918:	91 68       	ori	r25, 0x81	; 129
 91a:	90 83       	st	Z, r25
	static task task1, task2, task3, task4;
	task *tasks[] = { &task1, &task2, &task3, &task4};
 91c:	98 e0       	ldi	r25, 0x08	; 8
 91e:	e8 e4       	ldi	r30, 0x48	; 72
 920:	f1 e0       	ldi	r31, 0x01	; 1
 922:	de 01       	movw	r26, r28
 924:	11 96       	adiw	r26, 0x01	; 1
 926:	01 90       	ld	r0, Z+
 928:	0d 92       	st	X+, r0
 92a:	9a 95       	dec	r25
 92c:	e1 f7       	brne	.-8      	; 0x926 <main+0xbe>
	//task1 init
	task1.state = -1;
 92e:	e1 e7       	ldi	r30, 0x71	; 113
 930:	f1 e0       	ldi	r31, 0x01	; 1
 932:	80 83       	st	Z, r24
	task1.period = 40;
 934:	48 e2       	ldi	r20, 0x28	; 40
 936:	50 e0       	ldi	r21, 0x00	; 0
 938:	60 e0       	ldi	r22, 0x00	; 0
 93a:	70 e0       	ldi	r23, 0x00	; 0
 93c:	41 83       	std	Z+1, r20	; 0x01
 93e:	52 83       	std	Z+2, r21	; 0x02
 940:	63 83       	std	Z+3, r22	; 0x03
 942:	74 83       	std	Z+4, r23	; 0x04
	task1.elapsedTime = 40;
 944:	45 83       	std	Z+5, r20	; 0x05
 946:	56 83       	std	Z+6, r21	; 0x06
 948:	67 83       	std	Z+7, r22	; 0x07
 94a:	70 87       	std	Z+8, r23	; 0x08
	task1.TickFct = &KeyBoardTick;
 94c:	24 e6       	ldi	r18, 0x64	; 100
 94e:	30 e0       	ldi	r19, 0x00	; 0
 950:	32 87       	std	Z+10, r19	; 0x0a
 952:	21 87       	std	Z+9, r18	; 0x09
	
	task2.state = -1;
 954:	e6 e6       	ldi	r30, 0x66	; 102
 956:	f1 e0       	ldi	r31, 0x01	; 1
 958:	80 83       	st	Z, r24
	task2.period = 20;
 95a:	44 e1       	ldi	r20, 0x14	; 20
 95c:	50 e0       	ldi	r21, 0x00	; 0
 95e:	60 e0       	ldi	r22, 0x00	; 0
 960:	70 e0       	ldi	r23, 0x00	; 0
 962:	41 83       	std	Z+1, r20	; 0x01
 964:	52 83       	std	Z+2, r21	; 0x02
 966:	63 83       	std	Z+3, r22	; 0x03
 968:	74 83       	std	Z+4, r23	; 0x04
	task2.elapsedTime = 20;
 96a:	45 83       	std	Z+5, r20	; 0x05
 96c:	56 83       	std	Z+6, r21	; 0x06
 96e:	67 83       	std	Z+7, r22	; 0x07
 970:	70 87       	std	Z+8, r23	; 0x08
	task2.TickFct = &JoyStickTick;
 972:	23 e0       	ldi	r18, 0x03	; 3
 974:	31 e0       	ldi	r19, 0x01	; 1
 976:	32 87       	std	Z+10, r19	; 0x0a
 978:	21 87       	std	Z+9, r18	; 0x09
	
	task3.state = -1;
 97a:	eb e5       	ldi	r30, 0x5B	; 91
 97c:	f1 e0       	ldi	r31, 0x01	; 1
 97e:	80 83       	st	Z, r24
	task3.period = 200;
 980:	08 ec       	ldi	r16, 0xC8	; 200
 982:	10 e0       	ldi	r17, 0x00	; 0
 984:	20 e0       	ldi	r18, 0x00	; 0
 986:	30 e0       	ldi	r19, 0x00	; 0
 988:	01 83       	std	Z+1, r16	; 0x01
 98a:	12 83       	std	Z+2, r17	; 0x02
 98c:	23 83       	std	Z+3, r18	; 0x03
 98e:	34 83       	std	Z+4, r19	; 0x04
	task3.elapsedTime = 200;
 990:	05 83       	std	Z+5, r16	; 0x05
 992:	16 83       	std	Z+6, r17	; 0x06
 994:	27 83       	std	Z+7, r18	; 0x07
 996:	30 87       	std	Z+8, r19	; 0x08
	task3.TickFct = &LCDTICK;
 998:	2c e3       	ldi	r18, 0x3C	; 60
 99a:	32 e0       	ldi	r19, 0x02	; 2
 99c:	32 87       	std	Z+10, r19	; 0x0a
 99e:	21 87       	std	Z+9, r18	; 0x09
	
	task4.state = -1;
 9a0:	e0 e5       	ldi	r30, 0x50	; 80
 9a2:	f1 e0       	ldi	r31, 0x01	; 1
 9a4:	80 83       	st	Z, r24
	task4.period = 20;
 9a6:	41 83       	std	Z+1, r20	; 0x01
 9a8:	52 83       	std	Z+2, r21	; 0x02
 9aa:	63 83       	std	Z+3, r22	; 0x03
 9ac:	74 83       	std	Z+4, r23	; 0x04
	task4.elapsedTime = 20;
 9ae:	45 83       	std	Z+5, r20	; 0x05
 9b0:	56 83       	std	Z+6, r21	; 0x06
 9b2:	67 83       	std	Z+7, r22	; 0x07
 9b4:	70 87       	std	Z+8, r23	; 0x08
	task4.TickFct = &USARTTICK;
 9b6:	88 ea       	ldi	r24, 0xA8	; 168
 9b8:	93 e0       	ldi	r25, 0x03	; 3
 9ba:	92 87       	std	Z+10, r25	; 0x0a
 9bc:	81 87       	std	Z+9, r24	; 0x09
	
	TimerSet(20);
 9be:	64 e1       	ldi	r22, 0x14	; 20
 9c0:	70 e0       	ldi	r23, 0x00	; 0
 9c2:	80 e0       	ldi	r24, 0x00	; 0
 9c4:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 9c6:	96 dc       	rcall	.-1748   	; 0x2f4 <TimerSet>
	LCD_init();
 9c8:	a6 dc       	rcall	.-1716   	; 0x316 <TimerOn>
	LCD_build();
 9ca:	29 dd       	rcall	.-1454   	; 0x41e <LCD_init>
 9cc:	16 df       	rcall	.-468    	; 0x7fa <LCD_build>
	LCD_Cursor(0);
 9ce:	80 e0       	ldi	r24, 0x00	; 0
 9d0:	1e dd       	rcall	.-1476   	; 0x40e <LCD_Cursor>
 9d2:	7e 01       	movw	r14, r28
 9d4:	89 e0       	ldi	r24, 0x09	; 9
 9d6:	e8 0e       	add	r14, r24
 9d8:	f1 1c       	adc	r15, r1
 9da:	de 01       	movw	r26, r28
 9dc:	11 96       	adiw	r26, 0x01	; 1
 9de:	6d 01       	movw	r12, r26
 9e0:	f6 01       	movw	r30, r12
	while(1)
	{
		
		for ( unsigned i = 0; i < 4; i++ ) {
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 9e2:	01 91       	ld	r16, Z+
 9e4:	11 91       	ld	r17, Z+
 9e6:	6f 01       	movw	r12, r30
 9e8:	d8 01       	movw	r26, r16
 9ea:	15 96       	adiw	r26, 0x05	; 5
 9ec:	4d 91       	ld	r20, X+
 9ee:	5d 91       	ld	r21, X+
 9f0:	6d 91       	ld	r22, X+
 9f2:	7c 91       	ld	r23, X
 9f4:	18 97       	sbiw	r26, 0x08	; 8
 9f6:	11 96       	adiw	r26, 0x01	; 1
 9f8:	8d 91       	ld	r24, X+
 9fa:	9d 91       	ld	r25, X+
 9fc:	0d 90       	ld	r0, X+
 9fe:	bc 91       	ld	r27, X
 a00:	a0 2d       	mov	r26, r0
 a02:	48 17       	cp	r20, r24
 a04:	59 07       	cpc	r21, r25
 a06:	6a 07       	cpc	r22, r26
 a08:	7b 07       	cpc	r23, r27
 a0a:	81 f4       	brne	.+32     	; 0xa2c <main+0x1c4>
 a0c:	f8 01       	movw	r30, r16
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 a0e:	80 81       	ld	r24, Z
 a10:	01 84       	ldd	r0, Z+9	; 0x09
 a12:	f2 85       	ldd	r31, Z+10	; 0x0a
 a14:	e0 2d       	mov	r30, r0
 a16:	08 2e       	mov	r0, r24
 a18:	00 0c       	add	r0, r0
 a1a:	99 0b       	sbc	r25, r25
 a1c:	09 95       	icall
 a1e:	d8 01       	movw	r26, r16
 a20:	8c 93       	st	X, r24
 a22:	f8 01       	movw	r30, r16
				tasks[i]->elapsedTime = 0;
 a24:	15 82       	std	Z+5, r1	; 0x05
 a26:	16 82       	std	Z+6, r1	; 0x06
 a28:	17 82       	std	Z+7, r1	; 0x07
 a2a:	10 86       	std	Z+8, r1	; 0x08
 a2c:	f8 01       	movw	r30, r16
			}
			tasks[i]->elapsedTime += 20;
 a2e:	85 81       	ldd	r24, Z+5	; 0x05
 a30:	96 81       	ldd	r25, Z+6	; 0x06
 a32:	a7 81       	ldd	r26, Z+7	; 0x07
 a34:	b0 85       	ldd	r27, Z+8	; 0x08
 a36:	44 96       	adiw	r24, 0x14	; 20
 a38:	a1 1d       	adc	r26, r1
 a3a:	b1 1d       	adc	r27, r1
 a3c:	85 83       	std	Z+5, r24	; 0x05
 a3e:	96 83       	std	Z+6, r25	; 0x06
 a40:	a7 83       	std	Z+7, r26	; 0x07
 a42:	b0 87       	std	Z+8, r27	; 0x08
 a44:	ce 14       	cp	r12, r14
	LCD_build();
	LCD_Cursor(0);
	while(1)
	{
		
		for ( unsigned i = 0; i < 4; i++ ) {
 a46:	df 04       	cpc	r13, r15
 a48:	59 f6       	brne	.-106    	; 0x9e0 <main+0x178>
 a4a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <TimerFlag>
			}
			tasks[i]->elapsedTime += 20;
		}
	
		//Remember to add timer to code
		while(!TimerFlag);
 a4e:	88 23       	and	r24, r24
 a50:	e1 f3       	breq	.-8      	; 0xa4a <main+0x1e2>
 a52:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <TimerFlag>
		TimerFlag = 0;
 a56:	c1 cf       	rjmp	.-126    	; 0x9da <main+0x172>

00000a58 <eeprom_read_block>:
 a58:	dc 01       	movw	r26, r24
 a5a:	cb 01       	movw	r24, r22

00000a5c <eeprom_read_blraw>:
 a5c:	fc 01       	movw	r30, r24
 a5e:	f9 99       	sbic	0x1f, 1	; 31
 a60:	fe cf       	rjmp	.-4      	; 0xa5e <eeprom_read_blraw+0x2>
 a62:	06 c0       	rjmp	.+12     	; 0xa70 <eeprom_read_blraw+0x14>
 a64:	f2 bd       	out	0x22, r31	; 34
 a66:	e1 bd       	out	0x21, r30	; 33
 a68:	f8 9a       	sbi	0x1f, 0	; 31
 a6a:	31 96       	adiw	r30, 0x01	; 1
 a6c:	00 b4       	in	r0, 0x20	; 32
 a6e:	0d 92       	st	X+, r0
 a70:	41 50       	subi	r20, 0x01	; 1
 a72:	50 40       	sbci	r21, 0x00	; 0
 a74:	b8 f7       	brcc	.-18     	; 0xa64 <eeprom_read_blraw+0x8>
 a76:	08 95       	ret

00000a78 <eeprom_update_block>:
 a78:	dc 01       	movw	r26, r24
 a7a:	a4 0f       	add	r26, r20
 a7c:	b5 1f       	adc	r27, r21
 a7e:	41 50       	subi	r20, 0x01	; 1
 a80:	50 40       	sbci	r21, 0x00	; 0
 a82:	40 f0       	brcs	.+16     	; 0xa94 <eeprom_update_block+0x1c>
 a84:	cb 01       	movw	r24, r22
 a86:	84 0f       	add	r24, r20
 a88:	95 1f       	adc	r25, r21
 a8a:	2e 91       	ld	r18, -X
 a8c:	05 d0       	rcall	.+10     	; 0xa98 <eeprom_update_r18>
 a8e:	41 50       	subi	r20, 0x01	; 1
 a90:	50 40       	sbci	r21, 0x00	; 0
 a92:	d8 f7       	brcc	.-10     	; 0xa8a <eeprom_update_block+0x12>
 a94:	08 95       	ret

00000a96 <eeprom_update_byte>:
 a96:	26 2f       	mov	r18, r22

00000a98 <eeprom_update_r18>:
 a98:	f9 99       	sbic	0x1f, 1	; 31
 a9a:	fe cf       	rjmp	.-4      	; 0xa98 <eeprom_update_r18>
 a9c:	92 bd       	out	0x22, r25	; 34
 a9e:	81 bd       	out	0x21, r24	; 33
 aa0:	f8 9a       	sbi	0x1f, 0	; 31
 aa2:	01 97       	sbiw	r24, 0x01	; 1
 aa4:	00 b4       	in	r0, 0x20	; 32
 aa6:	02 16       	cp	r0, r18
 aa8:	39 f0       	breq	.+14     	; 0xab8 <eeprom_update_r18+0x20>
 aaa:	1f ba       	out	0x1f, r1	; 31
 aac:	20 bd       	out	0x20, r18	; 32
 aae:	0f b6       	in	r0, 0x3f	; 63
 ab0:	f8 94       	cli
 ab2:	fa 9a       	sbi	0x1f, 2	; 31
 ab4:	f9 9a       	sbi	0x1f, 1	; 31
 ab6:	0f be       	out	0x3f, r0	; 63
 ab8:	08 95       	ret

00000aba <_exit>:
 aba:	f8 94       	cli

00000abc <__stop_program>:
 abc:	ff cf       	rjmp	.-2      	; 0xabc <__stop_program>
